
9_SPI_ST7735S_TFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ff0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08002178  08002178  00003178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002250  08002250  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002250  08002250  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002250  08002250  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002250  08002250  00003250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002254  08002254  00003254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002258  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08002264  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002264  00004090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008603  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c45  00000000  00000000  0000c63f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000958  00000000  00000000  0000e288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006eb  00000000  00000000  0000ebe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000250a5  00000000  00000000  0000f2cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b34a  00000000  00000000  00034370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1171  00000000  00000000  0003f6ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012082b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002388  00000000  00000000  00120870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00122bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002160 	.word	0x08002160

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002160 	.word	0x08002160

080001c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ce:	f107 030c 	add.w	r3, r7, #12
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001de:	4b21      	ldr	r3, [pc, #132]	@ (8000264 <MX_GPIO_Init+0x9c>)
 80001e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001e2:	4a20      	ldr	r2, [pc, #128]	@ (8000264 <MX_GPIO_Init+0x9c>)
 80001e4:	f043 0304 	orr.w	r3, r3, #4
 80001e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80001ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000264 <MX_GPIO_Init+0x9c>)
 80001ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001ee:	f003 0304 	and.w	r3, r3, #4
 80001f2:	60bb      	str	r3, [r7, #8]
 80001f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000264 <MX_GPIO_Init+0x9c>)
 80001f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001fa:	4a1a      	ldr	r2, [pc, #104]	@ (8000264 <MX_GPIO_Init+0x9c>)
 80001fc:	f043 0302 	orr.w	r3, r3, #2
 8000200:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000202:	4b18      	ldr	r3, [pc, #96]	@ (8000264 <MX_GPIO_Init+0x9c>)
 8000204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000206:	f003 0302 	and.w	r3, r3, #2
 800020a:	607b      	str	r3, [r7, #4]
 800020c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800020e:	4b15      	ldr	r3, [pc, #84]	@ (8000264 <MX_GPIO_Init+0x9c>)
 8000210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000212:	4a14      	ldr	r2, [pc, #80]	@ (8000264 <MX_GPIO_Init+0x9c>)
 8000214:	f043 0301 	orr.w	r3, r3, #1
 8000218:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800021a:	4b12      	ldr	r3, [pc, #72]	@ (8000264 <MX_GPIO_Init+0x9c>)
 800021c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800021e:	f003 0301 	and.w	r3, r3, #1
 8000222:	603b      	str	r3, [r7, #0]
 8000224:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	f640 0104 	movw	r1, #2052	@ 0x804
 800022c:	480e      	ldr	r0, [pc, #56]	@ (8000268 <MX_GPIO_Init+0xa0>)
 800022e:	f000 fd89 	bl	8000d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000232:	2201      	movs	r2, #1
 8000234:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000238:	480b      	ldr	r0, [pc, #44]	@ (8000268 <MX_GPIO_Init+0xa0>)
 800023a:	f000 fd83 	bl	8000d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 800023e:	f641 0304 	movw	r3, #6148	@ 0x1804
 8000242:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000244:	2301      	movs	r3, #1
 8000246:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000248:	2300      	movs	r3, #0
 800024a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800024c:	2300      	movs	r3, #0
 800024e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000250:	f107 030c 	add.w	r3, r7, #12
 8000254:	4619      	mov	r1, r3
 8000256:	4804      	ldr	r0, [pc, #16]	@ (8000268 <MX_GPIO_Init+0xa0>)
 8000258:	f000 fbca 	bl	80009f0 <HAL_GPIO_Init>

}
 800025c:	bf00      	nop
 800025e:	3720      	adds	r7, #32
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40021000 	.word	0x40021000
 8000268:	48000400 	.word	0x48000400

0800026c <lcd_cmd>:
  CMD(ST7735S_MADCTL), 0xa0,
};

//Funkcja wysylajaca komende do wyswietlacza (static oznacza ze funkcja nie jest widoczna
//w innych plikach, a ta funkcja bedzie uzywana tylko w tym pliku):
static void lcd_cmd(uint8_t cmd) {
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	71fb      	strb	r3, [r7, #7]

	//Ustawienie stanu niskiego na linii DC oznacza ze wysylamy komende:
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800027c:	480c      	ldr	r0, [pc, #48]	@ (80002b0 <lcd_cmd+0x44>)
 800027e:	f000 fd61 	bl	8000d44 <HAL_GPIO_WritePin>
	//Ustawienie stanu niskiego na linii CS oznacza ze rozpoczynamy komunikacje SPI:
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000282:	2200      	movs	r2, #0
 8000284:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000288:	4809      	ldr	r0, [pc, #36]	@ (80002b0 <lcd_cmd+0x44>)
 800028a:	f000 fd5b 	bl	8000d44 <HAL_GPIO_WritePin>
	//Wyslanie komendy przekazanej do funkcji:
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 800028e:	1df9      	adds	r1, r7, #7
 8000290:	f04f 33ff 	mov.w	r3, #4294967295
 8000294:	2201      	movs	r2, #1
 8000296:	4807      	ldr	r0, [pc, #28]	@ (80002b4 <lcd_cmd+0x48>)
 8000298:	f001 fc5b 	bl	8001b52 <HAL_SPI_Transmit>
	//Ustawienie stanu wysokiego na linii CS oznacza ze konczymy komunikacje SPI:
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800029c:	2201      	movs	r2, #1
 800029e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002a2:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <lcd_cmd+0x44>)
 80002a4:	f000 fd4e 	bl	8000d44 <HAL_GPIO_WritePin>

}
 80002a8:	bf00      	nop
 80002aa:	3708      	adds	r7, #8
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	48000400 	.word	0x48000400
 80002b4:	20000028 	.word	0x20000028

080002b8 <lcd_data>:

//Funkcja wysylajaca komende do wyswietlacza:
static void lcd_data(uint8_t data) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]

	//Ustawienie stanu wysokiego na linii DC oznacza ze wysylamy dane:
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80002c2:	2201      	movs	r2, #1
 80002c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80002c8:	480c      	ldr	r0, [pc, #48]	@ (80002fc <lcd_data+0x44>)
 80002ca:	f000 fd3b 	bl	8000d44 <HAL_GPIO_WritePin>
	//Ustawienie stanu niskiego na linii CS oznacza ze rozpoczynamy komunikacje SPI:
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80002ce:	2200      	movs	r2, #0
 80002d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002d4:	4809      	ldr	r0, [pc, #36]	@ (80002fc <lcd_data+0x44>)
 80002d6:	f000 fd35 	bl	8000d44 <HAL_GPIO_WritePin>
	//Wyslanie danych przekazanych do funkcji:
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 80002da:	1df9      	adds	r1, r7, #7
 80002dc:	f04f 33ff 	mov.w	r3, #4294967295
 80002e0:	2201      	movs	r2, #1
 80002e2:	4807      	ldr	r0, [pc, #28]	@ (8000300 <lcd_data+0x48>)
 80002e4:	f001 fc35 	bl	8001b52 <HAL_SPI_Transmit>
	//Ustawienie stanu wysokiego na linii CS oznacza ze konczymy komunikacje SPI:
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80002e8:	2201      	movs	r2, #1
 80002ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002ee:	4803      	ldr	r0, [pc, #12]	@ (80002fc <lcd_data+0x44>)
 80002f0:	f000 fd28 	bl	8000d44 <HAL_GPIO_WritePin>

}
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	48000400 	.word	0x48000400
 8000300:	20000028 	.word	0x20000028

08000304 <lcd_send>:

//Funkcja wysylajaca przekazywana wartosc jako komenda lub jako dane. Funkcja jako argument
//przyjmuje wartosc 16-bitowa. Na 9 bicie znajduje sie bit który oznacza czy wartosc bedzie
//wysylana jako komenda czy jako dane (1 - komenda, 0 - dane):
static void lcd_send(uint16_t value) {
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	80fb      	strh	r3, [r7, #6]

	//Sprawdzenie czy wartosc ma byc wyslana jako komenda
	if(value & 0x100) {
 800030e:	88fb      	ldrh	r3, [r7, #6]
 8000310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000314:	2b00      	cmp	r3, #0
 8000316:	d005      	beq.n	8000324 <lcd_send+0x20>
		lcd_cmd(value);
 8000318:	88fb      	ldrh	r3, [r7, #6]
 800031a:	b2db      	uxtb	r3, r3
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ffa5 	bl	800026c <lcd_cmd>
	//W przeciwnym razie wartosc jest wysylana jako dane:
	else {
		lcd_data(value);
	}

}
 8000322:	e004      	b.n	800032e <lcd_send+0x2a>
		lcd_data(value);
 8000324:	88fb      	ldrh	r3, [r7, #6]
 8000326:	b2db      	uxtb	r3, r3
 8000328:	4618      	mov	r0, r3
 800032a:	f7ff ffc5 	bl	80002b8 <lcd_data>
}
 800032e:	bf00      	nop
 8000330:	3708      	adds	r7, #8
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
	...

08000338 <lcd_init>:

//Funkcja realizujaca inicjalizacje wyswietlacza (nie jest oznaczona jako statyczna,
//poniewaz bedzie wywolywana w pliku main.c):
void lcd_init(void) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0

	int i;

	//Reset sterownika wyswietlacza:
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	2104      	movs	r1, #4
 8000342:	4817      	ldr	r0, [pc, #92]	@ (80003a0 <lcd_init+0x68>)
 8000344:	f000 fcfe 	bl	8000d44 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000348:	2064      	movs	r0, #100	@ 0x64
 800034a:	f000 fa47 	bl	80007dc <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 800034e:	2201      	movs	r2, #1
 8000350:	2104      	movs	r1, #4
 8000352:	4813      	ldr	r0, [pc, #76]	@ (80003a0 <lcd_init+0x68>)
 8000354:	f000 fcf6 	bl	8000d44 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000358:	2064      	movs	r0, #100	@ 0x64
 800035a:	f000 fa3f 	bl	80007dc <HAL_Delay>

	//Wysylanie danych z tablicy do realizacji poczatkowej inicjalizacji wyswietlacza:
	for(i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 800035e:	2300      	movs	r3, #0
 8000360:	607b      	str	r3, [r7, #4]
 8000362:	e009      	b.n	8000378 <lcd_init+0x40>
		lcd_send(init_table[i]);
 8000364:	4a0f      	ldr	r2, [pc, #60]	@ (80003a4 <lcd_init+0x6c>)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800036c:	4618      	mov	r0, r3
 800036e:	f7ff ffc9 	bl	8000304 <lcd_send>
	for(i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	3301      	adds	r3, #1
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2b4b      	cmp	r3, #75	@ 0x4b
 800037c:	d9f2      	bls.n	8000364 <lcd_init+0x2c>
	}

	HAL_Delay(200);
 800037e:	20c8      	movs	r0, #200	@ 0xc8
 8000380:	f000 fa2c 	bl	80007dc <HAL_Delay>

	//Obudzenie wyswietlacza z trybu uspienia:
	lcd_cmd(ST7735S_SLPOUT);
 8000384:	2011      	movs	r0, #17
 8000386:	f7ff ff71 	bl	800026c <lcd_cmd>

	HAL_Delay(120);
 800038a:	2078      	movs	r0, #120	@ 0x78
 800038c:	f000 fa26 	bl	80007dc <HAL_Delay>

	//Wlaczenie wyswietlacza:
	lcd_cmd(ST7735S_DISPON);
 8000390:	2029      	movs	r0, #41	@ 0x29
 8000392:	f7ff ff6b 	bl	800026c <lcd_cmd>
}
 8000396:	bf00      	nop
 8000398:	3708      	adds	r7, #8
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	48000400 	.word	0x48000400
 80003a4:	08002178 	.word	0x08002178

080003a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ac:	f000 f9a1 	bl	80006f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b0:	f000 f808 	bl	80003c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b4:	f7ff ff08 	bl	80001c8 <MX_GPIO_Init>
  MX_SPI2_Init();
 80003b8:	f000 f86c 	bl	8000494 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  //Inicjalizacja wyswietlacza:
  lcd_init();
 80003bc:	f7ff ffbc 	bl	8000338 <lcd_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003c0:	bf00      	nop
 80003c2:	e7fd      	b.n	80003c0 <main+0x18>

080003c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b096      	sub	sp, #88	@ 0x58
 80003c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ca:	f107 0314 	add.w	r3, r7, #20
 80003ce:	2244      	movs	r2, #68	@ 0x44
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f001 fe98 	bl	8002108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d8:	463b      	mov	r3, r7
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
 80003e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003e6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80003ea:	f000 fce1 	bl	8000db0 <HAL_PWREx_ControlVoltageScaling>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80003f4:	f000 f848 	bl	8000488 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80003f8:	f000 fcbc 	bl	8000d74 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80003fc:	4b21      	ldr	r3, [pc, #132]	@ (8000484 <SystemClock_Config+0xc0>)
 80003fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000402:	4a20      	ldr	r2, [pc, #128]	@ (8000484 <SystemClock_Config+0xc0>)
 8000404:	f023 0318 	bic.w	r3, r3, #24
 8000408:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800040c:	2314      	movs	r3, #20
 800040e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000410:	2301      	movs	r3, #1
 8000412:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000414:	2301      	movs	r3, #1
 8000416:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000418:	2300      	movs	r3, #0
 800041a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800041c:	2360      	movs	r3, #96	@ 0x60
 800041e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000420:	2302      	movs	r3, #2
 8000422:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000424:	2301      	movs	r3, #1
 8000426:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000428:	2301      	movs	r3, #1
 800042a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800042c:	2328      	movs	r3, #40	@ 0x28
 800042e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000430:	2307      	movs	r3, #7
 8000432:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000434:	2302      	movs	r3, #2
 8000436:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000438:	2302      	movs	r3, #2
 800043a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043c:	f107 0314 	add.w	r3, r7, #20
 8000440:	4618      	mov	r0, r3
 8000442:	f000 fd0b 	bl	8000e5c <HAL_RCC_OscConfig>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800044c:	f000 f81c 	bl	8000488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000450:	230f      	movs	r3, #15
 8000452:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000454:	2303      	movs	r3, #3
 8000456:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000460:	2300      	movs	r3, #0
 8000462:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000464:	463b      	mov	r3, r7
 8000466:	2104      	movs	r1, #4
 8000468:	4618      	mov	r0, r3
 800046a:	f001 f8d3 	bl	8001614 <HAL_RCC_ClockConfig>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000474:	f000 f808 	bl	8000488 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000478:	f001 fab8 	bl	80019ec <HAL_RCCEx_EnableMSIPLLMode>
}
 800047c:	bf00      	nop
 800047e:	3758      	adds	r7, #88	@ 0x58
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40021000 	.word	0x40021000

08000488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800048c:	b672      	cpsid	i
}
 800048e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000490:	bf00      	nop
 8000492:	e7fd      	b.n	8000490 <Error_Handler+0x8>

08000494 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000498:	4b1b      	ldr	r3, [pc, #108]	@ (8000508 <MX_SPI2_Init+0x74>)
 800049a:	4a1c      	ldr	r2, [pc, #112]	@ (800050c <MX_SPI2_Init+0x78>)
 800049c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800049e:	4b1a      	ldr	r3, [pc, #104]	@ (8000508 <MX_SPI2_Init+0x74>)
 80004a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80004a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80004a6:	4b18      	ldr	r3, [pc, #96]	@ (8000508 <MX_SPI2_Init+0x74>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80004ac:	4b16      	ldr	r3, [pc, #88]	@ (8000508 <MX_SPI2_Init+0x74>)
 80004ae:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80004b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004b4:	4b14      	ldr	r3, [pc, #80]	@ (8000508 <MX_SPI2_Init+0x74>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004ba:	4b13      	ldr	r3, [pc, #76]	@ (8000508 <MX_SPI2_Init+0x74>)
 80004bc:	2200      	movs	r2, #0
 80004be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80004c0:	4b11      	ldr	r3, [pc, #68]	@ (8000508 <MX_SPI2_Init+0x74>)
 80004c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80004c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80004c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000508 <MX_SPI2_Init+0x74>)
 80004ca:	2210      	movs	r2, #16
 80004cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000508 <MX_SPI2_Init+0x74>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80004d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000508 <MX_SPI2_Init+0x74>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004da:	4b0b      	ldr	r3, [pc, #44]	@ (8000508 <MX_SPI2_Init+0x74>)
 80004dc:	2200      	movs	r2, #0
 80004de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80004e0:	4b09      	ldr	r3, [pc, #36]	@ (8000508 <MX_SPI2_Init+0x74>)
 80004e2:	2207      	movs	r2, #7
 80004e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004e6:	4b08      	ldr	r3, [pc, #32]	@ (8000508 <MX_SPI2_Init+0x74>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80004ec:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <MX_SPI2_Init+0x74>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80004f2:	4805      	ldr	r0, [pc, #20]	@ (8000508 <MX_SPI2_Init+0x74>)
 80004f4:	f001 fa8a 	bl	8001a0c <HAL_SPI_Init>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80004fe:	f7ff ffc3 	bl	8000488 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000028 	.word	0x20000028
 800050c:	40003800 	.word	0x40003800

08000510 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08a      	sub	sp, #40	@ 0x28
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000518:	f107 0314 	add.w	r3, r7, #20
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a25      	ldr	r2, [pc, #148]	@ (80005c4 <HAL_SPI_MspInit+0xb4>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d144      	bne.n	80005bc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000532:	4b25      	ldr	r3, [pc, #148]	@ (80005c8 <HAL_SPI_MspInit+0xb8>)
 8000534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000536:	4a24      	ldr	r2, [pc, #144]	@ (80005c8 <HAL_SPI_MspInit+0xb8>)
 8000538:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800053c:	6593      	str	r3, [r2, #88]	@ 0x58
 800053e:	4b22      	ldr	r3, [pc, #136]	@ (80005c8 <HAL_SPI_MspInit+0xb8>)
 8000540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000546:	613b      	str	r3, [r7, #16]
 8000548:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800054a:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <HAL_SPI_MspInit+0xb8>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054e:	4a1e      	ldr	r2, [pc, #120]	@ (80005c8 <HAL_SPI_MspInit+0xb8>)
 8000550:	f043 0304 	orr.w	r3, r3, #4
 8000554:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000556:	4b1c      	ldr	r3, [pc, #112]	@ (80005c8 <HAL_SPI_MspInit+0xb8>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055a:	f003 0304 	and.w	r3, r3, #4
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	4b19      	ldr	r3, [pc, #100]	@ (80005c8 <HAL_SPI_MspInit+0xb8>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000566:	4a18      	ldr	r2, [pc, #96]	@ (80005c8 <HAL_SPI_MspInit+0xb8>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800056e:	4b16      	ldr	r3, [pc, #88]	@ (80005c8 <HAL_SPI_MspInit+0xb8>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800057a:	2308      	movs	r3, #8
 800057c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800057e:	2302      	movs	r3, #2
 8000580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	2300      	movs	r3, #0
 8000584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000586:	2303      	movs	r3, #3
 8000588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800058a:	2305      	movs	r3, #5
 800058c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	4619      	mov	r1, r3
 8000594:	480d      	ldr	r0, [pc, #52]	@ (80005cc <HAL_SPI_MspInit+0xbc>)
 8000596:	f000 fa2b 	bl	80009f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800059a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800059e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a0:	2302      	movs	r3, #2
 80005a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005a8:	2303      	movs	r3, #3
 80005aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005ac:	2305      	movs	r3, #5
 80005ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4619      	mov	r1, r3
 80005b6:	4806      	ldr	r0, [pc, #24]	@ (80005d0 <HAL_SPI_MspInit+0xc0>)
 80005b8:	f000 fa1a 	bl	80009f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80005bc:	bf00      	nop
 80005be:	3728      	adds	r7, #40	@ 0x28
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40003800 	.word	0x40003800
 80005c8:	40021000 	.word	0x40021000
 80005cc:	48000800 	.word	0x48000800
 80005d0:	48000400 	.word	0x48000400

080005d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005da:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <HAL_MspInit+0x44>)
 80005dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005de:	4a0e      	ldr	r2, [pc, #56]	@ (8000618 <HAL_MspInit+0x44>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80005e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <HAL_MspInit+0x44>)
 80005e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f2:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <HAL_MspInit+0x44>)
 80005f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005f6:	4a08      	ldr	r2, [pc, #32]	@ (8000618 <HAL_MspInit+0x44>)
 80005f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80005fe:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <HAL_MspInit+0x44>)
 8000600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	40021000 	.word	0x40021000

0800061c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <NMI_Handler+0x4>

08000624 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <HardFault_Handler+0x4>

0800062c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <MemManage_Handler+0x4>

08000634 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <BusFault_Handler+0x4>

0800063c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <UsageFault_Handler+0x4>

08000644 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000672:	f000 f893 	bl	800079c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000680:	4b06      	ldr	r3, [pc, #24]	@ (800069c <SystemInit+0x20>)
 8000682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000686:	4a05      	ldr	r2, [pc, #20]	@ (800069c <SystemInit+0x20>)
 8000688:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800068c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006a4:	f7ff ffea 	bl	800067c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a8:	480c      	ldr	r0, [pc, #48]	@ (80006dc <LoopForever+0x6>)
  ldr r1, =_edata
 80006aa:	490d      	ldr	r1, [pc, #52]	@ (80006e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ac:	4a0d      	ldr	r2, [pc, #52]	@ (80006e4 <LoopForever+0xe>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b0:	e002      	b.n	80006b8 <LoopCopyDataInit>

080006b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b6:	3304      	adds	r3, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006bc:	d3f9      	bcc.n	80006b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006be:	4a0a      	ldr	r2, [pc, #40]	@ (80006e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c0:	4c0a      	ldr	r4, [pc, #40]	@ (80006ec <LoopForever+0x16>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c4:	e001      	b.n	80006ca <LoopFillZerobss>

080006c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c8:	3204      	adds	r2, #4

080006ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006cc:	d3fb      	bcc.n	80006c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ce:	f001 fd23 	bl	8002118 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006d2:	f7ff fe69 	bl	80003a8 <main>

080006d6 <LoopForever>:

LoopForever:
    b LoopForever
 80006d6:	e7fe      	b.n	80006d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006e4:	08002258 	.word	0x08002258
  ldr r2, =_sbss
 80006e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006ec:	20000090 	.word	0x20000090

080006f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006f0:	e7fe      	b.n	80006f0 <ADC1_2_IRQHandler>

080006f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b082      	sub	sp, #8
 80006f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006f8:	2300      	movs	r3, #0
 80006fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006fc:	2003      	movs	r0, #3
 80006fe:	f000 f943 	bl	8000988 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000702:	200f      	movs	r0, #15
 8000704:	f000 f80e 	bl	8000724 <HAL_InitTick>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d002      	beq.n	8000714 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800070e:	2301      	movs	r3, #1
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	e001      	b.n	8000718 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000714:	f7ff ff5e 	bl	80005d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000718:	79fb      	ldrb	r3, [r7, #7]
}
 800071a:	4618      	mov	r0, r3
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800072c:	2300      	movs	r3, #0
 800072e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000730:	4b17      	ldr	r3, [pc, #92]	@ (8000790 <HAL_InitTick+0x6c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d023      	beq.n	8000780 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000738:	4b16      	ldr	r3, [pc, #88]	@ (8000794 <HAL_InitTick+0x70>)
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <HAL_InitTick+0x6c>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	4619      	mov	r1, r3
 8000742:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000746:	fbb3 f3f1 	udiv	r3, r3, r1
 800074a:	fbb2 f3f3 	udiv	r3, r2, r3
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f941 	bl	80009d6 <HAL_SYSTICK_Config>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d10f      	bne.n	800077a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2b0f      	cmp	r3, #15
 800075e:	d809      	bhi.n	8000774 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000760:	2200      	movs	r2, #0
 8000762:	6879      	ldr	r1, [r7, #4]
 8000764:	f04f 30ff 	mov.w	r0, #4294967295
 8000768:	f000 f919 	bl	800099e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800076c:	4a0a      	ldr	r2, [pc, #40]	@ (8000798 <HAL_InitTick+0x74>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6013      	str	r3, [r2, #0]
 8000772:	e007      	b.n	8000784 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000774:	2301      	movs	r3, #1
 8000776:	73fb      	strb	r3, [r7, #15]
 8000778:	e004      	b.n	8000784 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800077a:	2301      	movs	r3, #1
 800077c:	73fb      	strb	r3, [r7, #15]
 800077e:	e001      	b.n	8000784 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000780:	2301      	movs	r3, #1
 8000782:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000784:	7bfb      	ldrb	r3, [r7, #15]
}
 8000786:	4618      	mov	r0, r3
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000008 	.word	0x20000008
 8000794:	20000000 	.word	0x20000000
 8000798:	20000004 	.word	0x20000004

0800079c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <HAL_IncTick+0x20>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <HAL_IncTick+0x24>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4413      	add	r3, r2
 80007ac:	4a04      	ldr	r2, [pc, #16]	@ (80007c0 <HAL_IncTick+0x24>)
 80007ae:	6013      	str	r3, [r2, #0]
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	20000008 	.word	0x20000008
 80007c0:	2000008c 	.word	0x2000008c

080007c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  return uwTick;
 80007c8:	4b03      	ldr	r3, [pc, #12]	@ (80007d8 <HAL_GetTick+0x14>)
 80007ca:	681b      	ldr	r3, [r3, #0]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	2000008c 	.word	0x2000008c

080007dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007e4:	f7ff ffee 	bl	80007c4 <HAL_GetTick>
 80007e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007f4:	d005      	beq.n	8000802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80007f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000820 <HAL_Delay+0x44>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	4413      	add	r3, r2
 8000800:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000802:	bf00      	nop
 8000804:	f7ff ffde 	bl	80007c4 <HAL_GetTick>
 8000808:	4602      	mov	r2, r0
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	68fa      	ldr	r2, [r7, #12]
 8000810:	429a      	cmp	r2, r3
 8000812:	d8f7      	bhi.n	8000804 <HAL_Delay+0x28>
  {
  }
}
 8000814:	bf00      	nop
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000008 	.word	0x20000008

08000824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f003 0307 	and.w	r3, r3, #7
 8000832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000834:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <__NVIC_SetPriorityGrouping+0x44>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000840:	4013      	ands	r3, r2
 8000842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800084c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000850:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000856:	4a04      	ldr	r2, [pc, #16]	@ (8000868 <__NVIC_SetPriorityGrouping+0x44>)
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	60d3      	str	r3, [r2, #12]
}
 800085c:	bf00      	nop
 800085e:	3714      	adds	r7, #20
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000870:	4b04      	ldr	r3, [pc, #16]	@ (8000884 <__NVIC_GetPriorityGrouping+0x18>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	0a1b      	lsrs	r3, r3, #8
 8000876:	f003 0307 	and.w	r3, r3, #7
}
 800087a:	4618      	mov	r0, r3
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	6039      	str	r1, [r7, #0]
 8000892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000898:	2b00      	cmp	r3, #0
 800089a:	db0a      	blt.n	80008b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	490c      	ldr	r1, [pc, #48]	@ (80008d4 <__NVIC_SetPriority+0x4c>)
 80008a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a6:	0112      	lsls	r2, r2, #4
 80008a8:	b2d2      	uxtb	r2, r2
 80008aa:	440b      	add	r3, r1
 80008ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008b0:	e00a      	b.n	80008c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4908      	ldr	r1, [pc, #32]	@ (80008d8 <__NVIC_SetPriority+0x50>)
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	f003 030f 	and.w	r3, r3, #15
 80008be:	3b04      	subs	r3, #4
 80008c0:	0112      	lsls	r2, r2, #4
 80008c2:	b2d2      	uxtb	r2, r2
 80008c4:	440b      	add	r3, r1
 80008c6:	761a      	strb	r2, [r3, #24]
}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	e000e100 	.word	0xe000e100
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008dc:	b480      	push	{r7}
 80008de:	b089      	sub	sp, #36	@ 0x24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	f003 0307 	and.w	r3, r3, #7
 80008ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	f1c3 0307 	rsb	r3, r3, #7
 80008f6:	2b04      	cmp	r3, #4
 80008f8:	bf28      	it	cs
 80008fa:	2304      	movcs	r3, #4
 80008fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	3304      	adds	r3, #4
 8000902:	2b06      	cmp	r3, #6
 8000904:	d902      	bls.n	800090c <NVIC_EncodePriority+0x30>
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	3b03      	subs	r3, #3
 800090a:	e000      	b.n	800090e <NVIC_EncodePriority+0x32>
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000910:	f04f 32ff 	mov.w	r2, #4294967295
 8000914:	69bb      	ldr	r3, [r7, #24]
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	43da      	mvns	r2, r3
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	401a      	ands	r2, r3
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000924:	f04f 31ff 	mov.w	r1, #4294967295
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	fa01 f303 	lsl.w	r3, r1, r3
 800092e:	43d9      	mvns	r1, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000934:	4313      	orrs	r3, r2
         );
}
 8000936:	4618      	mov	r0, r3
 8000938:	3724      	adds	r7, #36	@ 0x24
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
	...

08000944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3b01      	subs	r3, #1
 8000950:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000954:	d301      	bcc.n	800095a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000956:	2301      	movs	r3, #1
 8000958:	e00f      	b.n	800097a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800095a:	4a0a      	ldr	r2, [pc, #40]	@ (8000984 <SysTick_Config+0x40>)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3b01      	subs	r3, #1
 8000960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000962:	210f      	movs	r1, #15
 8000964:	f04f 30ff 	mov.w	r0, #4294967295
 8000968:	f7ff ff8e 	bl	8000888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800096c:	4b05      	ldr	r3, [pc, #20]	@ (8000984 <SysTick_Config+0x40>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000972:	4b04      	ldr	r3, [pc, #16]	@ (8000984 <SysTick_Config+0x40>)
 8000974:	2207      	movs	r2, #7
 8000976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	e000e010 	.word	0xe000e010

08000988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f7ff ff47 	bl	8000824 <__NVIC_SetPriorityGrouping>
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b086      	sub	sp, #24
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	4603      	mov	r3, r0
 80009a6:	60b9      	str	r1, [r7, #8]
 80009a8:	607a      	str	r2, [r7, #4]
 80009aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009b0:	f7ff ff5c 	bl	800086c <__NVIC_GetPriorityGrouping>
 80009b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	68b9      	ldr	r1, [r7, #8]
 80009ba:	6978      	ldr	r0, [r7, #20]
 80009bc:	f7ff ff8e 	bl	80008dc <NVIC_EncodePriority>
 80009c0:	4602      	mov	r2, r0
 80009c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009c6:	4611      	mov	r1, r2
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ff5d 	bl	8000888 <__NVIC_SetPriority>
}
 80009ce:	bf00      	nop
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f7ff ffb0 	bl	8000944 <SysTick_Config>
 80009e4:	4603      	mov	r3, r0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b087      	sub	sp, #28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009fe:	e17f      	b.n	8000d00 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	2101      	movs	r1, #1
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	f000 8171 	beq.w	8000cfa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f003 0303 	and.w	r3, r3, #3
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d005      	beq.n	8000a30 <HAL_GPIO_Init+0x40>
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f003 0303 	and.w	r3, r3, #3
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d130      	bne.n	8000a92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4013      	ands	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	68da      	ldr	r2, [r3, #12]
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a66:	2201      	movs	r2, #1
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4013      	ands	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	091b      	lsrs	r3, r3, #4
 8000a7c:	f003 0201 	and.w	r2, r3, #1
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f003 0303 	and.w	r3, r3, #3
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	d118      	bne.n	8000ad0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	43db      	mvns	r3, r3
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	08db      	lsrs	r3, r3, #3
 8000aba:	f003 0201 	and.w	r2, r3, #1
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f003 0303 	and.w	r3, r3, #3
 8000ad8:	2b03      	cmp	r3, #3
 8000ada:	d017      	beq.n	8000b0c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	2203      	movs	r2, #3
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	43db      	mvns	r3, r3
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	689a      	ldr	r2, [r3, #8]
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f003 0303 	and.w	r3, r3, #3
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d123      	bne.n	8000b60 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	08da      	lsrs	r2, r3, #3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3208      	adds	r2, #8
 8000b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b24:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	f003 0307 	and.w	r3, r3, #7
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	220f      	movs	r2, #15
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	43db      	mvns	r3, r3
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	691a      	ldr	r2, [r3, #16]
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	08da      	lsrs	r2, r3, #3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	3208      	adds	r2, #8
 8000b5a:	6939      	ldr	r1, [r7, #16]
 8000b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	2203      	movs	r2, #3
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	43db      	mvns	r3, r3
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	4013      	ands	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f003 0203 	and.w	r2, r3, #3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f000 80ac 	beq.w	8000cfa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba2:	4b5f      	ldr	r3, [pc, #380]	@ (8000d20 <HAL_GPIO_Init+0x330>)
 8000ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ba6:	4a5e      	ldr	r2, [pc, #376]	@ (8000d20 <HAL_GPIO_Init+0x330>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bae:	4b5c      	ldr	r3, [pc, #368]	@ (8000d20 <HAL_GPIO_Init+0x330>)
 8000bb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bba:	4a5a      	ldr	r2, [pc, #360]	@ (8000d24 <HAL_GPIO_Init+0x334>)
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	089b      	lsrs	r3, r3, #2
 8000bc0:	3302      	adds	r3, #2
 8000bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	f003 0303 	and.w	r3, r3, #3
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	220f      	movs	r2, #15
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000be4:	d025      	beq.n	8000c32 <HAL_GPIO_Init+0x242>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a4f      	ldr	r2, [pc, #316]	@ (8000d28 <HAL_GPIO_Init+0x338>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d01f      	beq.n	8000c2e <HAL_GPIO_Init+0x23e>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a4e      	ldr	r2, [pc, #312]	@ (8000d2c <HAL_GPIO_Init+0x33c>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d019      	beq.n	8000c2a <HAL_GPIO_Init+0x23a>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a4d      	ldr	r2, [pc, #308]	@ (8000d30 <HAL_GPIO_Init+0x340>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d013      	beq.n	8000c26 <HAL_GPIO_Init+0x236>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a4c      	ldr	r2, [pc, #304]	@ (8000d34 <HAL_GPIO_Init+0x344>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d00d      	beq.n	8000c22 <HAL_GPIO_Init+0x232>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a4b      	ldr	r2, [pc, #300]	@ (8000d38 <HAL_GPIO_Init+0x348>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d007      	beq.n	8000c1e <HAL_GPIO_Init+0x22e>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a4a      	ldr	r2, [pc, #296]	@ (8000d3c <HAL_GPIO_Init+0x34c>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d101      	bne.n	8000c1a <HAL_GPIO_Init+0x22a>
 8000c16:	2306      	movs	r3, #6
 8000c18:	e00c      	b.n	8000c34 <HAL_GPIO_Init+0x244>
 8000c1a:	2307      	movs	r3, #7
 8000c1c:	e00a      	b.n	8000c34 <HAL_GPIO_Init+0x244>
 8000c1e:	2305      	movs	r3, #5
 8000c20:	e008      	b.n	8000c34 <HAL_GPIO_Init+0x244>
 8000c22:	2304      	movs	r3, #4
 8000c24:	e006      	b.n	8000c34 <HAL_GPIO_Init+0x244>
 8000c26:	2303      	movs	r3, #3
 8000c28:	e004      	b.n	8000c34 <HAL_GPIO_Init+0x244>
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	e002      	b.n	8000c34 <HAL_GPIO_Init+0x244>
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e000      	b.n	8000c34 <HAL_GPIO_Init+0x244>
 8000c32:	2300      	movs	r3, #0
 8000c34:	697a      	ldr	r2, [r7, #20]
 8000c36:	f002 0203 	and.w	r2, r2, #3
 8000c3a:	0092      	lsls	r2, r2, #2
 8000c3c:	4093      	lsls	r3, r2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c44:	4937      	ldr	r1, [pc, #220]	@ (8000d24 <HAL_GPIO_Init+0x334>)
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	089b      	lsrs	r3, r3, #2
 8000c4a:	3302      	adds	r3, #2
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c52:	4b3b      	ldr	r3, [pc, #236]	@ (8000d40 <HAL_GPIO_Init+0x350>)
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c76:	4a32      	ldr	r2, [pc, #200]	@ (8000d40 <HAL_GPIO_Init+0x350>)
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c7c:	4b30      	ldr	r3, [pc, #192]	@ (8000d40 <HAL_GPIO_Init+0x350>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	43db      	mvns	r3, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d003      	beq.n	8000ca0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ca0:	4a27      	ldr	r2, [pc, #156]	@ (8000d40 <HAL_GPIO_Init+0x350>)
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ca6:	4b26      	ldr	r3, [pc, #152]	@ (8000d40 <HAL_GPIO_Init+0x350>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d003      	beq.n	8000cca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cca:	4a1d      	ldr	r2, [pc, #116]	@ (8000d40 <HAL_GPIO_Init+0x350>)
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d40 <HAL_GPIO_Init+0x350>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d003      	beq.n	8000cf4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cf4:	4a12      	ldr	r2, [pc, #72]	@ (8000d40 <HAL_GPIO_Init+0x350>)
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa22 f303 	lsr.w	r3, r2, r3
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f47f ae78 	bne.w	8000a00 <HAL_GPIO_Init+0x10>
  }
}
 8000d10:	bf00      	nop
 8000d12:	bf00      	nop
 8000d14:	371c      	adds	r7, #28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40010000 	.word	0x40010000
 8000d28:	48000400 	.word	0x48000400
 8000d2c:	48000800 	.word	0x48000800
 8000d30:	48000c00 	.word	0x48000c00
 8000d34:	48001000 	.word	0x48001000
 8000d38:	48001400 	.word	0x48001400
 8000d3c:	48001800 	.word	0x48001800
 8000d40:	40010400 	.word	0x40010400

08000d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	807b      	strh	r3, [r7, #2]
 8000d50:	4613      	mov	r3, r2
 8000d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d54:	787b      	ldrb	r3, [r7, #1]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d003      	beq.n	8000d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d5a:	887a      	ldrh	r2, [r7, #2]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d60:	e002      	b.n	8000d68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d62:	887a      	ldrh	r2, [r7, #2]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d78:	4b05      	ldr	r3, [pc, #20]	@ (8000d90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a04      	ldr	r2, [pc, #16]	@ (8000d90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000d7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d82:	6013      	str	r3, [r2, #0]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40007000 	.word	0x40007000

08000d94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d98:	4b04      	ldr	r3, [pc, #16]	@ (8000dac <HAL_PWREx_GetVoltageRange+0x18>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	40007000 	.word	0x40007000

08000db0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000dbe:	d130      	bne.n	8000e22 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dc0:	4b23      	ldr	r3, [pc, #140]	@ (8000e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000dc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000dcc:	d038      	beq.n	8000e40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dce:	4b20      	ldr	r3, [pc, #128]	@ (8000e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8000e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dd8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ddc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000dde:	4b1d      	ldr	r3, [pc, #116]	@ (8000e54 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2232      	movs	r2, #50	@ 0x32
 8000de4:	fb02 f303 	mul.w	r3, r2, r3
 8000de8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e58 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000dea:	fba2 2303 	umull	r2, r3, r2, r3
 8000dee:	0c9b      	lsrs	r3, r3, #18
 8000df0:	3301      	adds	r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000df4:	e002      	b.n	8000dfc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	3b01      	subs	r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dfc:	4b14      	ldr	r3, [pc, #80]	@ (8000e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e08:	d102      	bne.n	8000e10 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1f2      	bne.n	8000df6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e10:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e12:	695b      	ldr	r3, [r3, #20]
 8000e14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e1c:	d110      	bne.n	8000e40 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e00f      	b.n	8000e42 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e22:	4b0b      	ldr	r3, [pc, #44]	@ (8000e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000e2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e2e:	d007      	beq.n	8000e40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e30:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e38:	4a05      	ldr	r2, [pc, #20]	@ (8000e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e3e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	40007000 	.word	0x40007000
 8000e54:	20000000 	.word	0x20000000
 8000e58:	431bde83 	.word	0x431bde83

08000e5c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d101      	bne.n	8000e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e3ca      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e6e:	4b97      	ldr	r3, [pc, #604]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f003 030c 	and.w	r3, r3, #12
 8000e76:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e78:	4b94      	ldr	r3, [pc, #592]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0310 	and.w	r3, r3, #16
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 80e4 	beq.w	8001058 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d007      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x4a>
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	2b0c      	cmp	r3, #12
 8000e9a:	f040 808b 	bne.w	8000fb4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	f040 8087 	bne.w	8000fb4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ea6:	4b89      	ldr	r3, [pc, #548]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d005      	beq.n	8000ebe <HAL_RCC_OscConfig+0x62>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d101      	bne.n	8000ebe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e3a2      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6a1a      	ldr	r2, [r3, #32]
 8000ec2:	4b82      	ldr	r3, [pc, #520]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0308 	and.w	r3, r3, #8
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d004      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x7c>
 8000ece:	4b7f      	ldr	r3, [pc, #508]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000ed6:	e005      	b.n	8000ee4 <HAL_RCC_OscConfig+0x88>
 8000ed8:	4b7c      	ldr	r3, [pc, #496]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 8000eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ede:	091b      	lsrs	r3, r3, #4
 8000ee0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d223      	bcs.n	8000f30 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 fd1d 	bl	800192c <RCC_SetFlashLatencyFromMSIRange>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e383      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000efc:	4b73      	ldr	r3, [pc, #460]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a72      	ldr	r2, [pc, #456]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 8000f02:	f043 0308 	orr.w	r3, r3, #8
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	4b70      	ldr	r3, [pc, #448]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a1b      	ldr	r3, [r3, #32]
 8000f14:	496d      	ldr	r1, [pc, #436]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 8000f16:	4313      	orrs	r3, r2
 8000f18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f1a:	4b6c      	ldr	r3, [pc, #432]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	021b      	lsls	r3, r3, #8
 8000f28:	4968      	ldr	r1, [pc, #416]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	604b      	str	r3, [r1, #4]
 8000f2e:	e025      	b.n	8000f7c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f30:	4b66      	ldr	r3, [pc, #408]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a65      	ldr	r2, [pc, #404]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 8000f36:	f043 0308 	orr.w	r3, r3, #8
 8000f3a:	6013      	str	r3, [r2, #0]
 8000f3c:	4b63      	ldr	r3, [pc, #396]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6a1b      	ldr	r3, [r3, #32]
 8000f48:	4960      	ldr	r1, [pc, #384]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f4e:	4b5f      	ldr	r3, [pc, #380]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	495b      	ldr	r1, [pc, #364]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d109      	bne.n	8000f7c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a1b      	ldr	r3, [r3, #32]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 fcdd 	bl	800192c <RCC_SetFlashLatencyFromMSIRange>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e343      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f7c:	f000 fc4a 	bl	8001814 <HAL_RCC_GetSysClockFreq>
 8000f80:	4602      	mov	r2, r0
 8000f82:	4b52      	ldr	r3, [pc, #328]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	091b      	lsrs	r3, r3, #4
 8000f88:	f003 030f 	and.w	r3, r3, #15
 8000f8c:	4950      	ldr	r1, [pc, #320]	@ (80010d0 <HAL_RCC_OscConfig+0x274>)
 8000f8e:	5ccb      	ldrb	r3, [r1, r3]
 8000f90:	f003 031f 	and.w	r3, r3, #31
 8000f94:	fa22 f303 	lsr.w	r3, r2, r3
 8000f98:	4a4e      	ldr	r2, [pc, #312]	@ (80010d4 <HAL_RCC_OscConfig+0x278>)
 8000f9a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f9c:	4b4e      	ldr	r3, [pc, #312]	@ (80010d8 <HAL_RCC_OscConfig+0x27c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fbbf 	bl	8000724 <HAL_InitTick>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d052      	beq.n	8001056 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	e327      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d032      	beq.n	8001022 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000fbc:	4b43      	ldr	r3, [pc, #268]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a42      	ldr	r2, [pc, #264]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fc8:	f7ff fbfc 	bl	80007c4 <HAL_GetTick>
 8000fcc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fd0:	f7ff fbf8 	bl	80007c4 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e310      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fe2:	4b3a      	ldr	r3, [pc, #232]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0f0      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fee:	4b37      	ldr	r3, [pc, #220]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a36      	ldr	r2, [pc, #216]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 8000ff4:	f043 0308 	orr.w	r3, r3, #8
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	4b34      	ldr	r3, [pc, #208]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	4931      	ldr	r1, [pc, #196]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 8001008:	4313      	orrs	r3, r2
 800100a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800100c:	4b2f      	ldr	r3, [pc, #188]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	69db      	ldr	r3, [r3, #28]
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	492c      	ldr	r1, [pc, #176]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 800101c:	4313      	orrs	r3, r2
 800101e:	604b      	str	r3, [r1, #4]
 8001020:	e01a      	b.n	8001058 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001022:	4b2a      	ldr	r3, [pc, #168]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a29      	ldr	r2, [pc, #164]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 8001028:	f023 0301 	bic.w	r3, r3, #1
 800102c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800102e:	f7ff fbc9 	bl	80007c4 <HAL_GetTick>
 8001032:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001034:	e008      	b.n	8001048 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001036:	f7ff fbc5 	bl	80007c4 <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e2dd      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001048:	4b20      	ldr	r3, [pc, #128]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1f0      	bne.n	8001036 <HAL_RCC_OscConfig+0x1da>
 8001054:	e000      	b.n	8001058 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001056:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b00      	cmp	r3, #0
 8001062:	d074      	beq.n	800114e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	2b08      	cmp	r3, #8
 8001068:	d005      	beq.n	8001076 <HAL_RCC_OscConfig+0x21a>
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	2b0c      	cmp	r3, #12
 800106e:	d10e      	bne.n	800108e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	2b03      	cmp	r3, #3
 8001074:	d10b      	bne.n	800108e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001076:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d064      	beq.n	800114c <HAL_RCC_OscConfig+0x2f0>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d160      	bne.n	800114c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e2ba      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001096:	d106      	bne.n	80010a6 <HAL_RCC_OscConfig+0x24a>
 8001098:	4b0c      	ldr	r3, [pc, #48]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0b      	ldr	r2, [pc, #44]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 800109e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	e026      	b.n	80010f4 <HAL_RCC_OscConfig+0x298>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010ae:	d115      	bne.n	80010dc <HAL_RCC_OscConfig+0x280>
 80010b0:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a05      	ldr	r2, [pc, #20]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 80010b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	4b03      	ldr	r3, [pc, #12]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a02      	ldr	r2, [pc, #8]	@ (80010cc <HAL_RCC_OscConfig+0x270>)
 80010c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	e014      	b.n	80010f4 <HAL_RCC_OscConfig+0x298>
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000
 80010d0:	08002210 	.word	0x08002210
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000004 	.word	0x20000004
 80010dc:	4ba0      	ldr	r3, [pc, #640]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a9f      	ldr	r2, [pc, #636]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 80010e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	4b9d      	ldr	r3, [pc, #628]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a9c      	ldr	r2, [pc, #624]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 80010ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d013      	beq.n	8001124 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010fc:	f7ff fb62 	bl	80007c4 <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001104:	f7ff fb5e 	bl	80007c4 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b64      	cmp	r3, #100	@ 0x64
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e276      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001116:	4b92      	ldr	r3, [pc, #584]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0f0      	beq.n	8001104 <HAL_RCC_OscConfig+0x2a8>
 8001122:	e014      	b.n	800114e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001124:	f7ff fb4e 	bl	80007c4 <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800112c:	f7ff fb4a 	bl	80007c4 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b64      	cmp	r3, #100	@ 0x64
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e262      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800113e:	4b88      	ldr	r3, [pc, #544]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f0      	bne.n	800112c <HAL_RCC_OscConfig+0x2d0>
 800114a:	e000      	b.n	800114e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800114c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d060      	beq.n	800121c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	2b04      	cmp	r3, #4
 800115e:	d005      	beq.n	800116c <HAL_RCC_OscConfig+0x310>
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	2b0c      	cmp	r3, #12
 8001164:	d119      	bne.n	800119a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	2b02      	cmp	r3, #2
 800116a:	d116      	bne.n	800119a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800116c:	4b7c      	ldr	r3, [pc, #496]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001174:	2b00      	cmp	r3, #0
 8001176:	d005      	beq.n	8001184 <HAL_RCC_OscConfig+0x328>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d101      	bne.n	8001184 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e23f      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001184:	4b76      	ldr	r3, [pc, #472]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	061b      	lsls	r3, r3, #24
 8001192:	4973      	ldr	r1, [pc, #460]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 8001194:	4313      	orrs	r3, r2
 8001196:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001198:	e040      	b.n	800121c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d023      	beq.n	80011ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011a2:	4b6f      	ldr	r3, [pc, #444]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a6e      	ldr	r2, [pc, #440]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 80011a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ae:	f7ff fb09 	bl	80007c4 <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011b6:	f7ff fb05 	bl	80007c4 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e21d      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011c8:	4b65      	ldr	r3, [pc, #404]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f0      	beq.n	80011b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d4:	4b62      	ldr	r3, [pc, #392]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	061b      	lsls	r3, r3, #24
 80011e2:	495f      	ldr	r1, [pc, #380]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	604b      	str	r3, [r1, #4]
 80011e8:	e018      	b.n	800121c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a5c      	ldr	r2, [pc, #368]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 80011f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80011f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f6:	f7ff fae5 	bl	80007c4 <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011fe:	f7ff fae1 	bl	80007c4 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e1f9      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001210:	4b53      	ldr	r3, [pc, #332]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1f0      	bne.n	80011fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0308 	and.w	r3, r3, #8
 8001224:	2b00      	cmp	r3, #0
 8001226:	d03c      	beq.n	80012a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d01c      	beq.n	800126a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001230:	4b4b      	ldr	r3, [pc, #300]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 8001232:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001236:	4a4a      	ldr	r2, [pc, #296]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001240:	f7ff fac0 	bl	80007c4 <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001248:	f7ff fabc 	bl	80007c4 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e1d4      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800125a:	4b41      	ldr	r3, [pc, #260]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 800125c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0ef      	beq.n	8001248 <HAL_RCC_OscConfig+0x3ec>
 8001268:	e01b      	b.n	80012a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800126a:	4b3d      	ldr	r3, [pc, #244]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 800126c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001270:	4a3b      	ldr	r2, [pc, #236]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 8001272:	f023 0301 	bic.w	r3, r3, #1
 8001276:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800127a:	f7ff faa3 	bl	80007c4 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001282:	f7ff fa9f 	bl	80007c4 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e1b7      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001294:	4b32      	ldr	r3, [pc, #200]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 8001296:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1ef      	bne.n	8001282 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 80a6 	beq.w	80013fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012b0:	2300      	movs	r3, #0
 80012b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80012b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 80012b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d10d      	bne.n	80012dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c0:	4b27      	ldr	r3, [pc, #156]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 80012c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c4:	4a26      	ldr	r2, [pc, #152]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 80012c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80012cc:	4b24      	ldr	r3, [pc, #144]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 80012ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012d8:	2301      	movs	r3, #1
 80012da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012dc:	4b21      	ldr	r3, [pc, #132]	@ (8001364 <HAL_RCC_OscConfig+0x508>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d118      	bne.n	800131a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001364 <HAL_RCC_OscConfig+0x508>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001364 <HAL_RCC_OscConfig+0x508>)
 80012ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012f4:	f7ff fa66 	bl	80007c4 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012fc:	f7ff fa62 	bl	80007c4 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e17a      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800130e:	4b15      	ldr	r3, [pc, #84]	@ (8001364 <HAL_RCC_OscConfig+0x508>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d108      	bne.n	8001334 <HAL_RCC_OscConfig+0x4d8>
 8001322:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 8001324:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001328:	4a0d      	ldr	r2, [pc, #52]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001332:	e029      	b.n	8001388 <HAL_RCC_OscConfig+0x52c>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	2b05      	cmp	r3, #5
 800133a:	d115      	bne.n	8001368 <HAL_RCC_OscConfig+0x50c>
 800133c:	4b08      	ldr	r3, [pc, #32]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 800133e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001342:	4a07      	ldr	r2, [pc, #28]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 8001344:	f043 0304 	orr.w	r3, r3, #4
 8001348:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800134c:	4b04      	ldr	r3, [pc, #16]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 800134e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001352:	4a03      	ldr	r2, [pc, #12]	@ (8001360 <HAL_RCC_OscConfig+0x504>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800135c:	e014      	b.n	8001388 <HAL_RCC_OscConfig+0x52c>
 800135e:	bf00      	nop
 8001360:	40021000 	.word	0x40021000
 8001364:	40007000 	.word	0x40007000
 8001368:	4b9c      	ldr	r3, [pc, #624]	@ (80015dc <HAL_RCC_OscConfig+0x780>)
 800136a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800136e:	4a9b      	ldr	r2, [pc, #620]	@ (80015dc <HAL_RCC_OscConfig+0x780>)
 8001370:	f023 0301 	bic.w	r3, r3, #1
 8001374:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001378:	4b98      	ldr	r3, [pc, #608]	@ (80015dc <HAL_RCC_OscConfig+0x780>)
 800137a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800137e:	4a97      	ldr	r2, [pc, #604]	@ (80015dc <HAL_RCC_OscConfig+0x780>)
 8001380:	f023 0304 	bic.w	r3, r3, #4
 8001384:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d016      	beq.n	80013be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001390:	f7ff fa18 	bl	80007c4 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001396:	e00a      	b.n	80013ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001398:	f7ff fa14 	bl	80007c4 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e12a      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013ae:	4b8b      	ldr	r3, [pc, #556]	@ (80015dc <HAL_RCC_OscConfig+0x780>)
 80013b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0ed      	beq.n	8001398 <HAL_RCC_OscConfig+0x53c>
 80013bc:	e015      	b.n	80013ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013be:	f7ff fa01 	bl	80007c4 <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013c4:	e00a      	b.n	80013dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c6:	f7ff f9fd 	bl	80007c4 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e113      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013dc:	4b7f      	ldr	r3, [pc, #508]	@ (80015dc <HAL_RCC_OscConfig+0x780>)
 80013de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1ed      	bne.n	80013c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013ea:	7ffb      	ldrb	r3, [r7, #31]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d105      	bne.n	80013fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f0:	4b7a      	ldr	r3, [pc, #488]	@ (80015dc <HAL_RCC_OscConfig+0x780>)
 80013f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f4:	4a79      	ldr	r2, [pc, #484]	@ (80015dc <HAL_RCC_OscConfig+0x780>)
 80013f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013fa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 80fe 	beq.w	8001602 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800140a:	2b02      	cmp	r3, #2
 800140c:	f040 80d0 	bne.w	80015b0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001410:	4b72      	ldr	r3, [pc, #456]	@ (80015dc <HAL_RCC_OscConfig+0x780>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f003 0203 	and.w	r2, r3, #3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001420:	429a      	cmp	r2, r3
 8001422:	d130      	bne.n	8001486 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	3b01      	subs	r3, #1
 8001430:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001432:	429a      	cmp	r2, r3
 8001434:	d127      	bne.n	8001486 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001440:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001442:	429a      	cmp	r2, r3
 8001444:	d11f      	bne.n	8001486 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001450:	2a07      	cmp	r2, #7
 8001452:	bf14      	ite	ne
 8001454:	2201      	movne	r2, #1
 8001456:	2200      	moveq	r2, #0
 8001458:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800145a:	4293      	cmp	r3, r2
 800145c:	d113      	bne.n	8001486 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001468:	085b      	lsrs	r3, r3, #1
 800146a:	3b01      	subs	r3, #1
 800146c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800146e:	429a      	cmp	r2, r3
 8001470:	d109      	bne.n	8001486 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147c:	085b      	lsrs	r3, r3, #1
 800147e:	3b01      	subs	r3, #1
 8001480:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001482:	429a      	cmp	r2, r3
 8001484:	d06e      	beq.n	8001564 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	2b0c      	cmp	r3, #12
 800148a:	d069      	beq.n	8001560 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800148c:	4b53      	ldr	r3, [pc, #332]	@ (80015dc <HAL_RCC_OscConfig+0x780>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d105      	bne.n	80014a4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001498:	4b50      	ldr	r3, [pc, #320]	@ (80015dc <HAL_RCC_OscConfig+0x780>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e0ad      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80014a8:	4b4c      	ldr	r3, [pc, #304]	@ (80015dc <HAL_RCC_OscConfig+0x780>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a4b      	ldr	r2, [pc, #300]	@ (80015dc <HAL_RCC_OscConfig+0x780>)
 80014ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80014b2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014b4:	f7ff f986 	bl	80007c4 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014bc:	f7ff f982 	bl	80007c4 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e09a      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ce:	4b43      	ldr	r3, [pc, #268]	@ (80015dc <HAL_RCC_OscConfig+0x780>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014da:	4b40      	ldr	r3, [pc, #256]	@ (80015dc <HAL_RCC_OscConfig+0x780>)
 80014dc:	68da      	ldr	r2, [r3, #12]
 80014de:	4b40      	ldr	r3, [pc, #256]	@ (80015e0 <HAL_RCC_OscConfig+0x784>)
 80014e0:	4013      	ands	r3, r2
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80014ea:	3a01      	subs	r2, #1
 80014ec:	0112      	lsls	r2, r2, #4
 80014ee:	4311      	orrs	r1, r2
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80014f4:	0212      	lsls	r2, r2, #8
 80014f6:	4311      	orrs	r1, r2
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80014fc:	0852      	lsrs	r2, r2, #1
 80014fe:	3a01      	subs	r2, #1
 8001500:	0552      	lsls	r2, r2, #21
 8001502:	4311      	orrs	r1, r2
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001508:	0852      	lsrs	r2, r2, #1
 800150a:	3a01      	subs	r2, #1
 800150c:	0652      	lsls	r2, r2, #25
 800150e:	4311      	orrs	r1, r2
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001514:	0912      	lsrs	r2, r2, #4
 8001516:	0452      	lsls	r2, r2, #17
 8001518:	430a      	orrs	r2, r1
 800151a:	4930      	ldr	r1, [pc, #192]	@ (80015dc <HAL_RCC_OscConfig+0x780>)
 800151c:	4313      	orrs	r3, r2
 800151e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001520:	4b2e      	ldr	r3, [pc, #184]	@ (80015dc <HAL_RCC_OscConfig+0x780>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a2d      	ldr	r2, [pc, #180]	@ (80015dc <HAL_RCC_OscConfig+0x780>)
 8001526:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800152a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800152c:	4b2b      	ldr	r3, [pc, #172]	@ (80015dc <HAL_RCC_OscConfig+0x780>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	4a2a      	ldr	r2, [pc, #168]	@ (80015dc <HAL_RCC_OscConfig+0x780>)
 8001532:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001536:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001538:	f7ff f944 	bl	80007c4 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001540:	f7ff f940 	bl	80007c4 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e058      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001552:	4b22      	ldr	r3, [pc, #136]	@ (80015dc <HAL_RCC_OscConfig+0x780>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f0      	beq.n	8001540 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800155e:	e050      	b.n	8001602 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e04f      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001564:	4b1d      	ldr	r3, [pc, #116]	@ (80015dc <HAL_RCC_OscConfig+0x780>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d148      	bne.n	8001602 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001570:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <HAL_RCC_OscConfig+0x780>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a19      	ldr	r2, [pc, #100]	@ (80015dc <HAL_RCC_OscConfig+0x780>)
 8001576:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800157a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800157c:	4b17      	ldr	r3, [pc, #92]	@ (80015dc <HAL_RCC_OscConfig+0x780>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	4a16      	ldr	r2, [pc, #88]	@ (80015dc <HAL_RCC_OscConfig+0x780>)
 8001582:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001586:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001588:	f7ff f91c 	bl	80007c4 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001590:	f7ff f918 	bl	80007c4 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e030      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015a2:	4b0e      	ldr	r3, [pc, #56]	@ (80015dc <HAL_RCC_OscConfig+0x780>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0x734>
 80015ae:	e028      	b.n	8001602 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	2b0c      	cmp	r3, #12
 80015b4:	d023      	beq.n	80015fe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b6:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <HAL_RCC_OscConfig+0x780>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a08      	ldr	r2, [pc, #32]	@ (80015dc <HAL_RCC_OscConfig+0x780>)
 80015bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80015c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c2:	f7ff f8ff 	bl	80007c4 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015c8:	e00c      	b.n	80015e4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ca:	f7ff f8fb 	bl	80007c4 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d905      	bls.n	80015e4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e013      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
 80015dc:	40021000 	.word	0x40021000
 80015e0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e4:	4b09      	ldr	r3, [pc, #36]	@ (800160c <HAL_RCC_OscConfig+0x7b0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1ec      	bne.n	80015ca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80015f0:	4b06      	ldr	r3, [pc, #24]	@ (800160c <HAL_RCC_OscConfig+0x7b0>)
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	4905      	ldr	r1, [pc, #20]	@ (800160c <HAL_RCC_OscConfig+0x7b0>)
 80015f6:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <HAL_RCC_OscConfig+0x7b4>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	60cb      	str	r3, [r1, #12]
 80015fc:	e001      	b.n	8001602 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3720      	adds	r7, #32
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40021000 	.word	0x40021000
 8001610:	feeefffc 	.word	0xfeeefffc

08001614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0e7      	b.n	80017f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001628:	4b75      	ldr	r3, [pc, #468]	@ (8001800 <HAL_RCC_ClockConfig+0x1ec>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d910      	bls.n	8001658 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001636:	4b72      	ldr	r3, [pc, #456]	@ (8001800 <HAL_RCC_ClockConfig+0x1ec>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f023 0207 	bic.w	r2, r3, #7
 800163e:	4970      	ldr	r1, [pc, #448]	@ (8001800 <HAL_RCC_ClockConfig+0x1ec>)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	4313      	orrs	r3, r2
 8001644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001646:	4b6e      	ldr	r3, [pc, #440]	@ (8001800 <HAL_RCC_ClockConfig+0x1ec>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	d001      	beq.n	8001658 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e0cf      	b.n	80017f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d010      	beq.n	8001686 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	4b66      	ldr	r3, [pc, #408]	@ (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001670:	429a      	cmp	r2, r3
 8001672:	d908      	bls.n	8001686 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001674:	4b63      	ldr	r3, [pc, #396]	@ (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	4960      	ldr	r1, [pc, #384]	@ (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 8001682:	4313      	orrs	r3, r2
 8001684:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d04c      	beq.n	800172c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b03      	cmp	r3, #3
 8001698:	d107      	bne.n	80016aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800169a:	4b5a      	ldr	r3, [pc, #360]	@ (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d121      	bne.n	80016ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e0a6      	b.n	80017f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d107      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016b2:	4b54      	ldr	r3, [pc, #336]	@ (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d115      	bne.n	80016ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e09a      	b.n	80017f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d107      	bne.n	80016da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016ca:	4b4e      	ldr	r3, [pc, #312]	@ (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d109      	bne.n	80016ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e08e      	b.n	80017f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016da:	4b4a      	ldr	r3, [pc, #296]	@ (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e086      	b.n	80017f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016ea:	4b46      	ldr	r3, [pc, #280]	@ (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f023 0203 	bic.w	r2, r3, #3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	4943      	ldr	r1, [pc, #268]	@ (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016fc:	f7ff f862 	bl	80007c4 <HAL_GetTick>
 8001700:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001702:	e00a      	b.n	800171a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001704:	f7ff f85e 	bl	80007c4 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001712:	4293      	cmp	r3, r2
 8001714:	d901      	bls.n	800171a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e06e      	b.n	80017f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171a:	4b3a      	ldr	r3, [pc, #232]	@ (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 020c 	and.w	r2, r3, #12
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	429a      	cmp	r2, r3
 800172a:	d1eb      	bne.n	8001704 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d010      	beq.n	800175a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	4b31      	ldr	r3, [pc, #196]	@ (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001744:	429a      	cmp	r2, r3
 8001746:	d208      	bcs.n	800175a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001748:	4b2e      	ldr	r3, [pc, #184]	@ (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	492b      	ldr	r1, [pc, #172]	@ (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 8001756:	4313      	orrs	r3, r2
 8001758:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800175a:	4b29      	ldr	r3, [pc, #164]	@ (8001800 <HAL_RCC_ClockConfig+0x1ec>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	d210      	bcs.n	800178a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001768:	4b25      	ldr	r3, [pc, #148]	@ (8001800 <HAL_RCC_ClockConfig+0x1ec>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f023 0207 	bic.w	r2, r3, #7
 8001770:	4923      	ldr	r1, [pc, #140]	@ (8001800 <HAL_RCC_ClockConfig+0x1ec>)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	4313      	orrs	r3, r2
 8001776:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001778:	4b21      	ldr	r3, [pc, #132]	@ (8001800 <HAL_RCC_ClockConfig+0x1ec>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d001      	beq.n	800178a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e036      	b.n	80017f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	2b00      	cmp	r3, #0
 8001794:	d008      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001796:	4b1b      	ldr	r3, [pc, #108]	@ (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	4918      	ldr	r1, [pc, #96]	@ (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0308 	and.w	r3, r3, #8
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d009      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017b4:	4b13      	ldr	r3, [pc, #76]	@ (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	4910      	ldr	r1, [pc, #64]	@ (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017c8:	f000 f824 	bl	8001814 <HAL_RCC_GetSysClockFreq>
 80017cc:	4602      	mov	r2, r0
 80017ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001804 <HAL_RCC_ClockConfig+0x1f0>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	091b      	lsrs	r3, r3, #4
 80017d4:	f003 030f 	and.w	r3, r3, #15
 80017d8:	490b      	ldr	r1, [pc, #44]	@ (8001808 <HAL_RCC_ClockConfig+0x1f4>)
 80017da:	5ccb      	ldrb	r3, [r1, r3]
 80017dc:	f003 031f 	and.w	r3, r3, #31
 80017e0:	fa22 f303 	lsr.w	r3, r2, r3
 80017e4:	4a09      	ldr	r2, [pc, #36]	@ (800180c <HAL_RCC_ClockConfig+0x1f8>)
 80017e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017e8:	4b09      	ldr	r3, [pc, #36]	@ (8001810 <HAL_RCC_ClockConfig+0x1fc>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe ff99 	bl	8000724 <HAL_InitTick>
 80017f2:	4603      	mov	r3, r0
 80017f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80017f6:	7afb      	ldrb	r3, [r7, #11]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40022000 	.word	0x40022000
 8001804:	40021000 	.word	0x40021000
 8001808:	08002210 	.word	0x08002210
 800180c:	20000000 	.word	0x20000000
 8001810:	20000004 	.word	0x20000004

08001814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001814:	b480      	push	{r7}
 8001816:	b089      	sub	sp, #36	@ 0x24
 8001818:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001822:	4b3e      	ldr	r3, [pc, #248]	@ (800191c <HAL_RCC_GetSysClockFreq+0x108>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800182c:	4b3b      	ldr	r3, [pc, #236]	@ (800191c <HAL_RCC_GetSysClockFreq+0x108>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <HAL_RCC_GetSysClockFreq+0x34>
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	2b0c      	cmp	r3, #12
 8001840:	d121      	bne.n	8001886 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d11e      	bne.n	8001886 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001848:	4b34      	ldr	r3, [pc, #208]	@ (800191c <HAL_RCC_GetSysClockFreq+0x108>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	2b00      	cmp	r3, #0
 8001852:	d107      	bne.n	8001864 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001854:	4b31      	ldr	r3, [pc, #196]	@ (800191c <HAL_RCC_GetSysClockFreq+0x108>)
 8001856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800185a:	0a1b      	lsrs	r3, r3, #8
 800185c:	f003 030f 	and.w	r3, r3, #15
 8001860:	61fb      	str	r3, [r7, #28]
 8001862:	e005      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001864:	4b2d      	ldr	r3, [pc, #180]	@ (800191c <HAL_RCC_GetSysClockFreq+0x108>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	091b      	lsrs	r3, r3, #4
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001870:	4a2b      	ldr	r2, [pc, #172]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001878:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10d      	bne.n	800189c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001884:	e00a      	b.n	800189c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	2b04      	cmp	r3, #4
 800188a:	d102      	bne.n	8001892 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800188c:	4b25      	ldr	r3, [pc, #148]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x110>)
 800188e:	61bb      	str	r3, [r7, #24]
 8001890:	e004      	b.n	800189c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	2b08      	cmp	r3, #8
 8001896:	d101      	bne.n	800189c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001898:	4b23      	ldr	r3, [pc, #140]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x114>)
 800189a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	2b0c      	cmp	r3, #12
 80018a0:	d134      	bne.n	800190c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018a2:	4b1e      	ldr	r3, [pc, #120]	@ (800191c <HAL_RCC_GetSysClockFreq+0x108>)
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d003      	beq.n	80018ba <HAL_RCC_GetSysClockFreq+0xa6>
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	d003      	beq.n	80018c0 <HAL_RCC_GetSysClockFreq+0xac>
 80018b8:	e005      	b.n	80018c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80018ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x110>)
 80018bc:	617b      	str	r3, [r7, #20]
      break;
 80018be:	e005      	b.n	80018cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80018c0:	4b19      	ldr	r3, [pc, #100]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x114>)
 80018c2:	617b      	str	r3, [r7, #20]
      break;
 80018c4:	e002      	b.n	80018cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	617b      	str	r3, [r7, #20]
      break;
 80018ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018cc:	4b13      	ldr	r3, [pc, #76]	@ (800191c <HAL_RCC_GetSysClockFreq+0x108>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	091b      	lsrs	r3, r3, #4
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	3301      	adds	r3, #1
 80018d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80018da:	4b10      	ldr	r3, [pc, #64]	@ (800191c <HAL_RCC_GetSysClockFreq+0x108>)
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	0a1b      	lsrs	r3, r3, #8
 80018e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	fb03 f202 	mul.w	r2, r3, r2
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018f2:	4b0a      	ldr	r3, [pc, #40]	@ (800191c <HAL_RCC_GetSysClockFreq+0x108>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	0e5b      	lsrs	r3, r3, #25
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	3301      	adds	r3, #1
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	fbb2 f3f3 	udiv	r3, r2, r3
 800190a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800190c:	69bb      	ldr	r3, [r7, #24]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3724      	adds	r7, #36	@ 0x24
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000
 8001920:	08002220 	.word	0x08002220
 8001924:	00f42400 	.word	0x00f42400
 8001928:	007a1200 	.word	0x007a1200

0800192c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001934:	2300      	movs	r3, #0
 8001936:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001938:	4b2a      	ldr	r3, [pc, #168]	@ (80019e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800193a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800193c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001944:	f7ff fa26 	bl	8000d94 <HAL_PWREx_GetVoltageRange>
 8001948:	6178      	str	r0, [r7, #20]
 800194a:	e014      	b.n	8001976 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800194c:	4b25      	ldr	r3, [pc, #148]	@ (80019e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800194e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001950:	4a24      	ldr	r2, [pc, #144]	@ (80019e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001952:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001956:	6593      	str	r3, [r2, #88]	@ 0x58
 8001958:	4b22      	ldr	r3, [pc, #136]	@ (80019e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800195a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001964:	f7ff fa16 	bl	8000d94 <HAL_PWREx_GetVoltageRange>
 8001968:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800196a:	4b1e      	ldr	r3, [pc, #120]	@ (80019e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800196c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800196e:	4a1d      	ldr	r2, [pc, #116]	@ (80019e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001970:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001974:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800197c:	d10b      	bne.n	8001996 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b80      	cmp	r3, #128	@ 0x80
 8001982:	d919      	bls.n	80019b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2ba0      	cmp	r3, #160	@ 0xa0
 8001988:	d902      	bls.n	8001990 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800198a:	2302      	movs	r3, #2
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	e013      	b.n	80019b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001990:	2301      	movs	r3, #1
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	e010      	b.n	80019b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b80      	cmp	r3, #128	@ 0x80
 800199a:	d902      	bls.n	80019a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800199c:	2303      	movs	r3, #3
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	e00a      	b.n	80019b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b80      	cmp	r3, #128	@ 0x80
 80019a6:	d102      	bne.n	80019ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019a8:	2302      	movs	r3, #2
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	e004      	b.n	80019b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b70      	cmp	r3, #112	@ 0x70
 80019b2:	d101      	bne.n	80019b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019b4:	2301      	movs	r3, #1
 80019b6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80019b8:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f023 0207 	bic.w	r2, r3, #7
 80019c0:	4909      	ldr	r1, [pc, #36]	@ (80019e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80019c8:	4b07      	ldr	r3, [pc, #28]	@ (80019e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d001      	beq.n	80019da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40022000 	.word	0x40022000

080019ec <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80019f0:	4b05      	ldr	r3, [pc, #20]	@ (8001a08 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a04      	ldr	r2, [pc, #16]	@ (8001a08 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80019f6:	f043 0304 	orr.w	r3, r3, #4
 80019fa:	6013      	str	r3, [r2, #0]
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40021000 	.word	0x40021000

08001a0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e095      	b.n	8001b4a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d108      	bne.n	8001a38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001a2e:	d009      	beq.n	8001a44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	61da      	str	r2, [r3, #28]
 8001a36:	e005      	b.n	8001a44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d106      	bne.n	8001a64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7fe fd56 	bl	8000510 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2202      	movs	r2, #2
 8001a68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a7a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001a84:	d902      	bls.n	8001a8c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	e002      	b.n	8001a92 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001a8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a90:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001a9a:	d007      	beq.n	8001aac <HAL_SPI_Init+0xa0>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001aa4:	d002      	beq.n	8001aac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aee:	ea42 0103 	orr.w	r1, r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	0c1b      	lsrs	r3, r3, #16
 8001b08:	f003 0204 	and.w	r2, r3, #4
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b10:	f003 0310 	and.w	r3, r3, #16
 8001b14:	431a      	orrs	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001b28:	ea42 0103 	orr.w	r1, r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b088      	sub	sp, #32
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	603b      	str	r3, [r7, #0]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b62:	f7fe fe2f 	bl	80007c4 <HAL_GetTick>
 8001b66:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d001      	beq.n	8001b7c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e15c      	b.n	8001e36 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d002      	beq.n	8001b88 <HAL_SPI_Transmit+0x36>
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e154      	b.n	8001e36 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <HAL_SPI_Transmit+0x48>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e14d      	b.n	8001e36 <HAL_SPI_Transmit+0x2e4>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	88fa      	ldrh	r2, [r7, #6]
 8001bba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	88fa      	ldrh	r2, [r7, #6]
 8001bc0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001bec:	d10f      	bne.n	8001c0e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001bfc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c18:	2b40      	cmp	r3, #64	@ 0x40
 8001c1a:	d007      	beq.n	8001c2c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001c34:	d952      	bls.n	8001cdc <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <HAL_SPI_Transmit+0xf2>
 8001c3e:	8b7b      	ldrh	r3, [r7, #26]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d145      	bne.n	8001cd0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c48:	881a      	ldrh	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c54:	1c9a      	adds	r2, r3, #2
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c68:	e032      	b.n	8001cd0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d112      	bne.n	8001c9e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c7c:	881a      	ldrh	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c88:	1c9a      	adds	r2, r3, #2
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	3b01      	subs	r3, #1
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001c9c:	e018      	b.n	8001cd0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c9e:	f7fe fd91 	bl	80007c4 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d803      	bhi.n	8001cb6 <HAL_SPI_Transmit+0x164>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb4:	d102      	bne.n	8001cbc <HAL_SPI_Transmit+0x16a>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d109      	bne.n	8001cd0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e0b2      	b.n	8001e36 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1c7      	bne.n	8001c6a <HAL_SPI_Transmit+0x118>
 8001cda:	e083      	b.n	8001de4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d002      	beq.n	8001cea <HAL_SPI_Transmit+0x198>
 8001ce4:	8b7b      	ldrh	r3, [r7, #26]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d177      	bne.n	8001dda <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d912      	bls.n	8001d1a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cf8:	881a      	ldrh	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d04:	1c9a      	adds	r2, r3, #2
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	3b02      	subs	r3, #2
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001d18:	e05f      	b.n	8001dda <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	330c      	adds	r3, #12
 8001d24:	7812      	ldrb	r2, [r2, #0]
 8001d26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001d40:	e04b      	b.n	8001dda <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d12b      	bne.n	8001da8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d912      	bls.n	8001d80 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d5e:	881a      	ldrh	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d6a:	1c9a      	adds	r2, r3, #2
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	3b02      	subs	r3, #2
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001d7e:	e02c      	b.n	8001dda <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	330c      	adds	r3, #12
 8001d8a:	7812      	ldrb	r2, [r2, #0]
 8001d8c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001da6:	e018      	b.n	8001dda <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001da8:	f7fe fd0c 	bl	80007c4 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d803      	bhi.n	8001dc0 <HAL_SPI_Transmit+0x26e>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dbe:	d102      	bne.n	8001dc6 <HAL_SPI_Transmit+0x274>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d109      	bne.n	8001dda <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e02d      	b.n	8001e36 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1ae      	bne.n	8001d42 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001de4:	69fa      	ldr	r2, [r7, #28]
 8001de6:	6839      	ldr	r1, [r7, #0]
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f000 f947 	bl	800207c <SPI_EndRxTxTransaction>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d002      	beq.n	8001dfa <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2220      	movs	r2, #32
 8001df8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10a      	bne.n	8001e18 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e000      	b.n	8001e36 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8001e34:	2300      	movs	r3, #0
  }
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3720      	adds	r7, #32
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	603b      	str	r3, [r7, #0]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e50:	f7fe fcb8 	bl	80007c4 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e58:	1a9b      	subs	r3, r3, r2
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e60:	f7fe fcb0 	bl	80007c4 <HAL_GetTick>
 8001e64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e66:	4b39      	ldr	r3, [pc, #228]	@ (8001f4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	015b      	lsls	r3, r3, #5
 8001e6c:	0d1b      	lsrs	r3, r3, #20
 8001e6e:	69fa      	ldr	r2, [r7, #28]
 8001e70:	fb02 f303 	mul.w	r3, r2, r3
 8001e74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e76:	e054      	b.n	8001f22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7e:	d050      	beq.n	8001f22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001e80:	f7fe fca0 	bl	80007c4 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d902      	bls.n	8001e96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d13d      	bne.n	8001f12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001ea4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001eae:	d111      	bne.n	8001ed4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001eb8:	d004      	beq.n	8001ec4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ec2:	d107      	bne.n	8001ed4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ed2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001edc:	d10f      	bne.n	8001efe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001efc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e017      	b.n	8001f42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	bf0c      	ite	eq
 8001f32:	2301      	moveq	r3, #1
 8001f34:	2300      	movne	r3, #0
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	461a      	mov	r2, r3
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d19b      	bne.n	8001e78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3720      	adds	r7, #32
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000000 	.word	0x20000000

08001f50 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	@ 0x28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001f62:	f7fe fc2f 	bl	80007c4 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f6a:	1a9b      	subs	r3, r3, r2
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	4413      	add	r3, r2
 8001f70:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8001f72:	f7fe fc27 	bl	80007c4 <HAL_GetTick>
 8001f76:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	330c      	adds	r3, #12
 8001f7e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001f80:	4b3d      	ldr	r3, [pc, #244]	@ (8002078 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	00da      	lsls	r2, r3, #3
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	0d1b      	lsrs	r3, r3, #20
 8001f90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f92:	fb02 f303 	mul.w	r3, r2, r3
 8001f96:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8001f98:	e060      	b.n	800205c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8001fa0:	d107      	bne.n	8001fb2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d104      	bne.n	8001fb2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8001fb0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb8:	d050      	beq.n	800205c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001fba:	f7fe fc03 	bl	80007c4 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d902      	bls.n	8001fd0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8001fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d13d      	bne.n	800204c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001fde:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001fe8:	d111      	bne.n	800200e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ff2:	d004      	beq.n	8001ffe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ffc:	d107      	bne.n	800200e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800200c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002012:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002016:	d10f      	bne.n	8002038 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002036:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e010      	b.n	800206e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	3b01      	subs	r3, #1
 800205a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	4013      	ands	r3, r2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	429a      	cmp	r2, r3
 800206a:	d196      	bne.n	8001f9a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3728      	adds	r7, #40	@ 0x28
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000000 	.word	0x20000000

0800207c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af02      	add	r7, sp, #8
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	2200      	movs	r2, #0
 8002090:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f7ff ff5b 	bl	8001f50 <SPI_WaitFifoStateUntilTimeout>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d007      	beq.n	80020b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020a4:	f043 0220 	orr.w	r2, r3, #32
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e027      	b.n	8002100 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	2200      	movs	r2, #0
 80020b8:	2180      	movs	r1, #128	@ 0x80
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f7ff fec0 	bl	8001e40 <SPI_WaitFlagStateUntilTimeout>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d007      	beq.n	80020d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ca:	f043 0220 	orr.w	r2, r3, #32
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e014      	b.n	8002100 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2200      	movs	r2, #0
 80020de:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f7ff ff34 	bl	8001f50 <SPI_WaitFifoStateUntilTimeout>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d007      	beq.n	80020fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f2:	f043 0220 	orr.w	r2, r3, #32
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e000      	b.n	8002100 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <memset>:
 8002108:	4402      	add	r2, r0
 800210a:	4603      	mov	r3, r0
 800210c:	4293      	cmp	r3, r2
 800210e:	d100      	bne.n	8002112 <memset+0xa>
 8002110:	4770      	bx	lr
 8002112:	f803 1b01 	strb.w	r1, [r3], #1
 8002116:	e7f9      	b.n	800210c <memset+0x4>

08002118 <__libc_init_array>:
 8002118:	b570      	push	{r4, r5, r6, lr}
 800211a:	4d0d      	ldr	r5, [pc, #52]	@ (8002150 <__libc_init_array+0x38>)
 800211c:	4c0d      	ldr	r4, [pc, #52]	@ (8002154 <__libc_init_array+0x3c>)
 800211e:	1b64      	subs	r4, r4, r5
 8002120:	10a4      	asrs	r4, r4, #2
 8002122:	2600      	movs	r6, #0
 8002124:	42a6      	cmp	r6, r4
 8002126:	d109      	bne.n	800213c <__libc_init_array+0x24>
 8002128:	4d0b      	ldr	r5, [pc, #44]	@ (8002158 <__libc_init_array+0x40>)
 800212a:	4c0c      	ldr	r4, [pc, #48]	@ (800215c <__libc_init_array+0x44>)
 800212c:	f000 f818 	bl	8002160 <_init>
 8002130:	1b64      	subs	r4, r4, r5
 8002132:	10a4      	asrs	r4, r4, #2
 8002134:	2600      	movs	r6, #0
 8002136:	42a6      	cmp	r6, r4
 8002138:	d105      	bne.n	8002146 <__libc_init_array+0x2e>
 800213a:	bd70      	pop	{r4, r5, r6, pc}
 800213c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002140:	4798      	blx	r3
 8002142:	3601      	adds	r6, #1
 8002144:	e7ee      	b.n	8002124 <__libc_init_array+0xc>
 8002146:	f855 3b04 	ldr.w	r3, [r5], #4
 800214a:	4798      	blx	r3
 800214c:	3601      	adds	r6, #1
 800214e:	e7f2      	b.n	8002136 <__libc_init_array+0x1e>
 8002150:	08002250 	.word	0x08002250
 8002154:	08002250 	.word	0x08002250
 8002158:	08002250 	.word	0x08002250
 800215c:	08002254 	.word	0x08002254

08002160 <_init>:
 8002160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002162:	bf00      	nop
 8002164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002166:	bc08      	pop	{r3}
 8002168:	469e      	mov	lr, r3
 800216a:	4770      	bx	lr

0800216c <_fini>:
 800216c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800216e:	bf00      	nop
 8002170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002172:	bc08      	pop	{r3}
 8002174:	469e      	mov	lr, r3
 8002176:	4770      	bx	lr
