
9_SPI_ST7735S_TFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002158  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080022e0  080022e0  000032e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023b8  080023b8  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080023b8  080023b8  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023b8  080023b8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023b8  080023b8  000033b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080023bc  080023bc  000033bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080023c0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  080023cc  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080023cc  00004090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008716  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c67  00000000  00000000  0000c752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  0000e3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006fe  00000000  00000000  0000ed30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000250ef  00000000  00000000  0000f42e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b3c9  00000000  00000000  0003451d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1230  00000000  00000000  0003f8e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120b16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023f8  00000000  00000000  00120b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00122f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080022c8 	.word	0x080022c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080022c8 	.word	0x080022c8

080001c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ce:	f107 030c 	add.w	r3, r7, #12
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001de:	4b21      	ldr	r3, [pc, #132]	@ (8000264 <MX_GPIO_Init+0x9c>)
 80001e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001e2:	4a20      	ldr	r2, [pc, #128]	@ (8000264 <MX_GPIO_Init+0x9c>)
 80001e4:	f043 0304 	orr.w	r3, r3, #4
 80001e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80001ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000264 <MX_GPIO_Init+0x9c>)
 80001ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001ee:	f003 0304 	and.w	r3, r3, #4
 80001f2:	60bb      	str	r3, [r7, #8]
 80001f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000264 <MX_GPIO_Init+0x9c>)
 80001f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001fa:	4a1a      	ldr	r2, [pc, #104]	@ (8000264 <MX_GPIO_Init+0x9c>)
 80001fc:	f043 0302 	orr.w	r3, r3, #2
 8000200:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000202:	4b18      	ldr	r3, [pc, #96]	@ (8000264 <MX_GPIO_Init+0x9c>)
 8000204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000206:	f003 0302 	and.w	r3, r3, #2
 800020a:	607b      	str	r3, [r7, #4]
 800020c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800020e:	4b15      	ldr	r3, [pc, #84]	@ (8000264 <MX_GPIO_Init+0x9c>)
 8000210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000212:	4a14      	ldr	r2, [pc, #80]	@ (8000264 <MX_GPIO_Init+0x9c>)
 8000214:	f043 0301 	orr.w	r3, r3, #1
 8000218:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800021a:	4b12      	ldr	r3, [pc, #72]	@ (8000264 <MX_GPIO_Init+0x9c>)
 800021c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800021e:	f003 0301 	and.w	r3, r3, #1
 8000222:	603b      	str	r3, [r7, #0]
 8000224:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	f640 0104 	movw	r1, #2052	@ 0x804
 800022c:	480e      	ldr	r0, [pc, #56]	@ (8000268 <MX_GPIO_Init+0xa0>)
 800022e:	f000 fe3d 	bl	8000eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000232:	2201      	movs	r2, #1
 8000234:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000238:	480b      	ldr	r0, [pc, #44]	@ (8000268 <MX_GPIO_Init+0xa0>)
 800023a:	f000 fe37 	bl	8000eac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 800023e:	f641 0304 	movw	r3, #6148	@ 0x1804
 8000242:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000244:	2301      	movs	r3, #1
 8000246:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000248:	2300      	movs	r3, #0
 800024a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800024c:	2300      	movs	r3, #0
 800024e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000250:	f107 030c 	add.w	r3, r7, #12
 8000254:	4619      	mov	r1, r3
 8000256:	4804      	ldr	r0, [pc, #16]	@ (8000268 <MX_GPIO_Init+0xa0>)
 8000258:	f000 fc7e 	bl	8000b58 <HAL_GPIO_Init>

}
 800025c:	bf00      	nop
 800025e:	3720      	adds	r7, #32
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40021000 	.word	0x40021000
 8000268:	48000400 	.word	0x48000400

0800026c <lcd_cmd>:
  CMD(ST7735S_MADCTL), 0xa0,
};

//Funkcja wysylajaca komende do wyswietlacza (static oznacza ze funkcja nie jest widoczna
//w innych plikach, a ta funkcja bedzie uzywana tylko w tym pliku):
static void lcd_cmd(uint8_t cmd) {
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	71fb      	strb	r3, [r7, #7]

	//Ustawienie stanu niskiego na linii DC oznacza ze wysylamy komende:
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800027c:	480c      	ldr	r0, [pc, #48]	@ (80002b0 <lcd_cmd+0x44>)
 800027e:	f000 fe15 	bl	8000eac <HAL_GPIO_WritePin>
	//Ustawienie stanu niskiego na linii CS oznacza ze rozpoczynamy komunikacje SPI:
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000282:	2200      	movs	r2, #0
 8000284:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000288:	4809      	ldr	r0, [pc, #36]	@ (80002b0 <lcd_cmd+0x44>)
 800028a:	f000 fe0f 	bl	8000eac <HAL_GPIO_WritePin>
	//Wyslanie komendy przekazanej do funkcji:
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 800028e:	1df9      	adds	r1, r7, #7
 8000290:	f04f 33ff 	mov.w	r3, #4294967295
 8000294:	2201      	movs	r2, #1
 8000296:	4807      	ldr	r0, [pc, #28]	@ (80002b4 <lcd_cmd+0x48>)
 8000298:	f001 fd0f 	bl	8001cba <HAL_SPI_Transmit>
	//Ustawienie stanu wysokiego na linii CS oznacza ze konczymy komunikacje SPI:
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800029c:	2201      	movs	r2, #1
 800029e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002a2:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <lcd_cmd+0x44>)
 80002a4:	f000 fe02 	bl	8000eac <HAL_GPIO_WritePin>

}
 80002a8:	bf00      	nop
 80002aa:	3708      	adds	r7, #8
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	48000400 	.word	0x48000400
 80002b4:	20000028 	.word	0x20000028

080002b8 <lcd_data>:

//Funkcja wysylajaca 8-bitow dane do wyswietlacza:
static void lcd_data(uint8_t data) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]

	//Ustawienie stanu wysokiego na linii DC oznacza ze wysylamy dane:
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80002c2:	2201      	movs	r2, #1
 80002c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80002c8:	480c      	ldr	r0, [pc, #48]	@ (80002fc <lcd_data+0x44>)
 80002ca:	f000 fdef 	bl	8000eac <HAL_GPIO_WritePin>
	//Ustawienie stanu niskiego na linii CS oznacza ze rozpoczynamy komunikacje SPI:
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80002ce:	2200      	movs	r2, #0
 80002d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002d4:	4809      	ldr	r0, [pc, #36]	@ (80002fc <lcd_data+0x44>)
 80002d6:	f000 fde9 	bl	8000eac <HAL_GPIO_WritePin>
	//Wyslanie danych przekazanych do funkcji:
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 80002da:	1df9      	adds	r1, r7, #7
 80002dc:	f04f 33ff 	mov.w	r3, #4294967295
 80002e0:	2201      	movs	r2, #1
 80002e2:	4807      	ldr	r0, [pc, #28]	@ (8000300 <lcd_data+0x48>)
 80002e4:	f001 fce9 	bl	8001cba <HAL_SPI_Transmit>
	//Ustawienie stanu wysokiego na linii CS oznacza ze konczymy komunikacje SPI:
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80002e8:	2201      	movs	r2, #1
 80002ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002ee:	4803      	ldr	r0, [pc, #12]	@ (80002fc <lcd_data+0x44>)
 80002f0:	f000 fddc 	bl	8000eac <HAL_GPIO_WritePin>

}
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	48000400 	.word	0x48000400
 8000300:	20000028 	.word	0x20000028

08000304 <lcd_data16>:

//Funkcja wysylajaca 16-bitowe dane do wyswietlacza (najpierw wysylany jest bardziej
//znaczacy bajt, z pozniej mniej znaczacy):
static void lcd_data16(uint16_t value) {
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	80fb      	strh	r3, [r7, #6]

	//Wyslanie bardziej znaczacego bajtu:
	lcd_data(value >> 8);
 800030e:	88fb      	ldrh	r3, [r7, #6]
 8000310:	0a1b      	lsrs	r3, r3, #8
 8000312:	b29b      	uxth	r3, r3
 8000314:	b2db      	uxtb	r3, r3
 8000316:	4618      	mov	r0, r3
 8000318:	f7ff ffce 	bl	80002b8 <lcd_data>
	//Wyslanie mniej znaczacego bajtu:
	lcd_data(value);
 800031c:	88fb      	ldrh	r3, [r7, #6]
 800031e:	b2db      	uxtb	r3, r3
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ffc9 	bl	80002b8 <lcd_data>

}
 8000326:	bf00      	nop
 8000328:	3708      	adds	r7, #8
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}

0800032e <lcd_send>:

//Funkcja wysylajaca przekazywana wartosc jako komenda lub jako dane. Funkcja jako argument
//przyjmuje wartosc 16-bitowa. Na 9 bicie znajduje sie bit który oznacza czy wartosc bedzie
//wysylana jako komenda czy jako dane (1 - komenda, 0 - dane):
static void lcd_send(uint16_t value) {
 800032e:	b580      	push	{r7, lr}
 8000330:	b082      	sub	sp, #8
 8000332:	af00      	add	r7, sp, #0
 8000334:	4603      	mov	r3, r0
 8000336:	80fb      	strh	r3, [r7, #6]

	//Sprawdzenie czy wartosc ma byc wyslana jako komenda
	if(value & 0x100) {
 8000338:	88fb      	ldrh	r3, [r7, #6]
 800033a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800033e:	2b00      	cmp	r3, #0
 8000340:	d005      	beq.n	800034e <lcd_send+0x20>
		lcd_cmd(value);
 8000342:	88fb      	ldrh	r3, [r7, #6]
 8000344:	b2db      	uxtb	r3, r3
 8000346:	4618      	mov	r0, r3
 8000348:	f7ff ff90 	bl	800026c <lcd_cmd>
	//W przeciwnym razie wartosc jest wysylana jako dane:
	else {
		lcd_data(value);
	}

}
 800034c:	e004      	b.n	8000358 <lcd_send+0x2a>
		lcd_data(value);
 800034e:	88fb      	ldrh	r3, [r7, #6]
 8000350:	b2db      	uxtb	r3, r3
 8000352:	4618      	mov	r0, r3
 8000354:	f7ff ffb0 	bl	80002b8 <lcd_data>
}
 8000358:	bf00      	nop
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <lcd_init>:

//Funkcja realizujaca inicjalizacje wyswietlacza (nie jest oznaczona jako statyczna,
//poniewaz bedzie wywolywana w pliku main.c):
void lcd_init(void) {
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0

	int i;

	//Reset sterownika wyswietlacza:
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000366:	2200      	movs	r2, #0
 8000368:	2104      	movs	r1, #4
 800036a:	4817      	ldr	r0, [pc, #92]	@ (80003c8 <lcd_init+0x68>)
 800036c:	f000 fd9e 	bl	8000eac <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000370:	2064      	movs	r0, #100	@ 0x64
 8000372:	f000 fae7 	bl	8000944 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8000376:	2201      	movs	r2, #1
 8000378:	2104      	movs	r1, #4
 800037a:	4813      	ldr	r0, [pc, #76]	@ (80003c8 <lcd_init+0x68>)
 800037c:	f000 fd96 	bl	8000eac <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000380:	2064      	movs	r0, #100	@ 0x64
 8000382:	f000 fadf 	bl	8000944 <HAL_Delay>

	//Wysylanie danych z tablicy do realizacji poczatkowej inicjalizacji wyswietlacza:
	for(i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8000386:	2300      	movs	r3, #0
 8000388:	607b      	str	r3, [r7, #4]
 800038a:	e009      	b.n	80003a0 <lcd_init+0x40>
		lcd_send(init_table[i]);
 800038c:	4a0f      	ldr	r2, [pc, #60]	@ (80003cc <lcd_init+0x6c>)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000394:	4618      	mov	r0, r3
 8000396:	f7ff ffca 	bl	800032e <lcd_send>
	for(i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	3301      	adds	r3, #1
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	2b4b      	cmp	r3, #75	@ 0x4b
 80003a4:	d9f2      	bls.n	800038c <lcd_init+0x2c>
	}

	HAL_Delay(200);
 80003a6:	20c8      	movs	r0, #200	@ 0xc8
 80003a8:	f000 facc 	bl	8000944 <HAL_Delay>

	//Obudzenie wyswietlacza z trybu uspienia:
	lcd_cmd(ST7735S_SLPOUT);
 80003ac:	2011      	movs	r0, #17
 80003ae:	f7ff ff5d 	bl	800026c <lcd_cmd>

	HAL_Delay(120);
 80003b2:	2078      	movs	r0, #120	@ 0x78
 80003b4:	f000 fac6 	bl	8000944 <HAL_Delay>

	//Wlaczenie wyswietlacza:
	lcd_cmd(ST7735S_DISPON);
 80003b8:	2029      	movs	r0, #41	@ 0x29
 80003ba:	f7ff ff57 	bl	800026c <lcd_cmd>
}
 80003be:	bf00      	nop
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	48000400 	.word	0x48000400
 80003cc:	080022e0 	.word	0x080022e0

080003d0 <lcd_set_window>:

//Definicja okna które bedzie rysowane na wyswietlaczu:
static void lcd_set_window(int x, int y, int width, int height)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	60f8      	str	r0, [r7, #12]
 80003d8:	60b9      	str	r1, [r7, #8]
 80003da:	607a      	str	r2, [r7, #4]
 80003dc:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 80003de:	202a      	movs	r0, #42	@ 0x2a
 80003e0:	f7ff ff44 	bl	800026c <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	b29b      	uxth	r3, r3
 80003e8:	3301      	adds	r3, #1
 80003ea:	b29b      	uxth	r3, r3
 80003ec:	4618      	mov	r0, r3
 80003ee:	f7ff ff89 	bl	8000304 <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	b29a      	uxth	r2, r3
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	b29b      	uxth	r3, r3
 80003fa:	4413      	add	r3, r2
 80003fc:	b29b      	uxth	r3, r3
 80003fe:	4618      	mov	r0, r3
 8000400:	f7ff ff80 	bl	8000304 <lcd_data16>

  lcd_cmd(ST7735S_RASET);
 8000404:	202b      	movs	r0, #43	@ 0x2b
 8000406:	f7ff ff31 	bl	800026c <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	b29b      	uxth	r3, r3
 800040e:	3302      	adds	r3, #2
 8000410:	b29b      	uxth	r3, r3
 8000412:	4618      	mov	r0, r3
 8000414:	f7ff ff76 	bl	8000304 <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	b29a      	uxth	r2, r3
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	b29b      	uxth	r3, r3
 8000420:	4413      	add	r3, r2
 8000422:	b29b      	uxth	r3, r3
 8000424:	3301      	adds	r3, #1
 8000426:	b29b      	uxth	r3, r3
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff ff6b 	bl	8000304 <lcd_data16>
}
 800042e:	bf00      	nop
 8000430:	3710      	adds	r7, #16
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}

08000436 <lcd_fill_box>:

//Funkcja rysujaca kolorowy prostokat:
void lcd_fill_box(int x, int y, int width, int height, uint16_t color) {
 8000436:	b580      	push	{r7, lr}
 8000438:	b086      	sub	sp, #24
 800043a:	af00      	add	r7, sp, #0
 800043c:	60f8      	str	r0, [r7, #12]
 800043e:	60b9      	str	r1, [r7, #8]
 8000440:	607a      	str	r2, [r7, #4]
 8000442:	603b      	str	r3, [r7, #0]

	//Ustawienie obszaru rysowania:
	lcd_set_window(x, y, width, height);
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	68b9      	ldr	r1, [r7, #8]
 800044a:	68f8      	ldr	r0, [r7, #12]
 800044c:	f7ff ffc0 	bl	80003d0 <lcd_set_window>

	//Przeslanie danych do kolorowania pojedynczych pikseli:
	lcd_cmd(ST7735S_RAMWR);
 8000450:	202c      	movs	r0, #44	@ 0x2c
 8000452:	f7ff ff0b 	bl	800026c <lcd_cmd>
	for(int i = 0; i < width * height; i++) {
 8000456:	2300      	movs	r3, #0
 8000458:	617b      	str	r3, [r7, #20]
 800045a:	e006      	b.n	800046a <lcd_fill_box+0x34>
		lcd_data16(color);
 800045c:	8c3b      	ldrh	r3, [r7, #32]
 800045e:	4618      	mov	r0, r3
 8000460:	f7ff ff50 	bl	8000304 <lcd_data16>
	for(int i = 0; i < width * height; i++) {
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	3301      	adds	r3, #1
 8000468:	617b      	str	r3, [r7, #20]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	683a      	ldr	r2, [r7, #0]
 800046e:	fb02 f303 	mul.w	r3, r2, r3
 8000472:	697a      	ldr	r2, [r7, #20]
 8000474:	429a      	cmp	r2, r3
 8000476:	dbf1      	blt.n	800045c <lcd_fill_box+0x26>
	}

}
 8000478:	bf00      	nop
 800047a:	bf00      	nop
 800047c:	3718      	adds	r7, #24
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b082      	sub	sp, #8
 8000486:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000488:	f000 f9e7 	bl	800085a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048c:	f000 f84e 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000490:	f7ff fe9a 	bl	80001c8 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000494:	f000 f8b2 	bl	80005fc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  //Inicjalizacja wyswietlacza:
  lcd_init();
 8000498:	f7ff ff62 	bl	8000360 <lcd_init>

  //Rysowanie kolorowych prostokatow:
  lcd_fill_box(0, 0, 160, 16, RED);
 800049c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	2310      	movs	r3, #16
 80004a4:	22a0      	movs	r2, #160	@ 0xa0
 80004a6:	2100      	movs	r1, #0
 80004a8:	2000      	movs	r0, #0
 80004aa:	f7ff ffc4 	bl	8000436 <lcd_fill_box>
  lcd_fill_box(0, 16, 160, 16, GREEN);
 80004ae:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80004b2:	9300      	str	r3, [sp, #0]
 80004b4:	2310      	movs	r3, #16
 80004b6:	22a0      	movs	r2, #160	@ 0xa0
 80004b8:	2110      	movs	r1, #16
 80004ba:	2000      	movs	r0, #0
 80004bc:	f7ff ffbb 	bl	8000436 <lcd_fill_box>
  lcd_fill_box(0, 32, 160, 16, BLUE);
 80004c0:	231f      	movs	r3, #31
 80004c2:	9300      	str	r3, [sp, #0]
 80004c4:	2310      	movs	r3, #16
 80004c6:	22a0      	movs	r2, #160	@ 0xa0
 80004c8:	2120      	movs	r1, #32
 80004ca:	2000      	movs	r0, #0
 80004cc:	f7ff ffb3 	bl	8000436 <lcd_fill_box>
  lcd_fill_box(0, 48, 160, 16, YELLOW);
 80004d0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80004d4:	9300      	str	r3, [sp, #0]
 80004d6:	2310      	movs	r3, #16
 80004d8:	22a0      	movs	r2, #160	@ 0xa0
 80004da:	2130      	movs	r1, #48	@ 0x30
 80004dc:	2000      	movs	r0, #0
 80004de:	f7ff ffaa 	bl	8000436 <lcd_fill_box>
  lcd_fill_box(0, 64, 160, 16, MAGENTA);
 80004e2:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80004e6:	9300      	str	r3, [sp, #0]
 80004e8:	2310      	movs	r3, #16
 80004ea:	22a0      	movs	r2, #160	@ 0xa0
 80004ec:	2140      	movs	r1, #64	@ 0x40
 80004ee:	2000      	movs	r0, #0
 80004f0:	f7ff ffa1 	bl	8000436 <lcd_fill_box>
  lcd_fill_box(0, 80, 160, 16, CYAN);
 80004f4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2310      	movs	r3, #16
 80004fc:	22a0      	movs	r2, #160	@ 0xa0
 80004fe:	2150      	movs	r1, #80	@ 0x50
 8000500:	2000      	movs	r0, #0
 8000502:	f7ff ff98 	bl	8000436 <lcd_fill_box>
  lcd_fill_box(0, 96, 160, 16, WHITE);
 8000506:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	2310      	movs	r3, #16
 800050e:	22a0      	movs	r2, #160	@ 0xa0
 8000510:	2160      	movs	r1, #96	@ 0x60
 8000512:	2000      	movs	r0, #0
 8000514:	f7ff ff8f 	bl	8000436 <lcd_fill_box>
  lcd_fill_box(0, 112, 160, 16, BLACK);
 8000518:	2300      	movs	r3, #0
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2310      	movs	r3, #16
 800051e:	22a0      	movs	r2, #160	@ 0xa0
 8000520:	2170      	movs	r1, #112	@ 0x70
 8000522:	2000      	movs	r0, #0
 8000524:	f7ff ff87 	bl	8000436 <lcd_fill_box>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000528:	bf00      	nop
 800052a:	e7fd      	b.n	8000528 <main+0xa6>

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b096      	sub	sp, #88	@ 0x58
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0314 	add.w	r3, r7, #20
 8000536:	2244      	movs	r2, #68	@ 0x44
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f001 fe98 	bl	8002270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	463b      	mov	r3, r7
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
 800054c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800054e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000552:	f000 fce1 	bl	8000f18 <HAL_PWREx_ControlVoltageScaling>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800055c:	f000 f848 	bl	80005f0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000560:	f000 fcbc 	bl	8000edc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000564:	4b21      	ldr	r3, [pc, #132]	@ (80005ec <SystemClock_Config+0xc0>)
 8000566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800056a:	4a20      	ldr	r2, [pc, #128]	@ (80005ec <SystemClock_Config+0xc0>)
 800056c:	f023 0318 	bic.w	r3, r3, #24
 8000570:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000574:	2314      	movs	r3, #20
 8000576:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000578:	2301      	movs	r3, #1
 800057a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800057c:	2301      	movs	r3, #1
 800057e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000584:	2360      	movs	r3, #96	@ 0x60
 8000586:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000588:	2302      	movs	r3, #2
 800058a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800058c:	2301      	movs	r3, #1
 800058e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000590:	2301      	movs	r3, #1
 8000592:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000594:	2328      	movs	r3, #40	@ 0x28
 8000596:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000598:	2307      	movs	r3, #7
 800059a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059c:	2302      	movs	r3, #2
 800059e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 fd0b 	bl	8000fc4 <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005b4:	f000 f81c 	bl	80005f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005bc:	2303      	movs	r3, #3
 80005be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005cc:	463b      	mov	r3, r7
 80005ce:	2104      	movs	r1, #4
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 f8d3 	bl	800177c <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005dc:	f000 f808 	bl	80005f0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005e0:	f001 fab8 	bl	8001b54 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005e4:	bf00      	nop
 80005e6:	3758      	adds	r7, #88	@ 0x58
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40021000 	.word	0x40021000

080005f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f4:	b672      	cpsid	i
}
 80005f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <Error_Handler+0x8>

080005fc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000600:	4b1b      	ldr	r3, [pc, #108]	@ (8000670 <MX_SPI2_Init+0x74>)
 8000602:	4a1c      	ldr	r2, [pc, #112]	@ (8000674 <MX_SPI2_Init+0x78>)
 8000604:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000606:	4b1a      	ldr	r3, [pc, #104]	@ (8000670 <MX_SPI2_Init+0x74>)
 8000608:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800060c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800060e:	4b18      	ldr	r3, [pc, #96]	@ (8000670 <MX_SPI2_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000614:	4b16      	ldr	r3, [pc, #88]	@ (8000670 <MX_SPI2_Init+0x74>)
 8000616:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800061a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800061c:	4b14      	ldr	r3, [pc, #80]	@ (8000670 <MX_SPI2_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000622:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <MX_SPI2_Init+0x74>)
 8000624:	2200      	movs	r2, #0
 8000626:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000628:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <MX_SPI2_Init+0x74>)
 800062a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800062e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000630:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <MX_SPI2_Init+0x74>)
 8000632:	2210      	movs	r2, #16
 8000634:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000636:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <MX_SPI2_Init+0x74>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800063c:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <MX_SPI2_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000642:	4b0b      	ldr	r3, [pc, #44]	@ (8000670 <MX_SPI2_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000648:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <MX_SPI2_Init+0x74>)
 800064a:	2207      	movs	r2, #7
 800064c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800064e:	4b08      	ldr	r3, [pc, #32]	@ (8000670 <MX_SPI2_Init+0x74>)
 8000650:	2200      	movs	r2, #0
 8000652:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <MX_SPI2_Init+0x74>)
 8000656:	2200      	movs	r2, #0
 8000658:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	@ (8000670 <MX_SPI2_Init+0x74>)
 800065c:	f001 fa8a 	bl	8001b74 <HAL_SPI_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000666:	f7ff ffc3 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000028 	.word	0x20000028
 8000674:	40003800 	.word	0x40003800

08000678 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	@ 0x28
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a25      	ldr	r2, [pc, #148]	@ (800072c <HAL_SPI_MspInit+0xb4>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d144      	bne.n	8000724 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800069a:	4b25      	ldr	r3, [pc, #148]	@ (8000730 <HAL_SPI_MspInit+0xb8>)
 800069c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800069e:	4a24      	ldr	r2, [pc, #144]	@ (8000730 <HAL_SPI_MspInit+0xb8>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80006a6:	4b22      	ldr	r3, [pc, #136]	@ (8000730 <HAL_SPI_MspInit+0xb8>)
 80006a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <HAL_SPI_MspInit+0xb8>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b6:	4a1e      	ldr	r2, [pc, #120]	@ (8000730 <HAL_SPI_MspInit+0xb8>)
 80006b8:	f043 0304 	orr.w	r3, r3, #4
 80006bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006be:	4b1c      	ldr	r3, [pc, #112]	@ (8000730 <HAL_SPI_MspInit+0xb8>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	f003 0304 	and.w	r3, r3, #4
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ca:	4b19      	ldr	r3, [pc, #100]	@ (8000730 <HAL_SPI_MspInit+0xb8>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ce:	4a18      	ldr	r2, [pc, #96]	@ (8000730 <HAL_SPI_MspInit+0xb8>)
 80006d0:	f043 0302 	orr.w	r3, r3, #2
 80006d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006d6:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <HAL_SPI_MspInit+0xb8>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006e2:	2308      	movs	r3, #8
 80006e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e6:	2302      	movs	r3, #2
 80006e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ee:	2303      	movs	r3, #3
 80006f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006f2:	2305      	movs	r3, #5
 80006f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4619      	mov	r1, r3
 80006fc:	480d      	ldr	r0, [pc, #52]	@ (8000734 <HAL_SPI_MspInit+0xbc>)
 80006fe:	f000 fa2b 	bl	8000b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000702:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000708:	2302      	movs	r3, #2
 800070a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000710:	2303      	movs	r3, #3
 8000712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000714:	2305      	movs	r3, #5
 8000716:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4619      	mov	r1, r3
 800071e:	4806      	ldr	r0, [pc, #24]	@ (8000738 <HAL_SPI_MspInit+0xc0>)
 8000720:	f000 fa1a 	bl	8000b58 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000724:	bf00      	nop
 8000726:	3728      	adds	r7, #40	@ 0x28
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40003800 	.word	0x40003800
 8000730:	40021000 	.word	0x40021000
 8000734:	48000800 	.word	0x48000800
 8000738:	48000400 	.word	0x48000400

0800073c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000742:	4b0f      	ldr	r3, [pc, #60]	@ (8000780 <HAL_MspInit+0x44>)
 8000744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000746:	4a0e      	ldr	r2, [pc, #56]	@ (8000780 <HAL_MspInit+0x44>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6613      	str	r3, [r2, #96]	@ 0x60
 800074e:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <HAL_MspInit+0x44>)
 8000750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <HAL_MspInit+0x44>)
 800075c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800075e:	4a08      	ldr	r2, [pc, #32]	@ (8000780 <HAL_MspInit+0x44>)
 8000760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000764:	6593      	str	r3, [r2, #88]	@ 0x58
 8000766:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <HAL_MspInit+0x44>)
 8000768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800076a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	40021000 	.word	0x40021000

08000784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <NMI_Handler+0x4>

0800078c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <HardFault_Handler+0x4>

08000794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <MemManage_Handler+0x4>

0800079c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <BusFault_Handler+0x4>

080007a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <UsageFault_Handler+0x4>

080007ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007da:	f000 f893 	bl	8000904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <SystemInit+0x20>)
 80007ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007ee:	4a05      	ldr	r2, [pc, #20]	@ (8000804 <SystemInit+0x20>)
 80007f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000808:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000840 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800080c:	f7ff ffea 	bl	80007e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000810:	480c      	ldr	r0, [pc, #48]	@ (8000844 <LoopForever+0x6>)
  ldr r1, =_edata
 8000812:	490d      	ldr	r1, [pc, #52]	@ (8000848 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000814:	4a0d      	ldr	r2, [pc, #52]	@ (800084c <LoopForever+0xe>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000818:	e002      	b.n	8000820 <LoopCopyDataInit>

0800081a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800081a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800081c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081e:	3304      	adds	r3, #4

08000820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000824:	d3f9      	bcc.n	800081a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000826:	4a0a      	ldr	r2, [pc, #40]	@ (8000850 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000828:	4c0a      	ldr	r4, [pc, #40]	@ (8000854 <LoopForever+0x16>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800082c:	e001      	b.n	8000832 <LoopFillZerobss>

0800082e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000830:	3204      	adds	r2, #4

08000832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000834:	d3fb      	bcc.n	800082e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000836:	f001 fd23 	bl	8002280 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800083a:	f7ff fe22 	bl	8000482 <main>

0800083e <LoopForever>:

LoopForever:
    b LoopForever
 800083e:	e7fe      	b.n	800083e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000840:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000848:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800084c:	080023c0 	.word	0x080023c0
  ldr r2, =_sbss
 8000850:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000854:	20000090 	.word	0x20000090

08000858 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000858:	e7fe      	b.n	8000858 <ADC1_2_IRQHandler>

0800085a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000860:	2300      	movs	r3, #0
 8000862:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000864:	2003      	movs	r0, #3
 8000866:	f000 f943 	bl	8000af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800086a:	200f      	movs	r0, #15
 800086c:	f000 f80e 	bl	800088c <HAL_InitTick>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d002      	beq.n	800087c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000876:	2301      	movs	r3, #1
 8000878:	71fb      	strb	r3, [r7, #7]
 800087a:	e001      	b.n	8000880 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800087c:	f7ff ff5e 	bl	800073c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000880:	79fb      	ldrb	r3, [r7, #7]
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000894:	2300      	movs	r3, #0
 8000896:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000898:	4b17      	ldr	r3, [pc, #92]	@ (80008f8 <HAL_InitTick+0x6c>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d023      	beq.n	80008e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008a0:	4b16      	ldr	r3, [pc, #88]	@ (80008fc <HAL_InitTick+0x70>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b14      	ldr	r3, [pc, #80]	@ (80008f8 <HAL_InitTick+0x6c>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	4619      	mov	r1, r3
 80008aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80008b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 f941 	bl	8000b3e <HAL_SYSTICK_Config>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d10f      	bne.n	80008e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2b0f      	cmp	r3, #15
 80008c6:	d809      	bhi.n	80008dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c8:	2200      	movs	r2, #0
 80008ca:	6879      	ldr	r1, [r7, #4]
 80008cc:	f04f 30ff 	mov.w	r0, #4294967295
 80008d0:	f000 f919 	bl	8000b06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008d4:	4a0a      	ldr	r2, [pc, #40]	@ (8000900 <HAL_InitTick+0x74>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6013      	str	r3, [r2, #0]
 80008da:	e007      	b.n	80008ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008dc:	2301      	movs	r3, #1
 80008de:	73fb      	strb	r3, [r7, #15]
 80008e0:	e004      	b.n	80008ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	73fb      	strb	r3, [r7, #15]
 80008e6:	e001      	b.n	80008ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008e8:	2301      	movs	r3, #1
 80008ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000008 	.word	0x20000008
 80008fc:	20000000 	.word	0x20000000
 8000900:	20000004 	.word	0x20000004

08000904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_IncTick+0x20>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <HAL_IncTick+0x24>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4413      	add	r3, r2
 8000914:	4a04      	ldr	r2, [pc, #16]	@ (8000928 <HAL_IncTick+0x24>)
 8000916:	6013      	str	r3, [r2, #0]
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	20000008 	.word	0x20000008
 8000928:	2000008c 	.word	0x2000008c

0800092c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  return uwTick;
 8000930:	4b03      	ldr	r3, [pc, #12]	@ (8000940 <HAL_GetTick+0x14>)
 8000932:	681b      	ldr	r3, [r3, #0]
}
 8000934:	4618      	mov	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	2000008c 	.word	0x2000008c

08000944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800094c:	f7ff ffee 	bl	800092c <HAL_GetTick>
 8000950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800095c:	d005      	beq.n	800096a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800095e:	4b0a      	ldr	r3, [pc, #40]	@ (8000988 <HAL_Delay+0x44>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	461a      	mov	r2, r3
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	4413      	add	r3, r2
 8000968:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800096a:	bf00      	nop
 800096c:	f7ff ffde 	bl	800092c <HAL_GetTick>
 8000970:	4602      	mov	r2, r0
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	429a      	cmp	r2, r3
 800097a:	d8f7      	bhi.n	800096c <HAL_Delay+0x28>
  {
  }
}
 800097c:	bf00      	nop
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000008 	.word	0x20000008

0800098c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800099c:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <__NVIC_SetPriorityGrouping+0x44>)
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009a8:	4013      	ands	r3, r2
 80009aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009be:	4a04      	ldr	r2, [pc, #16]	@ (80009d0 <__NVIC_SetPriorityGrouping+0x44>)
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	60d3      	str	r3, [r2, #12]
}
 80009c4:	bf00      	nop
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d8:	4b04      	ldr	r3, [pc, #16]	@ (80009ec <__NVIC_GetPriorityGrouping+0x18>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	0a1b      	lsrs	r3, r3, #8
 80009de:	f003 0307 	and.w	r3, r3, #7
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	6039      	str	r1, [r7, #0]
 80009fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	db0a      	blt.n	8000a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	490c      	ldr	r1, [pc, #48]	@ (8000a3c <__NVIC_SetPriority+0x4c>)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	0112      	lsls	r2, r2, #4
 8000a10:	b2d2      	uxtb	r2, r2
 8000a12:	440b      	add	r3, r1
 8000a14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a18:	e00a      	b.n	8000a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4908      	ldr	r1, [pc, #32]	@ (8000a40 <__NVIC_SetPriority+0x50>)
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	f003 030f 	and.w	r3, r3, #15
 8000a26:	3b04      	subs	r3, #4
 8000a28:	0112      	lsls	r2, r2, #4
 8000a2a:	b2d2      	uxtb	r2, r2
 8000a2c:	440b      	add	r3, r1
 8000a2e:	761a      	strb	r2, [r3, #24]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000e100 	.word	0xe000e100
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b089      	sub	sp, #36	@ 0x24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	f1c3 0307 	rsb	r3, r3, #7
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	bf28      	it	cs
 8000a62:	2304      	movcs	r3, #4
 8000a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3304      	adds	r3, #4
 8000a6a:	2b06      	cmp	r3, #6
 8000a6c:	d902      	bls.n	8000a74 <NVIC_EncodePriority+0x30>
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3b03      	subs	r3, #3
 8000a72:	e000      	b.n	8000a76 <NVIC_EncodePriority+0x32>
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a78:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	43da      	mvns	r2, r3
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	401a      	ands	r2, r3
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	fa01 f303 	lsl.w	r3, r1, r3
 8000a96:	43d9      	mvns	r1, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	4313      	orrs	r3, r2
         );
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3724      	adds	r7, #36	@ 0x24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
	...

08000aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000abc:	d301      	bcc.n	8000ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e00f      	b.n	8000ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8000aec <SysTick_Config+0x40>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aca:	210f      	movs	r1, #15
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	f7ff ff8e 	bl	80009f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad4:	4b05      	ldr	r3, [pc, #20]	@ (8000aec <SysTick_Config+0x40>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ada:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <SysTick_Config+0x40>)
 8000adc:	2207      	movs	r2, #7
 8000ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	e000e010 	.word	0xe000e010

08000af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff ff47 	bl	800098c <__NVIC_SetPriorityGrouping>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b086      	sub	sp, #24
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
 8000b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b18:	f7ff ff5c 	bl	80009d4 <__NVIC_GetPriorityGrouping>
 8000b1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	68b9      	ldr	r1, [r7, #8]
 8000b22:	6978      	ldr	r0, [r7, #20]
 8000b24:	f7ff ff8e 	bl	8000a44 <NVIC_EncodePriority>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b2e:	4611      	mov	r1, r2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff5d 	bl	80009f0 <__NVIC_SetPriority>
}
 8000b36:	bf00      	nop
 8000b38:	3718      	adds	r7, #24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ffb0 	bl	8000aac <SysTick_Config>
 8000b4c:	4603      	mov	r3, r0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b087      	sub	sp, #28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b66:	e17f      	b.n	8000e68 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	fa01 f303 	lsl.w	r3, r1, r3
 8000b74:	4013      	ands	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 8171 	beq.w	8000e62 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 0303 	and.w	r3, r3, #3
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d005      	beq.n	8000b98 <HAL_GPIO_Init+0x40>
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f003 0303 	and.w	r3, r3, #3
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d130      	bne.n	8000bfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	68da      	ldr	r2, [r3, #12]
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bce:	2201      	movs	r2, #1
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	091b      	lsrs	r3, r3, #4
 8000be4:	f003 0201 	and.w	r2, r3, #1
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 0303 	and.w	r3, r3, #3
 8000c02:	2b03      	cmp	r3, #3
 8000c04:	d118      	bne.n	8000c38 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	08db      	lsrs	r3, r3, #3
 8000c22:	f003 0201 	and.w	r2, r3, #1
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f003 0303 	and.w	r3, r3, #3
 8000c40:	2b03      	cmp	r3, #3
 8000c42:	d017      	beq.n	8000c74 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	2203      	movs	r2, #3
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	689a      	ldr	r2, [r3, #8]
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0303 	and.w	r3, r3, #3
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d123      	bne.n	8000cc8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	08da      	lsrs	r2, r3, #3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3208      	adds	r2, #8
 8000c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	f003 0307 	and.w	r3, r3, #7
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	220f      	movs	r2, #15
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	691a      	ldr	r2, [r3, #16]
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	08da      	lsrs	r2, r3, #3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3208      	adds	r2, #8
 8000cc2:	6939      	ldr	r1, [r7, #16]
 8000cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 0203 	and.w	r2, r3, #3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f000 80ac 	beq.w	8000e62 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	4b5f      	ldr	r3, [pc, #380]	@ (8000e88 <HAL_GPIO_Init+0x330>)
 8000d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d0e:	4a5e      	ldr	r2, [pc, #376]	@ (8000e88 <HAL_GPIO_Init+0x330>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d16:	4b5c      	ldr	r3, [pc, #368]	@ (8000e88 <HAL_GPIO_Init+0x330>)
 8000d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d22:	4a5a      	ldr	r2, [pc, #360]	@ (8000e8c <HAL_GPIO_Init+0x334>)
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	089b      	lsrs	r3, r3, #2
 8000d28:	3302      	adds	r3, #2
 8000d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	f003 0303 	and.w	r3, r3, #3
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	220f      	movs	r2, #15
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	4013      	ands	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d4c:	d025      	beq.n	8000d9a <HAL_GPIO_Init+0x242>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a4f      	ldr	r2, [pc, #316]	@ (8000e90 <HAL_GPIO_Init+0x338>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d01f      	beq.n	8000d96 <HAL_GPIO_Init+0x23e>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a4e      	ldr	r2, [pc, #312]	@ (8000e94 <HAL_GPIO_Init+0x33c>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d019      	beq.n	8000d92 <HAL_GPIO_Init+0x23a>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a4d      	ldr	r2, [pc, #308]	@ (8000e98 <HAL_GPIO_Init+0x340>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d013      	beq.n	8000d8e <HAL_GPIO_Init+0x236>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a4c      	ldr	r2, [pc, #304]	@ (8000e9c <HAL_GPIO_Init+0x344>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d00d      	beq.n	8000d8a <HAL_GPIO_Init+0x232>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a4b      	ldr	r2, [pc, #300]	@ (8000ea0 <HAL_GPIO_Init+0x348>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d007      	beq.n	8000d86 <HAL_GPIO_Init+0x22e>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a4a      	ldr	r2, [pc, #296]	@ (8000ea4 <HAL_GPIO_Init+0x34c>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d101      	bne.n	8000d82 <HAL_GPIO_Init+0x22a>
 8000d7e:	2306      	movs	r3, #6
 8000d80:	e00c      	b.n	8000d9c <HAL_GPIO_Init+0x244>
 8000d82:	2307      	movs	r3, #7
 8000d84:	e00a      	b.n	8000d9c <HAL_GPIO_Init+0x244>
 8000d86:	2305      	movs	r3, #5
 8000d88:	e008      	b.n	8000d9c <HAL_GPIO_Init+0x244>
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	e006      	b.n	8000d9c <HAL_GPIO_Init+0x244>
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e004      	b.n	8000d9c <HAL_GPIO_Init+0x244>
 8000d92:	2302      	movs	r3, #2
 8000d94:	e002      	b.n	8000d9c <HAL_GPIO_Init+0x244>
 8000d96:	2301      	movs	r3, #1
 8000d98:	e000      	b.n	8000d9c <HAL_GPIO_Init+0x244>
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	f002 0203 	and.w	r2, r2, #3
 8000da2:	0092      	lsls	r2, r2, #2
 8000da4:	4093      	lsls	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dac:	4937      	ldr	r1, [pc, #220]	@ (8000e8c <HAL_GPIO_Init+0x334>)
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	089b      	lsrs	r3, r3, #2
 8000db2:	3302      	adds	r3, #2
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dba:	4b3b      	ldr	r3, [pc, #236]	@ (8000ea8 <HAL_GPIO_Init+0x350>)
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d003      	beq.n	8000dde <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dde:	4a32      	ldr	r2, [pc, #200]	@ (8000ea8 <HAL_GPIO_Init+0x350>)
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000de4:	4b30      	ldr	r3, [pc, #192]	@ (8000ea8 <HAL_GPIO_Init+0x350>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	43db      	mvns	r3, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d003      	beq.n	8000e08 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e08:	4a27      	ldr	r2, [pc, #156]	@ (8000ea8 <HAL_GPIO_Init+0x350>)
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e0e:	4b26      	ldr	r3, [pc, #152]	@ (8000ea8 <HAL_GPIO_Init+0x350>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	43db      	mvns	r3, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e32:	4a1d      	ldr	r2, [pc, #116]	@ (8000ea8 <HAL_GPIO_Init+0x350>)
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea8 <HAL_GPIO_Init+0x350>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e5c:	4a12      	ldr	r2, [pc, #72]	@ (8000ea8 <HAL_GPIO_Init+0x350>)
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	3301      	adds	r3, #1
 8000e66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f47f ae78 	bne.w	8000b68 <HAL_GPIO_Init+0x10>
  }
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	371c      	adds	r7, #28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40010000 	.word	0x40010000
 8000e90:	48000400 	.word	0x48000400
 8000e94:	48000800 	.word	0x48000800
 8000e98:	48000c00 	.word	0x48000c00
 8000e9c:	48001000 	.word	0x48001000
 8000ea0:	48001400 	.word	0x48001400
 8000ea4:	48001800 	.word	0x48001800
 8000ea8:	40010400 	.word	0x40010400

08000eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	807b      	strh	r3, [r7, #2]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ebc:	787b      	ldrb	r3, [r7, #1]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ec2:	887a      	ldrh	r2, [r7, #2]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ec8:	e002      	b.n	8000ed0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eca:	887a      	ldrh	r2, [r7, #2]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ee0:	4b05      	ldr	r3, [pc, #20]	@ (8000ef8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a04      	ldr	r2, [pc, #16]	@ (8000ef8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000ee6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40007000 	.word	0x40007000

08000efc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f00:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40007000 	.word	0x40007000

08000f18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f26:	d130      	bne.n	8000f8a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f28:	4b23      	ldr	r3, [pc, #140]	@ (8000fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f34:	d038      	beq.n	8000fa8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f36:	4b20      	ldr	r3, [pc, #128]	@ (8000fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8000fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f40:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f44:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f46:	4b1d      	ldr	r3, [pc, #116]	@ (8000fbc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2232      	movs	r2, #50	@ 0x32
 8000f4c:	fb02 f303 	mul.w	r3, r2, r3
 8000f50:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f52:	fba2 2303 	umull	r2, r3, r2, r3
 8000f56:	0c9b      	lsrs	r3, r3, #18
 8000f58:	3301      	adds	r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f5c:	e002      	b.n	8000f64 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	3b01      	subs	r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f64:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f66:	695b      	ldr	r3, [r3, #20]
 8000f68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f70:	d102      	bne.n	8000f78 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1f2      	bne.n	8000f5e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f78:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f84:	d110      	bne.n	8000fa8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e00f      	b.n	8000faa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f96:	d007      	beq.n	8000fa8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f98:	4b07      	ldr	r3, [pc, #28]	@ (8000fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000fa0:	4a05      	ldr	r2, [pc, #20]	@ (8000fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fa2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fa6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40007000 	.word	0x40007000
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	431bde83 	.word	0x431bde83

08000fc4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e3ca      	b.n	800176c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fd6:	4b97      	ldr	r3, [pc, #604]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	f003 030c 	and.w	r3, r3, #12
 8000fde:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fe0:	4b94      	ldr	r3, [pc, #592]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0310 	and.w	r3, r3, #16
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f000 80e4 	beq.w	80011c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d007      	beq.n	800100e <HAL_RCC_OscConfig+0x4a>
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	2b0c      	cmp	r3, #12
 8001002:	f040 808b 	bne.w	800111c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	2b01      	cmp	r3, #1
 800100a:	f040 8087 	bne.w	800111c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800100e:	4b89      	ldr	r3, [pc, #548]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d005      	beq.n	8001026 <HAL_RCC_OscConfig+0x62>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e3a2      	b.n	800176c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a1a      	ldr	r2, [r3, #32]
 800102a:	4b82      	ldr	r3, [pc, #520]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0308 	and.w	r3, r3, #8
 8001032:	2b00      	cmp	r3, #0
 8001034:	d004      	beq.n	8001040 <HAL_RCC_OscConfig+0x7c>
 8001036:	4b7f      	ldr	r3, [pc, #508]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800103e:	e005      	b.n	800104c <HAL_RCC_OscConfig+0x88>
 8001040:	4b7c      	ldr	r3, [pc, #496]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001042:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001046:	091b      	lsrs	r3, r3, #4
 8001048:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800104c:	4293      	cmp	r3, r2
 800104e:	d223      	bcs.n	8001098 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	4618      	mov	r0, r3
 8001056:	f000 fd1d 	bl	8001a94 <RCC_SetFlashLatencyFromMSIRange>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e383      	b.n	800176c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001064:	4b73      	ldr	r3, [pc, #460]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a72      	ldr	r2, [pc, #456]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 800106a:	f043 0308 	orr.w	r3, r3, #8
 800106e:	6013      	str	r3, [r2, #0]
 8001070:	4b70      	ldr	r3, [pc, #448]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	496d      	ldr	r1, [pc, #436]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 800107e:	4313      	orrs	r3, r2
 8001080:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001082:	4b6c      	ldr	r3, [pc, #432]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	021b      	lsls	r3, r3, #8
 8001090:	4968      	ldr	r1, [pc, #416]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001092:	4313      	orrs	r3, r2
 8001094:	604b      	str	r3, [r1, #4]
 8001096:	e025      	b.n	80010e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001098:	4b66      	ldr	r3, [pc, #408]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a65      	ldr	r2, [pc, #404]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 800109e:	f043 0308 	orr.w	r3, r3, #8
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	4b63      	ldr	r3, [pc, #396]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a1b      	ldr	r3, [r3, #32]
 80010b0:	4960      	ldr	r1, [pc, #384]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 80010b2:	4313      	orrs	r3, r2
 80010b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	495b      	ldr	r1, [pc, #364]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 80010c6:	4313      	orrs	r3, r2
 80010c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d109      	bne.n	80010e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a1b      	ldr	r3, [r3, #32]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 fcdd 	bl	8001a94 <RCC_SetFlashLatencyFromMSIRange>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e343      	b.n	800176c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80010e4:	f000 fc4a 	bl	800197c <HAL_RCC_GetSysClockFreq>
 80010e8:	4602      	mov	r2, r0
 80010ea:	4b52      	ldr	r3, [pc, #328]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	091b      	lsrs	r3, r3, #4
 80010f0:	f003 030f 	and.w	r3, r3, #15
 80010f4:	4950      	ldr	r1, [pc, #320]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 80010f6:	5ccb      	ldrb	r3, [r1, r3]
 80010f8:	f003 031f 	and.w	r3, r3, #31
 80010fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001100:	4a4e      	ldr	r2, [pc, #312]	@ (800123c <HAL_RCC_OscConfig+0x278>)
 8001102:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001104:	4b4e      	ldr	r3, [pc, #312]	@ (8001240 <HAL_RCC_OscConfig+0x27c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fbbf 	bl	800088c <HAL_InitTick>
 800110e:	4603      	mov	r3, r0
 8001110:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d052      	beq.n	80011be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	e327      	b.n	800176c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d032      	beq.n	800118a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001124:	4b43      	ldr	r3, [pc, #268]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a42      	ldr	r2, [pc, #264]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001130:	f7ff fbfc 	bl	800092c <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001138:	f7ff fbf8 	bl	800092c <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e310      	b.n	800176c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800114a:	4b3a      	ldr	r3, [pc, #232]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0f0      	beq.n	8001138 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001156:	4b37      	ldr	r3, [pc, #220]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a36      	ldr	r2, [pc, #216]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 800115c:	f043 0308 	orr.w	r3, r3, #8
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	4b34      	ldr	r3, [pc, #208]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a1b      	ldr	r3, [r3, #32]
 800116e:	4931      	ldr	r1, [pc, #196]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001170:	4313      	orrs	r3, r2
 8001172:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001174:	4b2f      	ldr	r3, [pc, #188]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	492c      	ldr	r1, [pc, #176]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001184:	4313      	orrs	r3, r2
 8001186:	604b      	str	r3, [r1, #4]
 8001188:	e01a      	b.n	80011c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800118a:	4b2a      	ldr	r3, [pc, #168]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a29      	ldr	r2, [pc, #164]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001190:	f023 0301 	bic.w	r3, r3, #1
 8001194:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001196:	f7ff fbc9 	bl	800092c <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800119e:	f7ff fbc5 	bl	800092c <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e2dd      	b.n	800176c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011b0:	4b20      	ldr	r3, [pc, #128]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1f0      	bne.n	800119e <HAL_RCC_OscConfig+0x1da>
 80011bc:	e000      	b.n	80011c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d074      	beq.n	80012b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d005      	beq.n	80011de <HAL_RCC_OscConfig+0x21a>
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	2b0c      	cmp	r3, #12
 80011d6:	d10e      	bne.n	80011f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d10b      	bne.n	80011f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011de:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d064      	beq.n	80012b4 <HAL_RCC_OscConfig+0x2f0>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d160      	bne.n	80012b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e2ba      	b.n	800176c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011fe:	d106      	bne.n	800120e <HAL_RCC_OscConfig+0x24a>
 8001200:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a0b      	ldr	r2, [pc, #44]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001206:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	e026      	b.n	800125c <HAL_RCC_OscConfig+0x298>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001216:	d115      	bne.n	8001244 <HAL_RCC_OscConfig+0x280>
 8001218:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a05      	ldr	r2, [pc, #20]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 800121e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	4b03      	ldr	r3, [pc, #12]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a02      	ldr	r2, [pc, #8]	@ (8001234 <HAL_RCC_OscConfig+0x270>)
 800122a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	e014      	b.n	800125c <HAL_RCC_OscConfig+0x298>
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000
 8001238:	08002378 	.word	0x08002378
 800123c:	20000000 	.word	0x20000000
 8001240:	20000004 	.word	0x20000004
 8001244:	4ba0      	ldr	r3, [pc, #640]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a9f      	ldr	r2, [pc, #636]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 800124a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	4b9d      	ldr	r3, [pc, #628]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a9c      	ldr	r2, [pc, #624]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 8001256:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800125a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d013      	beq.n	800128c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001264:	f7ff fb62 	bl	800092c <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800126c:	f7ff fb5e 	bl	800092c <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b64      	cmp	r3, #100	@ 0x64
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e276      	b.n	800176c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800127e:	4b92      	ldr	r3, [pc, #584]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0f0      	beq.n	800126c <HAL_RCC_OscConfig+0x2a8>
 800128a:	e014      	b.n	80012b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800128c:	f7ff fb4e 	bl	800092c <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001294:	f7ff fb4a 	bl	800092c <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b64      	cmp	r3, #100	@ 0x64
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e262      	b.n	800176c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012a6:	4b88      	ldr	r3, [pc, #544]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1f0      	bne.n	8001294 <HAL_RCC_OscConfig+0x2d0>
 80012b2:	e000      	b.n	80012b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d060      	beq.n	8001384 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	2b04      	cmp	r3, #4
 80012c6:	d005      	beq.n	80012d4 <HAL_RCC_OscConfig+0x310>
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	2b0c      	cmp	r3, #12
 80012cc:	d119      	bne.n	8001302 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d116      	bne.n	8001302 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012d4:	4b7c      	ldr	r3, [pc, #496]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d005      	beq.n	80012ec <HAL_RCC_OscConfig+0x328>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d101      	bne.n	80012ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e23f      	b.n	800176c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ec:	4b76      	ldr	r3, [pc, #472]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	061b      	lsls	r3, r3, #24
 80012fa:	4973      	ldr	r1, [pc, #460]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001300:	e040      	b.n	8001384 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d023      	beq.n	8001352 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800130a:	4b6f      	ldr	r3, [pc, #444]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a6e      	ldr	r2, [pc, #440]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 8001310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001316:	f7ff fb09 	bl	800092c <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800131e:	f7ff fb05 	bl	800092c <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e21d      	b.n	800176c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001330:	4b65      	ldr	r3, [pc, #404]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0f0      	beq.n	800131e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133c:	4b62      	ldr	r3, [pc, #392]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	061b      	lsls	r3, r3, #24
 800134a:	495f      	ldr	r1, [pc, #380]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 800134c:	4313      	orrs	r3, r2
 800134e:	604b      	str	r3, [r1, #4]
 8001350:	e018      	b.n	8001384 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001352:	4b5d      	ldr	r3, [pc, #372]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a5c      	ldr	r2, [pc, #368]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 8001358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800135c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135e:	f7ff fae5 	bl	800092c <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001364:	e008      	b.n	8001378 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001366:	f7ff fae1 	bl	800092c <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e1f9      	b.n	800176c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001378:	4b53      	ldr	r3, [pc, #332]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1f0      	bne.n	8001366 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0308 	and.w	r3, r3, #8
 800138c:	2b00      	cmp	r3, #0
 800138e:	d03c      	beq.n	800140a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d01c      	beq.n	80013d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001398:	4b4b      	ldr	r3, [pc, #300]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 800139a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800139e:	4a4a      	ldr	r2, [pc, #296]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a8:	f7ff fac0 	bl	800092c <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b0:	f7ff fabc 	bl	800092c <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e1d4      	b.n	800176c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013c2:	4b41      	ldr	r3, [pc, #260]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 80013c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0ef      	beq.n	80013b0 <HAL_RCC_OscConfig+0x3ec>
 80013d0:	e01b      	b.n	800140a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013d2:	4b3d      	ldr	r3, [pc, #244]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 80013d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013d8:	4a3b      	ldr	r2, [pc, #236]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 80013da:	f023 0301 	bic.w	r3, r3, #1
 80013de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e2:	f7ff faa3 	bl	800092c <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ea:	f7ff fa9f 	bl	800092c <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e1b7      	b.n	800176c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013fc:	4b32      	ldr	r3, [pc, #200]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 80013fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1ef      	bne.n	80013ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 80a6 	beq.w	8001564 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001418:	2300      	movs	r3, #0
 800141a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800141c:	4b2a      	ldr	r3, [pc, #168]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 800141e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001420:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d10d      	bne.n	8001444 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001428:	4b27      	ldr	r3, [pc, #156]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 800142a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800142c:	4a26      	ldr	r2, [pc, #152]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 800142e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001432:	6593      	str	r3, [r2, #88]	@ 0x58
 8001434:	4b24      	ldr	r3, [pc, #144]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 8001436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001438:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001440:	2301      	movs	r3, #1
 8001442:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001444:	4b21      	ldr	r3, [pc, #132]	@ (80014cc <HAL_RCC_OscConfig+0x508>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800144c:	2b00      	cmp	r3, #0
 800144e:	d118      	bne.n	8001482 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001450:	4b1e      	ldr	r3, [pc, #120]	@ (80014cc <HAL_RCC_OscConfig+0x508>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a1d      	ldr	r2, [pc, #116]	@ (80014cc <HAL_RCC_OscConfig+0x508>)
 8001456:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800145a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800145c:	f7ff fa66 	bl	800092c <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001464:	f7ff fa62 	bl	800092c <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e17a      	b.n	800176c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001476:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <HAL_RCC_OscConfig+0x508>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d108      	bne.n	800149c <HAL_RCC_OscConfig+0x4d8>
 800148a:	4b0f      	ldr	r3, [pc, #60]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 800148c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001490:	4a0d      	ldr	r2, [pc, #52]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800149a:	e029      	b.n	80014f0 <HAL_RCC_OscConfig+0x52c>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	2b05      	cmp	r3, #5
 80014a2:	d115      	bne.n	80014d0 <HAL_RCC_OscConfig+0x50c>
 80014a4:	4b08      	ldr	r3, [pc, #32]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 80014a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014aa:	4a07      	ldr	r2, [pc, #28]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014b4:	4b04      	ldr	r3, [pc, #16]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 80014b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014ba:	4a03      	ldr	r2, [pc, #12]	@ (80014c8 <HAL_RCC_OscConfig+0x504>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014c4:	e014      	b.n	80014f0 <HAL_RCC_OscConfig+0x52c>
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40007000 	.word	0x40007000
 80014d0:	4b9c      	ldr	r3, [pc, #624]	@ (8001744 <HAL_RCC_OscConfig+0x780>)
 80014d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014d6:	4a9b      	ldr	r2, [pc, #620]	@ (8001744 <HAL_RCC_OscConfig+0x780>)
 80014d8:	f023 0301 	bic.w	r3, r3, #1
 80014dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014e0:	4b98      	ldr	r3, [pc, #608]	@ (8001744 <HAL_RCC_OscConfig+0x780>)
 80014e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014e6:	4a97      	ldr	r2, [pc, #604]	@ (8001744 <HAL_RCC_OscConfig+0x780>)
 80014e8:	f023 0304 	bic.w	r3, r3, #4
 80014ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d016      	beq.n	8001526 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f8:	f7ff fa18 	bl	800092c <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014fe:	e00a      	b.n	8001516 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001500:	f7ff fa14 	bl	800092c <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800150e:	4293      	cmp	r3, r2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e12a      	b.n	800176c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001516:	4b8b      	ldr	r3, [pc, #556]	@ (8001744 <HAL_RCC_OscConfig+0x780>)
 8001518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0ed      	beq.n	8001500 <HAL_RCC_OscConfig+0x53c>
 8001524:	e015      	b.n	8001552 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001526:	f7ff fa01 	bl	800092c <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800152c:	e00a      	b.n	8001544 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800152e:	f7ff f9fd 	bl	800092c <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800153c:	4293      	cmp	r3, r2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e113      	b.n	800176c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001544:	4b7f      	ldr	r3, [pc, #508]	@ (8001744 <HAL_RCC_OscConfig+0x780>)
 8001546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1ed      	bne.n	800152e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001552:	7ffb      	ldrb	r3, [r7, #31]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d105      	bne.n	8001564 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001558:	4b7a      	ldr	r3, [pc, #488]	@ (8001744 <HAL_RCC_OscConfig+0x780>)
 800155a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155c:	4a79      	ldr	r2, [pc, #484]	@ (8001744 <HAL_RCC_OscConfig+0x780>)
 800155e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001562:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 80fe 	beq.w	800176a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001572:	2b02      	cmp	r3, #2
 8001574:	f040 80d0 	bne.w	8001718 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001578:	4b72      	ldr	r3, [pc, #456]	@ (8001744 <HAL_RCC_OscConfig+0x780>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	f003 0203 	and.w	r2, r3, #3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001588:	429a      	cmp	r2, r3
 800158a:	d130      	bne.n	80015ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	3b01      	subs	r3, #1
 8001598:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800159a:	429a      	cmp	r2, r3
 800159c:	d127      	bne.n	80015ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d11f      	bne.n	80015ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80015b8:	2a07      	cmp	r2, #7
 80015ba:	bf14      	ite	ne
 80015bc:	2201      	movne	r2, #1
 80015be:	2200      	moveq	r2, #0
 80015c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d113      	bne.n	80015ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015d0:	085b      	lsrs	r3, r3, #1
 80015d2:	3b01      	subs	r3, #1
 80015d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d109      	bne.n	80015ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e4:	085b      	lsrs	r3, r3, #1
 80015e6:	3b01      	subs	r3, #1
 80015e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d06e      	beq.n	80016cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	2b0c      	cmp	r3, #12
 80015f2:	d069      	beq.n	80016c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80015f4:	4b53      	ldr	r3, [pc, #332]	@ (8001744 <HAL_RCC_OscConfig+0x780>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d105      	bne.n	800160c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001600:	4b50      	ldr	r3, [pc, #320]	@ (8001744 <HAL_RCC_OscConfig+0x780>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e0ad      	b.n	800176c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001610:	4b4c      	ldr	r3, [pc, #304]	@ (8001744 <HAL_RCC_OscConfig+0x780>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a4b      	ldr	r2, [pc, #300]	@ (8001744 <HAL_RCC_OscConfig+0x780>)
 8001616:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800161a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800161c:	f7ff f986 	bl	800092c <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001624:	f7ff f982 	bl	800092c <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e09a      	b.n	800176c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001636:	4b43      	ldr	r3, [pc, #268]	@ (8001744 <HAL_RCC_OscConfig+0x780>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001642:	4b40      	ldr	r3, [pc, #256]	@ (8001744 <HAL_RCC_OscConfig+0x780>)
 8001644:	68da      	ldr	r2, [r3, #12]
 8001646:	4b40      	ldr	r3, [pc, #256]	@ (8001748 <HAL_RCC_OscConfig+0x784>)
 8001648:	4013      	ands	r3, r2
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001652:	3a01      	subs	r2, #1
 8001654:	0112      	lsls	r2, r2, #4
 8001656:	4311      	orrs	r1, r2
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800165c:	0212      	lsls	r2, r2, #8
 800165e:	4311      	orrs	r1, r2
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001664:	0852      	lsrs	r2, r2, #1
 8001666:	3a01      	subs	r2, #1
 8001668:	0552      	lsls	r2, r2, #21
 800166a:	4311      	orrs	r1, r2
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001670:	0852      	lsrs	r2, r2, #1
 8001672:	3a01      	subs	r2, #1
 8001674:	0652      	lsls	r2, r2, #25
 8001676:	4311      	orrs	r1, r2
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800167c:	0912      	lsrs	r2, r2, #4
 800167e:	0452      	lsls	r2, r2, #17
 8001680:	430a      	orrs	r2, r1
 8001682:	4930      	ldr	r1, [pc, #192]	@ (8001744 <HAL_RCC_OscConfig+0x780>)
 8001684:	4313      	orrs	r3, r2
 8001686:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001688:	4b2e      	ldr	r3, [pc, #184]	@ (8001744 <HAL_RCC_OscConfig+0x780>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a2d      	ldr	r2, [pc, #180]	@ (8001744 <HAL_RCC_OscConfig+0x780>)
 800168e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001692:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001694:	4b2b      	ldr	r3, [pc, #172]	@ (8001744 <HAL_RCC_OscConfig+0x780>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	4a2a      	ldr	r2, [pc, #168]	@ (8001744 <HAL_RCC_OscConfig+0x780>)
 800169a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800169e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016a0:	f7ff f944 	bl	800092c <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a8:	f7ff f940 	bl	800092c <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e058      	b.n	800176c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ba:	4b22      	ldr	r3, [pc, #136]	@ (8001744 <HAL_RCC_OscConfig+0x780>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f0      	beq.n	80016a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016c6:	e050      	b.n	800176a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e04f      	b.n	800176c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001744 <HAL_RCC_OscConfig+0x780>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d148      	bne.n	800176a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80016d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <HAL_RCC_OscConfig+0x780>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a19      	ldr	r2, [pc, #100]	@ (8001744 <HAL_RCC_OscConfig+0x780>)
 80016de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016e4:	4b17      	ldr	r3, [pc, #92]	@ (8001744 <HAL_RCC_OscConfig+0x780>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	4a16      	ldr	r2, [pc, #88]	@ (8001744 <HAL_RCC_OscConfig+0x780>)
 80016ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016f0:	f7ff f91c 	bl	800092c <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f8:	f7ff f918 	bl	800092c <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e030      	b.n	800176c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800170a:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <HAL_RCC_OscConfig+0x780>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x734>
 8001716:	e028      	b.n	800176a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	2b0c      	cmp	r3, #12
 800171c:	d023      	beq.n	8001766 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171e:	4b09      	ldr	r3, [pc, #36]	@ (8001744 <HAL_RCC_OscConfig+0x780>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a08      	ldr	r2, [pc, #32]	@ (8001744 <HAL_RCC_OscConfig+0x780>)
 8001724:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172a:	f7ff f8ff 	bl	800092c <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001730:	e00c      	b.n	800174c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001732:	f7ff f8fb 	bl	800092c <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d905      	bls.n	800174c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e013      	b.n	800176c <HAL_RCC_OscConfig+0x7a8>
 8001744:	40021000 	.word	0x40021000
 8001748:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800174c:	4b09      	ldr	r3, [pc, #36]	@ (8001774 <HAL_RCC_OscConfig+0x7b0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1ec      	bne.n	8001732 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001758:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <HAL_RCC_OscConfig+0x7b0>)
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	4905      	ldr	r1, [pc, #20]	@ (8001774 <HAL_RCC_OscConfig+0x7b0>)
 800175e:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <HAL_RCC_OscConfig+0x7b4>)
 8001760:	4013      	ands	r3, r2
 8001762:	60cb      	str	r3, [r1, #12]
 8001764:	e001      	b.n	800176a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3720      	adds	r7, #32
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40021000 	.word	0x40021000
 8001778:	feeefffc 	.word	0xfeeefffc

0800177c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e0e7      	b.n	8001960 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001790:	4b75      	ldr	r3, [pc, #468]	@ (8001968 <HAL_RCC_ClockConfig+0x1ec>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d910      	bls.n	80017c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179e:	4b72      	ldr	r3, [pc, #456]	@ (8001968 <HAL_RCC_ClockConfig+0x1ec>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f023 0207 	bic.w	r2, r3, #7
 80017a6:	4970      	ldr	r1, [pc, #448]	@ (8001968 <HAL_RCC_ClockConfig+0x1ec>)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ae:	4b6e      	ldr	r3, [pc, #440]	@ (8001968 <HAL_RCC_ClockConfig+0x1ec>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d001      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e0cf      	b.n	8001960 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d010      	beq.n	80017ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	4b66      	ldr	r3, [pc, #408]	@ (800196c <HAL_RCC_ClockConfig+0x1f0>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017d8:	429a      	cmp	r2, r3
 80017da:	d908      	bls.n	80017ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017dc:	4b63      	ldr	r3, [pc, #396]	@ (800196c <HAL_RCC_ClockConfig+0x1f0>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	4960      	ldr	r1, [pc, #384]	@ (800196c <HAL_RCC_ClockConfig+0x1f0>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d04c      	beq.n	8001894 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d107      	bne.n	8001812 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001802:	4b5a      	ldr	r3, [pc, #360]	@ (800196c <HAL_RCC_ClockConfig+0x1f0>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d121      	bne.n	8001852 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e0a6      	b.n	8001960 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d107      	bne.n	800182a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800181a:	4b54      	ldr	r3, [pc, #336]	@ (800196c <HAL_RCC_ClockConfig+0x1f0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d115      	bne.n	8001852 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e09a      	b.n	8001960 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d107      	bne.n	8001842 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001832:	4b4e      	ldr	r3, [pc, #312]	@ (800196c <HAL_RCC_ClockConfig+0x1f0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d109      	bne.n	8001852 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e08e      	b.n	8001960 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001842:	4b4a      	ldr	r3, [pc, #296]	@ (800196c <HAL_RCC_ClockConfig+0x1f0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e086      	b.n	8001960 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001852:	4b46      	ldr	r3, [pc, #280]	@ (800196c <HAL_RCC_ClockConfig+0x1f0>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f023 0203 	bic.w	r2, r3, #3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4943      	ldr	r1, [pc, #268]	@ (800196c <HAL_RCC_ClockConfig+0x1f0>)
 8001860:	4313      	orrs	r3, r2
 8001862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001864:	f7ff f862 	bl	800092c <HAL_GetTick>
 8001868:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186a:	e00a      	b.n	8001882 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800186c:	f7ff f85e 	bl	800092c <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e06e      	b.n	8001960 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001882:	4b3a      	ldr	r3, [pc, #232]	@ (800196c <HAL_RCC_ClockConfig+0x1f0>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f003 020c 	and.w	r2, r3, #12
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	429a      	cmp	r2, r3
 8001892:	d1eb      	bne.n	800186c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d010      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	4b31      	ldr	r3, [pc, #196]	@ (800196c <HAL_RCC_ClockConfig+0x1f0>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d208      	bcs.n	80018c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b0:	4b2e      	ldr	r3, [pc, #184]	@ (800196c <HAL_RCC_ClockConfig+0x1f0>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	492b      	ldr	r1, [pc, #172]	@ (800196c <HAL_RCC_ClockConfig+0x1f0>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018c2:	4b29      	ldr	r3, [pc, #164]	@ (8001968 <HAL_RCC_ClockConfig+0x1ec>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d210      	bcs.n	80018f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d0:	4b25      	ldr	r3, [pc, #148]	@ (8001968 <HAL_RCC_ClockConfig+0x1ec>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f023 0207 	bic.w	r2, r3, #7
 80018d8:	4923      	ldr	r1, [pc, #140]	@ (8001968 <HAL_RCC_ClockConfig+0x1ec>)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	4313      	orrs	r3, r2
 80018de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e0:	4b21      	ldr	r3, [pc, #132]	@ (8001968 <HAL_RCC_ClockConfig+0x1ec>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d001      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e036      	b.n	8001960 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0304 	and.w	r3, r3, #4
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d008      	beq.n	8001910 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018fe:	4b1b      	ldr	r3, [pc, #108]	@ (800196c <HAL_RCC_ClockConfig+0x1f0>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	4918      	ldr	r1, [pc, #96]	@ (800196c <HAL_RCC_ClockConfig+0x1f0>)
 800190c:	4313      	orrs	r3, r2
 800190e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0308 	and.w	r3, r3, #8
 8001918:	2b00      	cmp	r3, #0
 800191a:	d009      	beq.n	8001930 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800191c:	4b13      	ldr	r3, [pc, #76]	@ (800196c <HAL_RCC_ClockConfig+0x1f0>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	4910      	ldr	r1, [pc, #64]	@ (800196c <HAL_RCC_ClockConfig+0x1f0>)
 800192c:	4313      	orrs	r3, r2
 800192e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001930:	f000 f824 	bl	800197c <HAL_RCC_GetSysClockFreq>
 8001934:	4602      	mov	r2, r0
 8001936:	4b0d      	ldr	r3, [pc, #52]	@ (800196c <HAL_RCC_ClockConfig+0x1f0>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	091b      	lsrs	r3, r3, #4
 800193c:	f003 030f 	and.w	r3, r3, #15
 8001940:	490b      	ldr	r1, [pc, #44]	@ (8001970 <HAL_RCC_ClockConfig+0x1f4>)
 8001942:	5ccb      	ldrb	r3, [r1, r3]
 8001944:	f003 031f 	and.w	r3, r3, #31
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
 800194c:	4a09      	ldr	r2, [pc, #36]	@ (8001974 <HAL_RCC_ClockConfig+0x1f8>)
 800194e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001950:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <HAL_RCC_ClockConfig+0x1fc>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe ff99 	bl	800088c <HAL_InitTick>
 800195a:	4603      	mov	r3, r0
 800195c:	72fb      	strb	r3, [r7, #11]

  return status;
 800195e:	7afb      	ldrb	r3, [r7, #11]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40022000 	.word	0x40022000
 800196c:	40021000 	.word	0x40021000
 8001970:	08002378 	.word	0x08002378
 8001974:	20000000 	.word	0x20000000
 8001978:	20000004 	.word	0x20000004

0800197c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800197c:	b480      	push	{r7}
 800197e:	b089      	sub	sp, #36	@ 0x24
 8001980:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
 8001986:	2300      	movs	r3, #0
 8001988:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800198a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x108>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001994:	4b3b      	ldr	r3, [pc, #236]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_RCC_GetSysClockFreq+0x34>
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	2b0c      	cmp	r3, #12
 80019a8:	d121      	bne.n	80019ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d11e      	bne.n	80019ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80019b0:	4b34      	ldr	r3, [pc, #208]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x108>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d107      	bne.n	80019cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019bc:	4b31      	ldr	r3, [pc, #196]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x108>)
 80019be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019c2:	0a1b      	lsrs	r3, r3, #8
 80019c4:	f003 030f 	and.w	r3, r3, #15
 80019c8:	61fb      	str	r3, [r7, #28]
 80019ca:	e005      	b.n	80019d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x108>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	091b      	lsrs	r3, r3, #4
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80019d8:	4a2b      	ldr	r2, [pc, #172]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x10c>)
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10d      	bne.n	8001a04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019ec:	e00a      	b.n	8001a04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d102      	bne.n	80019fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019f4:	4b25      	ldr	r3, [pc, #148]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x110>)
 80019f6:	61bb      	str	r3, [r7, #24]
 80019f8:	e004      	b.n	8001a04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a00:	4b23      	ldr	r3, [pc, #140]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	2b0c      	cmp	r3, #12
 8001a08:	d134      	bne.n	8001a74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d003      	beq.n	8001a22 <HAL_RCC_GetSysClockFreq+0xa6>
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	2b03      	cmp	r3, #3
 8001a1e:	d003      	beq.n	8001a28 <HAL_RCC_GetSysClockFreq+0xac>
 8001a20:	e005      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a22:	4b1a      	ldr	r3, [pc, #104]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x110>)
 8001a24:	617b      	str	r3, [r7, #20]
      break;
 8001a26:	e005      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a28:	4b19      	ldr	r3, [pc, #100]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a2a:	617b      	str	r3, [r7, #20]
      break;
 8001a2c:	e002      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	617b      	str	r3, [r7, #20]
      break;
 8001a32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a34:	4b13      	ldr	r3, [pc, #76]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	091b      	lsrs	r3, r3, #4
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	3301      	adds	r3, #1
 8001a40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a42:	4b10      	ldr	r3, [pc, #64]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	0a1b      	lsrs	r3, r3, #8
 8001a48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	fb03 f202 	mul.w	r2, r3, r2
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	0e5b      	lsrs	r3, r3, #25
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	3301      	adds	r3, #1
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a74:	69bb      	ldr	r3, [r7, #24]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3724      	adds	r7, #36	@ 0x24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000
 8001a88:	08002388 	.word	0x08002388
 8001a8c:	00f42400 	.word	0x00f42400
 8001a90:	007a1200 	.word	0x007a1200

08001a94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001aa0:	4b2a      	ldr	r3, [pc, #168]	@ (8001b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001aac:	f7ff fa26 	bl	8000efc <HAL_PWREx_GetVoltageRange>
 8001ab0:	6178      	str	r0, [r7, #20]
 8001ab2:	e014      	b.n	8001ade <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ab4:	4b25      	ldr	r3, [pc, #148]	@ (8001b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab8:	4a24      	ldr	r2, [pc, #144]	@ (8001b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001abe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ac0:	4b22      	ldr	r3, [pc, #136]	@ (8001b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001acc:	f7ff fa16 	bl	8000efc <HAL_PWREx_GetVoltageRange>
 8001ad0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad6:	4a1d      	ldr	r2, [pc, #116]	@ (8001b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ad8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001adc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ae4:	d10b      	bne.n	8001afe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b80      	cmp	r3, #128	@ 0x80
 8001aea:	d919      	bls.n	8001b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2ba0      	cmp	r3, #160	@ 0xa0
 8001af0:	d902      	bls.n	8001af8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001af2:	2302      	movs	r3, #2
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	e013      	b.n	8001b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001af8:	2301      	movs	r3, #1
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	e010      	b.n	8001b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b80      	cmp	r3, #128	@ 0x80
 8001b02:	d902      	bls.n	8001b0a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b04:	2303      	movs	r3, #3
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	e00a      	b.n	8001b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b80      	cmp	r3, #128	@ 0x80
 8001b0e:	d102      	bne.n	8001b16 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b10:	2302      	movs	r3, #2
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	e004      	b.n	8001b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b70      	cmp	r3, #112	@ 0x70
 8001b1a:	d101      	bne.n	8001b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b20:	4b0b      	ldr	r3, [pc, #44]	@ (8001b50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f023 0207 	bic.w	r2, r3, #7
 8001b28:	4909      	ldr	r1, [pc, #36]	@ (8001b50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b30:	4b07      	ldr	r3, [pc, #28]	@ (8001b50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d001      	beq.n	8001b42 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40022000 	.word	0x40022000

08001b54 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001b58:	4b05      	ldr	r3, [pc, #20]	@ (8001b70 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a04      	ldr	r2, [pc, #16]	@ (8001b70 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001b5e:	f043 0304 	orr.w	r3, r3, #4
 8001b62:	6013      	str	r3, [r2, #0]
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40021000 	.word	0x40021000

08001b74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e095      	b.n	8001cb2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d108      	bne.n	8001ba0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001b96:	d009      	beq.n	8001bac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	61da      	str	r2, [r3, #28]
 8001b9e:	e005      	b.n	8001bac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d106      	bne.n	8001bcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7fe fd56 	bl	8000678 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001be2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001bec:	d902      	bls.n	8001bf4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	e002      	b.n	8001bfa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001bf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bf8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001c02:	d007      	beq.n	8001c14 <HAL_SPI_Init+0xa0>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001c0c:	d002      	beq.n	8001c14 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001c24:	431a      	orrs	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c56:	ea42 0103 	orr.w	r1, r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c5e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	0c1b      	lsrs	r3, r3, #16
 8001c70:	f003 0204 	and.w	r2, r3, #4
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001c90:	ea42 0103 	orr.w	r1, r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b088      	sub	sp, #32
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	603b      	str	r3, [r7, #0]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001cca:	f7fe fe2f 	bl	800092c <HAL_GetTick>
 8001cce:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
 8001cd2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d001      	beq.n	8001ce4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e15c      	b.n	8001f9e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d002      	beq.n	8001cf0 <HAL_SPI_Transmit+0x36>
 8001cea:	88fb      	ldrh	r3, [r7, #6]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e154      	b.n	8001f9e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d101      	bne.n	8001d02 <HAL_SPI_Transmit+0x48>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e14d      	b.n	8001f9e <HAL_SPI_Transmit+0x2e4>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	88fa      	ldrh	r2, [r7, #6]
 8001d22:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	88fa      	ldrh	r2, [r7, #6]
 8001d28:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d54:	d10f      	bne.n	8001d76 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d80:	2b40      	cmp	r3, #64	@ 0x40
 8001d82:	d007      	beq.n	8001d94 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001d9c:	d952      	bls.n	8001e44 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d002      	beq.n	8001dac <HAL_SPI_Transmit+0xf2>
 8001da6:	8b7b      	ldrh	r3, [r7, #26]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d145      	bne.n	8001e38 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001db0:	881a      	ldrh	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dbc:	1c9a      	adds	r2, r3, #2
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001dd0:	e032      	b.n	8001e38 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d112      	bne.n	8001e06 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001de4:	881a      	ldrh	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001df0:	1c9a      	adds	r2, r3, #2
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001e04:	e018      	b.n	8001e38 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e06:	f7fe fd91 	bl	800092c <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d803      	bhi.n	8001e1e <HAL_SPI_Transmit+0x164>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1c:	d102      	bne.n	8001e24 <HAL_SPI_Transmit+0x16a>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d109      	bne.n	8001e38 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e0b2      	b.n	8001f9e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1c7      	bne.n	8001dd2 <HAL_SPI_Transmit+0x118>
 8001e42:	e083      	b.n	8001f4c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d002      	beq.n	8001e52 <HAL_SPI_Transmit+0x198>
 8001e4c:	8b7b      	ldrh	r3, [r7, #26]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d177      	bne.n	8001f42 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d912      	bls.n	8001e82 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e60:	881a      	ldrh	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e6c:	1c9a      	adds	r2, r3, #2
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	3b02      	subs	r3, #2
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001e80:	e05f      	b.n	8001f42 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	330c      	adds	r3, #12
 8001e8c:	7812      	ldrb	r2, [r2, #0]
 8001e8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e94:	1c5a      	adds	r2, r3, #1
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001ea8:	e04b      	b.n	8001f42 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d12b      	bne.n	8001f10 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d912      	bls.n	8001ee8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ec6:	881a      	ldrh	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ed2:	1c9a      	adds	r2, r3, #2
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	3b02      	subs	r3, #2
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001ee6:	e02c      	b.n	8001f42 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	330c      	adds	r3, #12
 8001ef2:	7812      	ldrb	r2, [r2, #0]
 8001ef4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	3b01      	subs	r3, #1
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001f0e:	e018      	b.n	8001f42 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f10:	f7fe fd0c 	bl	800092c <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d803      	bhi.n	8001f28 <HAL_SPI_Transmit+0x26e>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f26:	d102      	bne.n	8001f2e <HAL_SPI_Transmit+0x274>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d109      	bne.n	8001f42 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e02d      	b.n	8001f9e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1ae      	bne.n	8001eaa <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f4c:	69fa      	ldr	r2, [r7, #28]
 8001f4e:	6839      	ldr	r1, [r7, #0]
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f000 f947 	bl	80021e4 <SPI_EndRxTxTransaction>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10a      	bne.n	8001f80 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
  }
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3720      	adds	r7, #32
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001fb8:	f7fe fcb8 	bl	800092c <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fc0:	1a9b      	subs	r3, r3, r2
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001fc8:	f7fe fcb0 	bl	800092c <HAL_GetTick>
 8001fcc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001fce:	4b39      	ldr	r3, [pc, #228]	@ (80020b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	015b      	lsls	r3, r3, #5
 8001fd4:	0d1b      	lsrs	r3, r3, #20
 8001fd6:	69fa      	ldr	r2, [r7, #28]
 8001fd8:	fb02 f303 	mul.w	r3, r2, r3
 8001fdc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fde:	e054      	b.n	800208a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe6:	d050      	beq.n	800208a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001fe8:	f7fe fca0 	bl	800092c <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	69fa      	ldr	r2, [r7, #28]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d902      	bls.n	8001ffe <SPI_WaitFlagStateUntilTimeout+0x56>
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d13d      	bne.n	800207a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800200c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002016:	d111      	bne.n	800203c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002020:	d004      	beq.n	800202c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800202a:	d107      	bne.n	800203c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800203a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002040:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002044:	d10f      	bne.n	8002066 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002064:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e017      	b.n	80020aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	3b01      	subs	r3, #1
 8002088:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	4013      	ands	r3, r2
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	429a      	cmp	r2, r3
 8002098:	bf0c      	ite	eq
 800209a:	2301      	moveq	r3, #1
 800209c:	2300      	movne	r3, #0
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	461a      	mov	r2, r3
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d19b      	bne.n	8001fe0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3720      	adds	r7, #32
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000000 	.word	0x20000000

080020b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	@ 0x28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
 80020c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80020ca:	f7fe fc2f 	bl	800092c <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020d2:	1a9b      	subs	r3, r3, r2
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	4413      	add	r3, r2
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80020da:	f7fe fc27 	bl	800092c <HAL_GetTick>
 80020de:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	330c      	adds	r3, #12
 80020e6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80020e8:	4b3d      	ldr	r3, [pc, #244]	@ (80021e0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	00da      	lsls	r2, r3, #3
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	0d1b      	lsrs	r3, r3, #20
 80020f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020fa:	fb02 f303 	mul.w	r3, r2, r3
 80020fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002100:	e060      	b.n	80021c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002108:	d107      	bne.n	800211a <SPI_WaitFifoStateUntilTimeout+0x62>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d104      	bne.n	800211a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002118:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002120:	d050      	beq.n	80021c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002122:	f7fe fc03 	bl	800092c <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800212e:	429a      	cmp	r2, r3
 8002130:	d902      	bls.n	8002138 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002134:	2b00      	cmp	r3, #0
 8002136:	d13d      	bne.n	80021b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002146:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002150:	d111      	bne.n	8002176 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800215a:	d004      	beq.n	8002166 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002164:	d107      	bne.n	8002176 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002174:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800217e:	d10f      	bne.n	80021a0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800219e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e010      	b.n	80021d6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	3b01      	subs	r3, #1
 80021c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	4013      	ands	r3, r2
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d196      	bne.n	8002102 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3728      	adds	r7, #40	@ 0x28
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000000 	.word	0x20000000

080021e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af02      	add	r7, sp, #8
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	f7ff ff5b 	bl	80020b8 <SPI_WaitFifoStateUntilTimeout>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d007      	beq.n	8002218 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800220c:	f043 0220 	orr.w	r2, r3, #32
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e027      	b.n	8002268 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2200      	movs	r2, #0
 8002220:	2180      	movs	r1, #128	@ 0x80
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f7ff fec0 	bl	8001fa8 <SPI_WaitFlagStateUntilTimeout>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d007      	beq.n	800223e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002232:	f043 0220 	orr.w	r2, r3, #32
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e014      	b.n	8002268 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	2200      	movs	r2, #0
 8002246:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f7ff ff34 	bl	80020b8 <SPI_WaitFifoStateUntilTimeout>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d007      	beq.n	8002266 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800225a:	f043 0220 	orr.w	r2, r3, #32
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e000      	b.n	8002268 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <memset>:
 8002270:	4402      	add	r2, r0
 8002272:	4603      	mov	r3, r0
 8002274:	4293      	cmp	r3, r2
 8002276:	d100      	bne.n	800227a <memset+0xa>
 8002278:	4770      	bx	lr
 800227a:	f803 1b01 	strb.w	r1, [r3], #1
 800227e:	e7f9      	b.n	8002274 <memset+0x4>

08002280 <__libc_init_array>:
 8002280:	b570      	push	{r4, r5, r6, lr}
 8002282:	4d0d      	ldr	r5, [pc, #52]	@ (80022b8 <__libc_init_array+0x38>)
 8002284:	4c0d      	ldr	r4, [pc, #52]	@ (80022bc <__libc_init_array+0x3c>)
 8002286:	1b64      	subs	r4, r4, r5
 8002288:	10a4      	asrs	r4, r4, #2
 800228a:	2600      	movs	r6, #0
 800228c:	42a6      	cmp	r6, r4
 800228e:	d109      	bne.n	80022a4 <__libc_init_array+0x24>
 8002290:	4d0b      	ldr	r5, [pc, #44]	@ (80022c0 <__libc_init_array+0x40>)
 8002292:	4c0c      	ldr	r4, [pc, #48]	@ (80022c4 <__libc_init_array+0x44>)
 8002294:	f000 f818 	bl	80022c8 <_init>
 8002298:	1b64      	subs	r4, r4, r5
 800229a:	10a4      	asrs	r4, r4, #2
 800229c:	2600      	movs	r6, #0
 800229e:	42a6      	cmp	r6, r4
 80022a0:	d105      	bne.n	80022ae <__libc_init_array+0x2e>
 80022a2:	bd70      	pop	{r4, r5, r6, pc}
 80022a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80022a8:	4798      	blx	r3
 80022aa:	3601      	adds	r6, #1
 80022ac:	e7ee      	b.n	800228c <__libc_init_array+0xc>
 80022ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80022b2:	4798      	blx	r3
 80022b4:	3601      	adds	r6, #1
 80022b6:	e7f2      	b.n	800229e <__libc_init_array+0x1e>
 80022b8:	080023b8 	.word	0x080023b8
 80022bc:	080023b8 	.word	0x080023b8
 80022c0:	080023b8 	.word	0x080023b8
 80022c4:	080023bc 	.word	0x080023bc

080022c8 <_init>:
 80022c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ca:	bf00      	nop
 80022cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ce:	bc08      	pop	{r3}
 80022d0:	469e      	mov	lr, r3
 80022d2:	4770      	bx	lr

080022d4 <_fini>:
 80022d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022d6:	bf00      	nop
 80022d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022da:	bc08      	pop	{r3}
 80022dc:	469e      	mov	lr, r3
 80022de:	4770      	bx	lr
