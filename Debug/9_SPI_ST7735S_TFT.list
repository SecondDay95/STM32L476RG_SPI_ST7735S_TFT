
9_SPI_ST7735S_TFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b50  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003184  08008ce0  08008ce0  00009ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be64  0800be64  0000d088  2**0
                  CONTENTS
  4 .ARM          00000008  0800be64  0800be64  0000ce64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be6c  0800be6c  0000d088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be6c  0800be6c  0000ce6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800be70  0800be70  0000ce70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800be74  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a31c  20000088  0800befc  0000d088  2**2
                  ALLOC
 10 ._user_heap_stack 00002204  2000a3a4  0800befc  0000d3a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b69  00000000  00000000  0000d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038eb  00000000  00000000  00023c21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  00027510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ec1  00000000  00000000  00028870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a751  00000000  00000000  00029731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019573  00000000  00000000  00053e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001010cc  00000000  00000000  0006d3f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016e4c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005778  00000000  00000000  0016e504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00173c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008cc8 	.word	0x08008cc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08008cc8 	.word	0x08008cc8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	@ 0x28
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
 8000d6c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d6e:	4b44      	ldr	r3, [pc, #272]	@ (8000e80 <MX_ADC1_Init+0x134>)
 8000d70:	4a44      	ldr	r2, [pc, #272]	@ (8000e84 <MX_ADC1_Init+0x138>)
 8000d72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d74:	4b42      	ldr	r3, [pc, #264]	@ (8000e80 <MX_ADC1_Init+0x134>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d7a:	4b41      	ldr	r3, [pc, #260]	@ (8000e80 <MX_ADC1_Init+0x134>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d80:	4b3f      	ldr	r3, [pc, #252]	@ (8000e80 <MX_ADC1_Init+0x134>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d86:	4b3e      	ldr	r3, [pc, #248]	@ (8000e80 <MX_ADC1_Init+0x134>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d8c:	4b3c      	ldr	r3, [pc, #240]	@ (8000e80 <MX_ADC1_Init+0x134>)
 8000d8e:	2204      	movs	r2, #4
 8000d90:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d92:	4b3b      	ldr	r3, [pc, #236]	@ (8000e80 <MX_ADC1_Init+0x134>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d98:	4b39      	ldr	r3, [pc, #228]	@ (8000e80 <MX_ADC1_Init+0x134>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000d9e:	4b38      	ldr	r3, [pc, #224]	@ (8000e80 <MX_ADC1_Init+0x134>)
 8000da0:	2203      	movs	r2, #3
 8000da2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000da4:	4b36      	ldr	r3, [pc, #216]	@ (8000e80 <MX_ADC1_Init+0x134>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dac:	4b34      	ldr	r3, [pc, #208]	@ (8000e80 <MX_ADC1_Init+0x134>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000db2:	4b33      	ldr	r3, [pc, #204]	@ (8000e80 <MX_ADC1_Init+0x134>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000db8:	4b31      	ldr	r3, [pc, #196]	@ (8000e80 <MX_ADC1_Init+0x134>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000dc0:	4b2f      	ldr	r3, [pc, #188]	@ (8000e80 <MX_ADC1_Init+0x134>)
 8000dc2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000dc6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8000dc8:	4b2d      	ldr	r3, [pc, #180]	@ (8000e80 <MX_ADC1_Init+0x134>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000dd0:	4b2b      	ldr	r3, [pc, #172]	@ (8000e80 <MX_ADC1_Init+0x134>)
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000dd6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e80 <MX_ADC1_Init+0x134>)
 8000dd8:	2280      	movs	r2, #128	@ 0x80
 8000dda:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000ddc:	4b28      	ldr	r3, [pc, #160]	@ (8000e80 <MX_ADC1_Init+0x134>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000de2:	4b27      	ldr	r3, [pc, #156]	@ (8000e80 <MX_ADC1_Init+0x134>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000de8:	4825      	ldr	r0, [pc, #148]	@ (8000e80 <MX_ADC1_Init+0x134>)
 8000dea:	f001 fd25 	bl	8002838 <HAL_ADC_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000df4:	f001 f81c 	bl	8001e30 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	4619      	mov	r1, r3
 8000e02:	481f      	ldr	r0, [pc, #124]	@ (8000e80 <MX_ADC1_Init+0x134>)
 8000e04:	f002 fd60 	bl	80038c8 <HAL_ADCEx_MultiModeConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000e0e:	f001 f80f 	bl	8001e30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e12:	4b1d      	ldr	r3, [pc, #116]	@ (8000e88 <MX_ADC1_Init+0x13c>)
 8000e14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e16:	2306      	movs	r3, #6
 8000e18:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e1e:	237f      	movs	r3, #127	@ 0x7f
 8000e20:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e22:	2304      	movs	r3, #4
 8000e24:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4814      	ldr	r0, [pc, #80]	@ (8000e80 <MX_ADC1_Init+0x134>)
 8000e30:	f001 ff2c 	bl	8002c8c <HAL_ADC_ConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 8000e3a:	f000 fff9 	bl	8001e30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e3e:	4b13      	ldr	r3, [pc, #76]	@ (8000e8c <MX_ADC1_Init+0x140>)
 8000e40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e42:	230c      	movs	r3, #12
 8000e44:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	4619      	mov	r1, r3
 8000e4a:	480d      	ldr	r0, [pc, #52]	@ (8000e80 <MX_ADC1_Init+0x134>)
 8000e4c:	f001 ff1e 	bl	8002c8c <HAL_ADC_ConfigChannel>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_ADC1_Init+0x10e>
  {
    Error_Handler();
 8000e56:	f000 ffeb 	bl	8001e30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <MX_ADC1_Init+0x144>)
 8000e5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e5e:	2312      	movs	r3, #18
 8000e60:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	4619      	mov	r1, r3
 8000e66:	4806      	ldr	r0, [pc, #24]	@ (8000e80 <MX_ADC1_Init+0x134>)
 8000e68:	f001 ff10 	bl	8002c8c <HAL_ADC_ConfigChannel>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_ADC1_Init+0x12a>
  {
    Error_Handler();
 8000e72:	f000 ffdd 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	@ 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200000a4 	.word	0x200000a4
 8000e84:	50040000 	.word	0x50040000
 8000e88:	04300002 	.word	0x04300002
 8000e8c:	08600004 	.word	0x08600004
 8000e90:	0c900008 	.word	0x0c900008

08000e94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b0ac      	sub	sp, #176	@ 0xb0
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2288      	movs	r2, #136	@ 0x88
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f007 f98c 	bl	80081d2 <memset>
  if(adcHandle->Instance==ADC1)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a3c      	ldr	r2, [pc, #240]	@ (8000fb0 <HAL_ADC_MspInit+0x11c>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d171      	bne.n	8000fa8 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ec4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ec8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000eca:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ece:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000eda:	2310      	movs	r3, #16
 8000edc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000ede:	2307      	movs	r3, #7
 8000ee0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000eea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000eee:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f004 f8ef 	bl	80050d8 <HAL_RCCEx_PeriphCLKConfig>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000f00:	f000 ff96 	bl	8001e30 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f04:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb4 <HAL_ADC_MspInit+0x120>)
 8000f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f08:	4a2a      	ldr	r2, [pc, #168]	@ (8000fb4 <HAL_ADC_MspInit+0x120>)
 8000f0a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f10:	4b28      	ldr	r3, [pc, #160]	@ (8000fb4 <HAL_ADC_MspInit+0x120>)
 8000f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1c:	4b25      	ldr	r3, [pc, #148]	@ (8000fb4 <HAL_ADC_MspInit+0x120>)
 8000f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f20:	4a24      	ldr	r2, [pc, #144]	@ (8000fb4 <HAL_ADC_MspInit+0x120>)
 8000f22:	f043 0304 	orr.w	r3, r3, #4
 8000f26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f28:	4b22      	ldr	r3, [pc, #136]	@ (8000fb4 <HAL_ADC_MspInit+0x120>)
 8000f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2c:	f003 0304 	and.w	r3, r3, #4
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f34:	2307      	movs	r3, #7
 8000f36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f3a:	230b      	movs	r3, #11
 8000f3c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f46:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	481a      	ldr	r0, [pc, #104]	@ (8000fb8 <HAL_ADC_MspInit+0x124>)
 8000f4e:	f003 f875 	bl	800403c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	@ (8000fbc <HAL_ADC_MspInit+0x128>)
 8000f54:	4a1a      	ldr	r2, [pc, #104]	@ (8000fc0 <HAL_ADC_MspInit+0x12c>)
 8000f56:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000f58:	4b18      	ldr	r3, [pc, #96]	@ (8000fbc <HAL_ADC_MspInit+0x128>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f5e:	4b17      	ldr	r3, [pc, #92]	@ (8000fbc <HAL_ADC_MspInit+0x128>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f64:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <HAL_ADC_MspInit+0x128>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f6a:	4b14      	ldr	r3, [pc, #80]	@ (8000fbc <HAL_ADC_MspInit+0x128>)
 8000f6c:	2280      	movs	r2, #128	@ 0x80
 8000f6e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f70:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <HAL_ADC_MspInit+0x128>)
 8000f72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f76:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f78:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <HAL_ADC_MspInit+0x128>)
 8000f7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f7e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f80:	4b0e      	ldr	r3, [pc, #56]	@ (8000fbc <HAL_ADC_MspInit+0x128>)
 8000f82:	2220      	movs	r2, #32
 8000f84:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f86:	4b0d      	ldr	r3, [pc, #52]	@ (8000fbc <HAL_ADC_MspInit+0x128>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f8c:	480b      	ldr	r0, [pc, #44]	@ (8000fbc <HAL_ADC_MspInit+0x128>)
 8000f8e:	f002 fe5d 	bl	8003c4c <HAL_DMA_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8000f98:	f000 ff4a 	bl	8001e30 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a07      	ldr	r2, [pc, #28]	@ (8000fbc <HAL_ADC_MspInit+0x128>)
 8000fa0:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000fa2:	4a06      	ldr	r2, [pc, #24]	@ (8000fbc <HAL_ADC_MspInit+0x128>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fa8:	bf00      	nop
 8000faa:	37b0      	adds	r7, #176	@ 0xb0
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	50040000 	.word	0x50040000
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	48000800 	.word	0x48000800
 8000fbc:	20000108 	.word	0x20000108
 8000fc0:	40020008 	.word	0x40020008

08000fc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fca:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <MX_DMA_Init+0x38>)
 8000fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fce:	4a0b      	ldr	r2, [pc, #44]	@ (8000ffc <MX_DMA_Init+0x38>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000fd6:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <MX_DMA_Init+0x38>)
 8000fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2102      	movs	r1, #2
 8000fe6:	200b      	movs	r0, #11
 8000fe8:	f002 fdf9 	bl	8003bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fec:	200b      	movs	r0, #11
 8000fee:	f002 fe12 	bl	8003c16 <HAL_NVIC_EnableIRQ>

}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40021000 	.word	0x40021000

08001000 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001016:	4b28      	ldr	r3, [pc, #160]	@ (80010b8 <MX_GPIO_Init+0xb8>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101a:	4a27      	ldr	r2, [pc, #156]	@ (80010b8 <MX_GPIO_Init+0xb8>)
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001022:	4b25      	ldr	r3, [pc, #148]	@ (80010b8 <MX_GPIO_Init+0xb8>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001026:	f003 0304 	and.w	r3, r3, #4
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	4b22      	ldr	r3, [pc, #136]	@ (80010b8 <MX_GPIO_Init+0xb8>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001032:	4a21      	ldr	r2, [pc, #132]	@ (80010b8 <MX_GPIO_Init+0xb8>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800103a:	4b1f      	ldr	r3, [pc, #124]	@ (80010b8 <MX_GPIO_Init+0xb8>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	4b1c      	ldr	r3, [pc, #112]	@ (80010b8 <MX_GPIO_Init+0xb8>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104a:	4a1b      	ldr	r2, [pc, #108]	@ (80010b8 <MX_GPIO_Init+0xb8>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001052:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <MX_GPIO_Init+0xb8>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	f640 0104 	movw	r1, #2052	@ 0x804
 8001064:	4815      	ldr	r0, [pc, #84]	@ (80010bc <MX_GPIO_Init+0xbc>)
 8001066:	f003 f9ab 	bl	80043c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800106a:	2201      	movs	r2, #1
 800106c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001070:	4812      	ldr	r0, [pc, #72]	@ (80010bc <MX_GPIO_Init+0xbc>)
 8001072:	f003 f9a5 	bl	80043c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_SHOT_Pin;
 8001076:	2301      	movs	r3, #1
 8001078:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107e:	2301      	movs	r3, #1
 8001080:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_SHOT_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	4619      	mov	r1, r3
 8001088:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800108c:	f002 ffd6 	bl	800403c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8001090:	f641 0304 	movw	r3, #6148	@ 0x1804
 8001094:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001096:	2301      	movs	r3, #1
 8001098:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	4619      	mov	r1, r3
 80010a8:	4804      	ldr	r0, [pc, #16]	@ (80010bc <MX_GPIO_Init+0xbc>)
 80010aa:	f002 ffc7 	bl	800403c <HAL_GPIO_Init>

}
 80010ae:	bf00      	nop
 80010b0:	3720      	adds	r7, #32
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000
 80010bc:	48000400 	.word	0x48000400

080010c0 <lcd_cmd>:
//dane o kolorach wszystkich pikseli):
static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];

//Funkcja wysylajaca komende do wyswietlacza (static oznacza ze funkcja nie jest widoczna
//w innych plikach, a ta funkcja bedzie uzywana tylko w tym pliku):
static void lcd_cmd(uint8_t cmd) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]

	//Ustawienie stanu niskiego na linii DC oznacza ze wysylamy komende:
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010d0:	480c      	ldr	r0, [pc, #48]	@ (8001104 <lcd_cmd+0x44>)
 80010d2:	f003 f975 	bl	80043c0 <HAL_GPIO_WritePin>
	//Ustawienie stanu niskiego na linii CS oznacza ze rozpoczynamy komunikacje SPI:
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010dc:	4809      	ldr	r0, [pc, #36]	@ (8001104 <lcd_cmd+0x44>)
 80010de:	f003 f96f 	bl	80043c0 <HAL_GPIO_WritePin>
	//Wyslanie komendy przekazanej do funkcji:
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 80010e2:	1df9      	adds	r1, r7, #7
 80010e4:	f04f 33ff 	mov.w	r3, #4294967295
 80010e8:	2201      	movs	r2, #1
 80010ea:	4807      	ldr	r0, [pc, #28]	@ (8001108 <lcd_cmd+0x48>)
 80010ec:	f004 fd63 	bl	8005bb6 <HAL_SPI_Transmit>
	//Ustawienie stanu wysokiego na linii CS oznacza ze konczymy komunikacje SPI:
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010f6:	4803      	ldr	r0, [pc, #12]	@ (8001104 <lcd_cmd+0x44>)
 80010f8:	f003 f962 	bl	80043c0 <HAL_GPIO_WritePin>

}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	48000400 	.word	0x48000400
 8001108:	2000a164 	.word	0x2000a164

0800110c <lcd_data>:

//Funkcja wysylajaca 8-bitow dane do wyswietlacza:
static void lcd_data(uint8_t data) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]

	//Ustawienie stanu wysokiego na linii DC oznacza ze wysylamy dane:
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800111c:	480c      	ldr	r0, [pc, #48]	@ (8001150 <lcd_data+0x44>)
 800111e:	f003 f94f 	bl	80043c0 <HAL_GPIO_WritePin>
	//Ustawienie stanu niskiego na linii CS oznacza ze rozpoczynamy komunikacje SPI:
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001128:	4809      	ldr	r0, [pc, #36]	@ (8001150 <lcd_data+0x44>)
 800112a:	f003 f949 	bl	80043c0 <HAL_GPIO_WritePin>
	//Wyslanie danych przekazanych do funkcji:
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 800112e:	1df9      	adds	r1, r7, #7
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	2201      	movs	r2, #1
 8001136:	4807      	ldr	r0, [pc, #28]	@ (8001154 <lcd_data+0x48>)
 8001138:	f004 fd3d 	bl	8005bb6 <HAL_SPI_Transmit>
	//Ustawienie stanu wysokiego na linii CS oznacza ze konczymy komunikacje SPI:
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800113c:	2201      	movs	r2, #1
 800113e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001142:	4803      	ldr	r0, [pc, #12]	@ (8001150 <lcd_data+0x44>)
 8001144:	f003 f93c 	bl	80043c0 <HAL_GPIO_WritePin>

}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	48000400 	.word	0x48000400
 8001154:	2000a164 	.word	0x2000a164

08001158 <lcd_data16>:

//Funkcja wysylajaca 16-bitowe dane do wyswietlacza (najpierw wysylany jest bardziej
//znaczacy bajt, z pozniej mniej znaczacy):
static void lcd_data16(uint16_t value) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	80fb      	strh	r3, [r7, #6]

	//Wyslanie bardziej znaczacego bajtu:
	lcd_data(value >> 8);
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	0a1b      	lsrs	r3, r3, #8
 8001166:	b29b      	uxth	r3, r3
 8001168:	b2db      	uxtb	r3, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ffce 	bl	800110c <lcd_data>
	//Wyslanie mniej znaczacego bajtu:
	lcd_data(value);
 8001170:	88fb      	ldrh	r3, [r7, #6]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ffc9 	bl	800110c <lcd_data>

}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <lcd_send>:

//Funkcja wysylajaca przekazywana wartosc jako komenda lub jako dane. Funkcja jako argument
//przyjmuje wartosc 16-bitowa. Na 9 bicie znajduje sie bit który oznacza czy wartosc bedzie
//wysylana jako komenda czy jako dane (1 - komenda, 0 - dane):
static void lcd_send(uint16_t value) {
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	80fb      	strh	r3, [r7, #6]

	//Sprawdzenie czy wartosc ma byc wyslana jako komenda
	if(value & 0x100) {
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001192:	2b00      	cmp	r3, #0
 8001194:	d005      	beq.n	80011a2 <lcd_send+0x20>
		lcd_cmd(value);
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ff90 	bl	80010c0 <lcd_cmd>
	//W przeciwnym razie wartosc jest wysylana jako dane:
	else {
		lcd_data(value);
	}

}
 80011a0:	e004      	b.n	80011ac <lcd_send+0x2a>
		lcd_data(value);
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ffb0 	bl	800110c <lcd_data>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <lcd_init>:

//Funkcja realizujaca inicjalizacje wyswietlacza (nie jest oznaczona jako statyczna,
//poniewaz bedzie wywolywana w pliku main.c):
void lcd_init(void) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0

	int i;

	//Reset sterownika wyswietlacza:
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2104      	movs	r1, #4
 80011be:	4817      	ldr	r0, [pc, #92]	@ (800121c <lcd_init+0x68>)
 80011c0:	f003 f8fe 	bl	80043c0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80011c4:	2064      	movs	r0, #100	@ 0x64
 80011c6:	f001 f917 	bl	80023f8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80011ca:	2201      	movs	r2, #1
 80011cc:	2104      	movs	r1, #4
 80011ce:	4813      	ldr	r0, [pc, #76]	@ (800121c <lcd_init+0x68>)
 80011d0:	f003 f8f6 	bl	80043c0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80011d4:	2064      	movs	r0, #100	@ 0x64
 80011d6:	f001 f90f 	bl	80023f8 <HAL_Delay>

	//Wysylanie danych z tablicy do realizacji poczatkowej inicjalizacji wyswietlacza:
	for(i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	e009      	b.n	80011f4 <lcd_init+0x40>
		lcd_send(init_table[i]);
 80011e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001220 <lcd_init+0x6c>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ffca 	bl	8001182 <lcd_send>
	for(i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3301      	adds	r3, #1
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b4b      	cmp	r3, #75	@ 0x4b
 80011f8:	d9f2      	bls.n	80011e0 <lcd_init+0x2c>
	}

	HAL_Delay(200);
 80011fa:	20c8      	movs	r0, #200	@ 0xc8
 80011fc:	f001 f8fc 	bl	80023f8 <HAL_Delay>

	//Obudzenie wyswietlacza z trybu uspienia:
	lcd_cmd(ST7735S_SLPOUT);
 8001200:	2011      	movs	r0, #17
 8001202:	f7ff ff5d 	bl	80010c0 <lcd_cmd>

	HAL_Delay(120);
 8001206:	2078      	movs	r0, #120	@ 0x78
 8001208:	f001 f8f6 	bl	80023f8 <HAL_Delay>

	//Wlaczenie wyswietlacza:
	lcd_cmd(ST7735S_DISPON);
 800120c:	2029      	movs	r0, #41	@ 0x29
 800120e:	f7ff ff57 	bl	80010c0 <lcd_cmd>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	48000400 	.word	0x48000400
 8001220:	08008d98 	.word	0x08008d98

08001224 <lcd_set_window>:

//Definicja okna które bedzie rysowane na wyswietlaczu:
static void lcd_set_window(int x, int y, int width, int height)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 8001232:	202a      	movs	r0, #42	@ 0x2a
 8001234:	f7ff ff44 	bl	80010c0 <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	b29b      	uxth	r3, r3
 800123c:	3301      	adds	r3, #1
 800123e:	b29b      	uxth	r3, r3
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff89 	bl	8001158 <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	b29a      	uxth	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	b29b      	uxth	r3, r3
 800124e:	4413      	add	r3, r2
 8001250:	b29b      	uxth	r3, r3
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ff80 	bl	8001158 <lcd_data16>

  lcd_cmd(ST7735S_RASET);
 8001258:	202b      	movs	r0, #43	@ 0x2b
 800125a:	f7ff ff31 	bl	80010c0 <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	b29b      	uxth	r3, r3
 8001262:	3302      	adds	r3, #2
 8001264:	b29b      	uxth	r3, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ff76 	bl	8001158 <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	b29a      	uxth	r2, r3
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	b29b      	uxth	r3, r3
 8001274:	4413      	add	r3, r2
 8001276:	b29b      	uxth	r3, r3
 8001278:	3301      	adds	r3, #1
 800127a:	b29b      	uxth	r3, r3
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff6b 	bl	8001158 <lcd_data16>
}
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <lcd_put_pixel>:
	lcd_fill_box(x, y, 1, 1, color);
}
*/

//Funkcaj gromadzaca dane o kolorze pojedynczych pixeli w buforze:
void lcd_put_pixel(int x, int y, uint16_t color) {
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	4613      	mov	r3, r2
 8001298:	80fb      	strh	r3, [r7, #6]

	frame_buffer[x + y * LCD_WIDTH] = color;
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	4613      	mov	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	015b      	lsls	r3, r3, #5
 80012a4:	461a      	mov	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4413      	add	r3, r2
 80012aa:	4905      	ldr	r1, [pc, #20]	@ (80012c0 <lcd_put_pixel+0x34>)
 80012ac:	88fa      	ldrh	r2, [r7, #6]
 80012ae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80012b2:	bf00      	nop
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000150 	.word	0x20000150

080012c4 <lcd_copy>:
}
*/


//Funkcja kopiujaca zawartosc bufora do wyswietlacza:
void lcd_copy(void) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0

	//Wyslanie danych o kolorach dla pojedynczych pixeli do wyswietlacza:
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80012c8:	2380      	movs	r3, #128	@ 0x80
 80012ca:	22a0      	movs	r2, #160	@ 0xa0
 80012cc:	2100      	movs	r1, #0
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff ffa8 	bl	8001224 <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 80012d4:	202c      	movs	r0, #44	@ 0x2c
 80012d6:	f7ff fef3 	bl	80010c0 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80012da:	2201      	movs	r2, #1
 80012dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012e0:	480c      	ldr	r0, [pc, #48]	@ (8001314 <lcd_copy+0x50>)
 80012e2:	f003 f86d 	bl	80043c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012ec:	4809      	ldr	r0, [pc, #36]	@ (8001314 <lcd_copy+0x50>)
 80012ee:	f003 f867 	bl	80043c0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
 80012f6:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 80012fa:	4907      	ldr	r1, [pc, #28]	@ (8001318 <lcd_copy+0x54>)
 80012fc:	4807      	ldr	r0, [pc, #28]	@ (800131c <lcd_copy+0x58>)
 80012fe:	f004 fc5a 	bl	8005bb6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001308:	4802      	ldr	r0, [pc, #8]	@ (8001314 <lcd_copy+0x50>)
 800130a:	f003 f859 	bl	80043c0 <HAL_GPIO_WritePin>

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	48000400 	.word	0x48000400
 8001318:	20000150 	.word	0x20000150
 800131c:	2000a164 	.word	0x2000a164

08001320 <lcd_is_busy>:
{
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
}

//Funkcja sprawdzajaca czy transmisja SPI dalej trwa:
bool lcd_is_busy(void) {
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0

	if(HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_BUSY) {
 8001324:	4805      	ldr	r0, [pc, #20]	@ (800133c <lcd_is_busy+0x1c>)
 8001326:	f004 fdbc 	bl	8005ea2 <HAL_SPI_GetState>
 800132a:	4603      	mov	r3, r0
 800132c:	2b02      	cmp	r3, #2
 800132e:	d101      	bne.n	8001334 <lcd_is_busy+0x14>
		return true;
 8001330:	2301      	movs	r3, #1
 8001332:	e000      	b.n	8001336 <lcd_is_busy+0x16>
	}
	else {
		return false;
 8001334:	2300      	movs	r3, #0
	}

}
 8001336:	4618      	mov	r0, r3
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000a164 	.word	0x2000a164

08001340 <draw_pitch>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t test_image[64 * 64];

static void draw_pitch(short radius) {
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b085      	sub	sp, #20
 8001344:	af02      	add	r7, sp, #8
 8001346:	4603      	mov	r3, r0
 8001348:	80fb      	strh	r3, [r7, #6]

	hagl_set_clip_window(left_goal_left_edge - 10, pitch_up_edge,
 800134a:	2314      	movs	r3, #20
 800134c:	b29b      	uxth	r3, r3
 800134e:	3b0a      	subs	r3, #10
 8001350:	b298      	uxth	r0, r3
 8001352:	2332      	movs	r3, #50	@ 0x32
 8001354:	b299      	uxth	r1, r3
 8001356:	238c      	movs	r3, #140	@ 0x8c
 8001358:	b29b      	uxth	r3, r3
 800135a:	330a      	adds	r3, #10
 800135c:	b29a      	uxth	r2, r3
 800135e:	236e      	movs	r3, #110	@ 0x6e
 8001360:	b29b      	uxth	r3, r3
 8001362:	f005 ff0b 	bl	800717c <hagl_set_clip_window>
			right_goal_right_edge + 10, pitch_down_edge);
	hagl_clear_clip_window();
 8001366:	f006 fafd 	bl	8007964 <hagl_clear_clip_window>
	hagl_draw_rectangle(pitch_left_edge, pitch_up_edge, pitch_right_edge,
 800136a:	201e      	movs	r0, #30
 800136c:	2132      	movs	r1, #50	@ 0x32
 800136e:	2282      	movs	r2, #130	@ 0x82
 8001370:	246e      	movs	r4, #110	@ 0x6e
 8001372:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	4623      	mov	r3, r4
 800137a:	f006 f843 	bl	8007404 <hagl_draw_rectangle>
			pitch_down_edge, WHITE);
	hagl_draw_rectangle(left_goal_left_edge, left_goal_up_edge, left_goal_right_edge,
 800137e:	2014      	movs	r0, #20
 8001380:	2141      	movs	r1, #65	@ 0x41
 8001382:	221e      	movs	r2, #30
 8001384:	245f      	movs	r4, #95	@ 0x5f
 8001386:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	4623      	mov	r3, r4
 800138e:	f006 f839 	bl	8007404 <hagl_draw_rectangle>
			left_goal_down_edge, WHITE);
	hagl_draw_rectangle(right_goal_left_edge, right_goal_up_edge, right_goal_right_edge,
 8001392:	2082      	movs	r0, #130	@ 0x82
 8001394:	2141      	movs	r1, #65	@ 0x41
 8001396:	228c      	movs	r2, #140	@ 0x8c
 8001398:	245f      	movs	r4, #95	@ 0x5f
 800139a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	4623      	mov	r3, r4
 80013a2:	f006 f82f 	bl	8007404 <hagl_draw_rectangle>
			right_goal_down_edge, WHITE);
	hagl_fill_circle(circle_position_x, circle_position_y, radius, GREEN);
 80013a6:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <draw_pitch+0xa0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	b218      	sxth	r0, r3
 80013ac:	4b0d      	ldr	r3, [pc, #52]	@ (80013e4 <draw_pitch+0xa4>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	b219      	sxth	r1, r3
 80013b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80013b6:	f24e 0307 	movw	r3, #57351	@ 0xe007
 80013ba:	f006 faed 	bl	8007998 <hagl_fill_circle>
	hagl_fill_circle(ball_position_x, ball_position_y, ball_radius, BLUE);
 80013be:	4b0a      	ldr	r3, [pc, #40]	@ (80013e8 <draw_pitch+0xa8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	b218      	sxth	r0, r3
 80013c4:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <draw_pitch+0xac>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	b219      	sxth	r1, r3
 80013ca:	2202      	movs	r2, #2
 80013cc:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80013d0:	f006 fae2 	bl	8007998 <hagl_fill_circle>
	lcd_copy();
 80013d4:	f7ff ff76 	bl	80012c4 <lcd_copy>

}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd90      	pop	{r4, r7, pc}
 80013e0:	20000008 	.word	0x20000008
 80013e4:	2000000c 	.word	0x2000000c
 80013e8:	20000010 	.word	0x20000010
 80013ec:	20000014 	.word	0x20000014

080013f0 <shot_goal>:

static void shot_goal() {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af02      	add	r7, sp, #8

	hagl_put_text(L"GOAL", 68, 75, YELLOW, font6x9);
 80013f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001434 <shot_goal+0x44>)
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	f24e 03ff 	movw	r3, #57599	@ 0xe0ff
 80013fe:	224b      	movs	r2, #75	@ 0x4b
 8001400:	2144      	movs	r1, #68	@ 0x44
 8001402:	480d      	ldr	r0, [pc, #52]	@ (8001438 <shot_goal+0x48>)
 8001404:	f006 fa26 	bl	8007854 <hagl_put_text>
	lcd_copy();
 8001408:	f7ff ff5c 	bl	80012c4 <lcd_copy>
	HAL_Delay(1000);
 800140c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001410:	f000 fff2 	bl	80023f8 <HAL_Delay>
	circle_position_x = 80;
 8001414:	4b09      	ldr	r3, [pc, #36]	@ (800143c <shot_goal+0x4c>)
 8001416:	2250      	movs	r2, #80	@ 0x50
 8001418:	601a      	str	r2, [r3, #0]
	circle_position_y = 60;
 800141a:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <shot_goal+0x50>)
 800141c:	223c      	movs	r2, #60	@ 0x3c
 800141e:	601a      	str	r2, [r3, #0]
	ball_position_x = 80;
 8001420:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <shot_goal+0x54>)
 8001422:	2250      	movs	r2, #80	@ 0x50
 8001424:	601a      	str	r2, [r3, #0]
	ball_position_y = 80;
 8001426:	4b08      	ldr	r3, [pc, #32]	@ (8001448 <shot_goal+0x58>)
 8001428:	2250      	movs	r2, #80	@ 0x50
 800142a:	601a      	str	r2, [r3, #0]

}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	08008e30 	.word	0x08008e30
 8001438:	08008ce0 	.word	0x08008ce0
 800143c:	20000008 	.word	0x20000008
 8001440:	2000000c 	.word	0x2000000c
 8001444:	20000010 	.word	0x20000010
 8001448:	20000014 	.word	0x20000014

0800144c <__io_putchar>:
	hagl_put_text(&result_right_char, 90, 111, YELLOW, font6x9);
	lcd_copy();
}

int __io_putchar(int ch)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b0a      	cmp	r3, #10
 8001458:	d102      	bne.n	8001460 <__io_putchar+0x14>
    __io_putchar('\r');
 800145a:	200d      	movs	r0, #13
 800145c:	f7ff fff6 	bl	800144c <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001460:	1d39      	adds	r1, r7, #4
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	2201      	movs	r2, #1
 8001468:	4803      	ldr	r0, [pc, #12]	@ (8001478 <__io_putchar+0x2c>)
 800146a:	f004 fedb 	bl	8006224 <HAL_UART_Transmit>

  return 1;
 800146e:	2301      	movs	r3, #1
}
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	2000a1cc 	.word	0x2000a1cc
 800147c:	00000000 	.word	0x00000000

08001480 <draw_progress_bar>:
		lcd_transfer_done();

	}
}
uint32_t last_fotoresistor_value = 0;
void draw_progress_bar(uint32_t fotoresistor_value) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af02      	add	r7, sp, #8
 8001486:	6078      	str	r0, [r7, #4]

	int y;
	y = 0.09 * fotoresistor_value - 2.7;
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff f833 	bl	80004f4 <__aeabi_ui2d>
 800148e:	a32b      	add	r3, pc, #172	@ (adr r3, 800153c <draw_progress_bar+0xbc>)
 8001490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001494:	f7ff f8a8 	bl	80005e8 <__aeabi_dmul>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	a328      	add	r3, pc, #160	@ (adr r3, 8001544 <draw_progress_bar+0xc4>)
 80014a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a6:	f7fe fee7 	bl	8000278 <__aeabi_dsub>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4610      	mov	r0, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	f7ff faab 	bl	8000a0c <__aeabi_d2iz>
 80014b6:	4603      	mov	r3, r0
 80014b8:	60fb      	str	r3, [r7, #12]
	if(y >= 100)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2b63      	cmp	r3, #99	@ 0x63
 80014be:	dd01      	ble.n	80014c4 <draw_progress_bar+0x44>
		y = 99;
 80014c0:	2363      	movs	r3, #99	@ 0x63
 80014c2:	60fb      	str	r3, [r7, #12]
	if(y < 0)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	da01      	bge.n	80014ce <draw_progress_bar+0x4e>
		y = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
	while (lcd_is_busy()) {}
 80014ce:	bf00      	nop
 80014d0:	f7ff ff26 	bl	8001320 <lcd_is_busy>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1fa      	bne.n	80014d0 <draw_progress_bar+0x50>
	hagl_set_clip_window(0, 0, 159, 127);
 80014da:	237f      	movs	r3, #127	@ 0x7f
 80014dc:	229f      	movs	r2, #159	@ 0x9f
 80014de:	2100      	movs	r1, #0
 80014e0:	2000      	movs	r0, #0
 80014e2:	f005 fe4b 	bl	800717c <hagl_set_clip_window>
	//hagl_clear_clip_window();
	if(fotoresistor_value >= last_fotoresistor_value) {
 80014e6:	4b14      	ldr	r3, [pc, #80]	@ (8001538 <draw_progress_bar+0xb8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d30d      	bcc.n	800150c <draw_progress_bar+0x8c>
		//hagl_set_clip_window(30, 50, 28, 40);
		hagl_fill_rectangle(31, 39, 29 + y, 31, YELLOW);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	331d      	adds	r3, #29
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	f24e 03ff 	movw	r3, #57599	@ 0xe0ff
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	231f      	movs	r3, #31
 8001502:	2127      	movs	r1, #39	@ 0x27
 8001504:	201f      	movs	r0, #31
 8001506:	f006 f803 	bl	8007510 <hagl_fill_rectangle>
 800150a:	e00b      	b.n	8001524 <draw_progress_bar+0xa4>
	}
	else {
		//hagl_set_clip_window(29 + y, 49, 128, 41);
		hagl_fill_rectangle(29 + y, 39, 128, 31, BLACK);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	b29b      	uxth	r3, r3
 8001510:	331d      	adds	r3, #29
 8001512:	b29b      	uxth	r3, r3
 8001514:	b218      	sxth	r0, r3
 8001516:	2300      	movs	r3, #0
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	231f      	movs	r3, #31
 800151c:	2280      	movs	r2, #128	@ 0x80
 800151e:	2127      	movs	r1, #39	@ 0x27
 8001520:	f005 fff6 	bl	8007510 <hagl_fill_rectangle>
	}
	lcd_copy();
 8001524:	f7ff fece 	bl	80012c4 <lcd_copy>
	last_fotoresistor_value = fotoresistor_value;
 8001528:	4a03      	ldr	r2, [pc, #12]	@ (8001538 <draw_progress_bar+0xb8>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6013      	str	r3, [r2, #0]

}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	2000a158 	.word	0x2000a158
 800153c:	70a3d70a 	.word	0x70a3d70a
 8001540:	3fb70a3d 	.word	0x3fb70a3d
 8001544:	9999999a 	.word	0x9999999a
 8001548:	40059999 	.word	0x40059999
 800154c:	00000000 	.word	0x00000000

08001550 <control_circle>:


uint32_t last_potentiometer_x;
uint32_t last_potentiometer_y;
void control_circle(uint32_t potentiometer_x, uint32_t potentiometer_y) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]

	//y1 = 0.037 * potentiometer_x + 4.188;
	y1 = 0.022 * potentiometer_x + 35;
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7fe ffca 	bl	80004f4 <__aeabi_ui2d>
 8001560:	a3af      	add	r3, pc, #700	@ (adr r3, 8001820 <control_circle+0x2d0>)
 8001562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001566:	f7ff f83f 	bl	80005e8 <__aeabi_dmul>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	4ba2      	ldr	r3, [pc, #648]	@ (8001800 <control_circle+0x2b0>)
 8001578:	f7fe fe80 	bl	800027c <__adddf3>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4610      	mov	r0, r2
 8001582:	4619      	mov	r1, r3
 8001584:	f7ff fa42 	bl	8000a0c <__aeabi_d2iz>
 8001588:	4603      	mov	r3, r0
 800158a:	4a9e      	ldr	r2, [pc, #632]	@ (8001804 <control_circle+0x2b4>)
 800158c:	6013      	str	r3, [r2, #0]
	//y2 = 0.029 * potentiometer_y + 4.796;
	//y2 = 0.0098 * potentiometer_y + 65;
	y2 = 0.0123 * potentiometer_y + 55;
 800158e:	6838      	ldr	r0, [r7, #0]
 8001590:	f7fe ffb0 	bl	80004f4 <__aeabi_ui2d>
 8001594:	a398      	add	r3, pc, #608	@ (adr r3, 80017f8 <control_circle+0x2a8>)
 8001596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159a:	f7ff f825 	bl	80005e8 <__aeabi_dmul>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	4b97      	ldr	r3, [pc, #604]	@ (8001808 <control_circle+0x2b8>)
 80015ac:	f7fe fe66 	bl	800027c <__adddf3>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	f7ff fa28 	bl	8000a0c <__aeabi_d2iz>
 80015bc:	4603      	mov	r3, r0
 80015be:	4a93      	ldr	r2, [pc, #588]	@ (800180c <control_circle+0x2bc>)
 80015c0:	6013      	str	r3, [r2, #0]

	while(lcd_is_busy()){}
 80015c2:	bf00      	nop
 80015c4:	f7ff feac 	bl	8001320 <lcd_is_busy>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1fa      	bne.n	80015c4 <control_circle+0x74>

	if(circle_position_y + circle_radius <= ball_position_y - ball_radius   ||
 80015ce:	2303      	movs	r3, #3
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b8f      	ldr	r3, [pc, #572]	@ (8001810 <control_circle+0x2c0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	441a      	add	r2, r3
 80015d8:	4b8e      	ldr	r3, [pc, #568]	@ (8001814 <control_circle+0x2c4>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2102      	movs	r1, #2
 80015de:	1a5b      	subs	r3, r3, r1
 80015e0:	429a      	cmp	r2, r3
 80015e2:	dd3c      	ble.n	800165e <control_circle+0x10e>
		circle_position_y - circle_radius >= ball_position_y + ball_radius  ||
 80015e4:	4b8a      	ldr	r3, [pc, #552]	@ (8001810 <control_circle+0x2c0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2203      	movs	r2, #3
 80015ea:	1a9a      	subs	r2, r3, r2
 80015ec:	2302      	movs	r3, #2
 80015ee:	4619      	mov	r1, r3
 80015f0:	4b88      	ldr	r3, [pc, #544]	@ (8001814 <control_circle+0x2c4>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	440b      	add	r3, r1
	if(circle_position_y + circle_radius <= ball_position_y - ball_radius   ||
 80015f6:	429a      	cmp	r2, r3
 80015f8:	da31      	bge.n	800165e <control_circle+0x10e>
		((circle_position_y + circle_radius > ball_position_y - ball_radius ||
 80015fa:	2303      	movs	r3, #3
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b84      	ldr	r3, [pc, #528]	@ (8001810 <control_circle+0x2c0>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	441a      	add	r2, r3
 8001604:	4b83      	ldr	r3, [pc, #524]	@ (8001814 <control_circle+0x2c4>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2102      	movs	r1, #2
 800160a:	1a5b      	subs	r3, r3, r1
		circle_position_y - circle_radius >= ball_position_y + ball_radius  ||
 800160c:	429a      	cmp	r2, r3
 800160e:	dc10      	bgt.n	8001632 <control_circle+0xe2>
		circle_position_y - circle_radius < ball_position_y + ball_radius   ||
 8001610:	4b7f      	ldr	r3, [pc, #508]	@ (8001810 <control_circle+0x2c0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2203      	movs	r2, #3
 8001616:	1a9a      	subs	r2, r3, r2
 8001618:	2302      	movs	r3, #2
 800161a:	4619      	mov	r1, r3
 800161c:	4b7d      	ldr	r3, [pc, #500]	@ (8001814 <control_circle+0x2c4>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	440b      	add	r3, r1
		((circle_position_y + circle_radius > ball_position_y - ball_radius ||
 8001622:	429a      	cmp	r2, r3
 8001624:	db05      	blt.n	8001632 <control_circle+0xe2>
		circle_position_y == ball_position_y)				                &&
 8001626:	4b7a      	ldr	r3, [pc, #488]	@ (8001810 <control_circle+0x2c0>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	4b7a      	ldr	r3, [pc, #488]	@ (8001814 <control_circle+0x2c4>)
 800162c:	681b      	ldr	r3, [r3, #0]
		circle_position_y - circle_radius < ball_position_y + ball_radius   ||
 800162e:	429a      	cmp	r2, r3
 8001630:	d122      	bne.n	8001678 <control_circle+0x128>
		(circle_position_x + circle_radius < ball_position_x - ball_radius  ||
 8001632:	2303      	movs	r3, #3
 8001634:	461a      	mov	r2, r3
 8001636:	4b78      	ldr	r3, [pc, #480]	@ (8001818 <control_circle+0x2c8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	441a      	add	r2, r3
 800163c:	4b77      	ldr	r3, [pc, #476]	@ (800181c <control_circle+0x2cc>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2102      	movs	r1, #2
 8001642:	1a5b      	subs	r3, r3, r1
		circle_position_y == ball_position_y)				                &&
 8001644:	429a      	cmp	r2, r3
 8001646:	db0a      	blt.n	800165e <control_circle+0x10e>
		circle_position_x - circle_radius >= ball_position_x + ball_radius))) {
 8001648:	4b73      	ldr	r3, [pc, #460]	@ (8001818 <control_circle+0x2c8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2203      	movs	r2, #3
 800164e:	1a9a      	subs	r2, r3, r2
 8001650:	2302      	movs	r3, #2
 8001652:	4619      	mov	r1, r3
 8001654:	4b71      	ldr	r3, [pc, #452]	@ (800181c <control_circle+0x2cc>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	440b      	add	r3, r1
		(circle_position_x + circle_radius < ball_position_x - ball_radius  ||
 800165a:	429a      	cmp	r2, r3
 800165c:	db0c      	blt.n	8001678 <control_circle+0x128>

		if(y1 > 78 && circle_position_x < 125) {
 800165e:	4b69      	ldr	r3, [pc, #420]	@ (8001804 <control_circle+0x2b4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b4e      	cmp	r3, #78	@ 0x4e
 8001664:	dd08      	ble.n	8001678 <control_circle+0x128>
 8001666:	4b6c      	ldr	r3, [pc, #432]	@ (8001818 <control_circle+0x2c8>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b7c      	cmp	r3, #124	@ 0x7c
 800166c:	dc04      	bgt.n	8001678 <control_circle+0x128>

			circle_position_x ++;
 800166e:	4b6a      	ldr	r3, [pc, #424]	@ (8001818 <control_circle+0x2c8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	3301      	adds	r3, #1
 8001674:	4a68      	ldr	r2, [pc, #416]	@ (8001818 <control_circle+0x2c8>)
 8001676:	6013      	str	r3, [r2, #0]

		}
	}
	if(circle_position_y + circle_radius <= ball_position_y - ball_radius   ||
 8001678:	2303      	movs	r3, #3
 800167a:	461a      	mov	r2, r3
 800167c:	4b64      	ldr	r3, [pc, #400]	@ (8001810 <control_circle+0x2c0>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	441a      	add	r2, r3
 8001682:	4b64      	ldr	r3, [pc, #400]	@ (8001814 <control_circle+0x2c4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2102      	movs	r1, #2
 8001688:	1a5b      	subs	r3, r3, r1
 800168a:	429a      	cmp	r2, r3
 800168c:	dd3c      	ble.n	8001708 <control_circle+0x1b8>
		circle_position_y - circle_radius >= ball_position_y + ball_radius  ||
 800168e:	4b60      	ldr	r3, [pc, #384]	@ (8001810 <control_circle+0x2c0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2203      	movs	r2, #3
 8001694:	1a9a      	subs	r2, r3, r2
 8001696:	2302      	movs	r3, #2
 8001698:	4619      	mov	r1, r3
 800169a:	4b5e      	ldr	r3, [pc, #376]	@ (8001814 <control_circle+0x2c4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	440b      	add	r3, r1
	if(circle_position_y + circle_radius <= ball_position_y - ball_radius   ||
 80016a0:	429a      	cmp	r2, r3
 80016a2:	da31      	bge.n	8001708 <control_circle+0x1b8>
		((circle_position_y + circle_radius > ball_position_y - ball_radius ||
 80016a4:	2303      	movs	r3, #3
 80016a6:	461a      	mov	r2, r3
 80016a8:	4b59      	ldr	r3, [pc, #356]	@ (8001810 <control_circle+0x2c0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	441a      	add	r2, r3
 80016ae:	4b59      	ldr	r3, [pc, #356]	@ (8001814 <control_circle+0x2c4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2102      	movs	r1, #2
 80016b4:	1a5b      	subs	r3, r3, r1
		circle_position_y - circle_radius >= ball_position_y + ball_radius  ||
 80016b6:	429a      	cmp	r2, r3
 80016b8:	dc10      	bgt.n	80016dc <control_circle+0x18c>
		circle_position_y - circle_radius < ball_position_y + ball_radius   ||
 80016ba:	4b55      	ldr	r3, [pc, #340]	@ (8001810 <control_circle+0x2c0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2203      	movs	r2, #3
 80016c0:	1a9a      	subs	r2, r3, r2
 80016c2:	2302      	movs	r3, #2
 80016c4:	4619      	mov	r1, r3
 80016c6:	4b53      	ldr	r3, [pc, #332]	@ (8001814 <control_circle+0x2c4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	440b      	add	r3, r1
		((circle_position_y + circle_radius > ball_position_y - ball_radius ||
 80016cc:	429a      	cmp	r2, r3
 80016ce:	db05      	blt.n	80016dc <control_circle+0x18c>
		circle_position_y == ball_position_y)				                &&
 80016d0:	4b4f      	ldr	r3, [pc, #316]	@ (8001810 <control_circle+0x2c0>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b4f      	ldr	r3, [pc, #316]	@ (8001814 <control_circle+0x2c4>)
 80016d6:	681b      	ldr	r3, [r3, #0]
		circle_position_y - circle_radius < ball_position_y + ball_radius   ||
 80016d8:	429a      	cmp	r2, r3
 80016da:	d122      	bne.n	8001722 <control_circle+0x1d2>
		(circle_position_x - circle_radius > ball_position_x + ball_radius  ||
 80016dc:	4b4e      	ldr	r3, [pc, #312]	@ (8001818 <control_circle+0x2c8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2203      	movs	r2, #3
 80016e2:	1a9a      	subs	r2, r3, r2
 80016e4:	2302      	movs	r3, #2
 80016e6:	4619      	mov	r1, r3
 80016e8:	4b4c      	ldr	r3, [pc, #304]	@ (800181c <control_circle+0x2cc>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	440b      	add	r3, r1
		circle_position_y == ball_position_y)				                &&
 80016ee:	429a      	cmp	r2, r3
 80016f0:	dc0a      	bgt.n	8001708 <control_circle+0x1b8>
		circle_position_x + circle_radius <= ball_position_x - ball_radius))) {
 80016f2:	2303      	movs	r3, #3
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b48      	ldr	r3, [pc, #288]	@ (8001818 <control_circle+0x2c8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	441a      	add	r2, r3
 80016fc:	4b47      	ldr	r3, [pc, #284]	@ (800181c <control_circle+0x2cc>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2102      	movs	r1, #2
 8001702:	1a5b      	subs	r3, r3, r1
		(circle_position_x - circle_radius > ball_position_x + ball_radius  ||
 8001704:	429a      	cmp	r2, r3
 8001706:	dc0c      	bgt.n	8001722 <control_circle+0x1d2>

		if(y1 < 78 && circle_position_x > 35) {
 8001708:	4b3e      	ldr	r3, [pc, #248]	@ (8001804 <control_circle+0x2b4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b4d      	cmp	r3, #77	@ 0x4d
 800170e:	dc08      	bgt.n	8001722 <control_circle+0x1d2>
 8001710:	4b41      	ldr	r3, [pc, #260]	@ (8001818 <control_circle+0x2c8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b23      	cmp	r3, #35	@ 0x23
 8001716:	dd04      	ble.n	8001722 <control_circle+0x1d2>

			circle_position_x --;
 8001718:	4b3f      	ldr	r3, [pc, #252]	@ (8001818 <control_circle+0x2c8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	3b01      	subs	r3, #1
 800171e:	4a3e      	ldr	r2, [pc, #248]	@ (8001818 <control_circle+0x2c8>)
 8001720:	6013      	str	r3, [r2, #0]

		}

	}
	if(circle_position_x + circle_radius <= ball_position_x - ball_radius   ||
 8001722:	2303      	movs	r3, #3
 8001724:	461a      	mov	r2, r3
 8001726:	4b3c      	ldr	r3, [pc, #240]	@ (8001818 <control_circle+0x2c8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	441a      	add	r2, r3
 800172c:	4b3b      	ldr	r3, [pc, #236]	@ (800181c <control_circle+0x2cc>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2102      	movs	r1, #2
 8001732:	1a5b      	subs	r3, r3, r1
 8001734:	429a      	cmp	r2, r3
 8001736:	dd3c      	ble.n	80017b2 <control_circle+0x262>
		circle_position_x - circle_radius >= ball_position_x + ball_radius  ||
 8001738:	4b37      	ldr	r3, [pc, #220]	@ (8001818 <control_circle+0x2c8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2203      	movs	r2, #3
 800173e:	1a9a      	subs	r2, r3, r2
 8001740:	2302      	movs	r3, #2
 8001742:	4619      	mov	r1, r3
 8001744:	4b35      	ldr	r3, [pc, #212]	@ (800181c <control_circle+0x2cc>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	440b      	add	r3, r1
	if(circle_position_x + circle_radius <= ball_position_x - ball_radius   ||
 800174a:	429a      	cmp	r2, r3
 800174c:	da31      	bge.n	80017b2 <control_circle+0x262>
		((circle_position_x + circle_radius > ball_position_x - ball_radius ||
 800174e:	2303      	movs	r3, #3
 8001750:	461a      	mov	r2, r3
 8001752:	4b31      	ldr	r3, [pc, #196]	@ (8001818 <control_circle+0x2c8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	441a      	add	r2, r3
 8001758:	4b30      	ldr	r3, [pc, #192]	@ (800181c <control_circle+0x2cc>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2102      	movs	r1, #2
 800175e:	1a5b      	subs	r3, r3, r1
		circle_position_x - circle_radius >= ball_position_x + ball_radius  ||
 8001760:	429a      	cmp	r2, r3
 8001762:	dc10      	bgt.n	8001786 <control_circle+0x236>
		circle_position_x - circle_radius < ball_position_x + ball_radius   ||
 8001764:	4b2c      	ldr	r3, [pc, #176]	@ (8001818 <control_circle+0x2c8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2203      	movs	r2, #3
 800176a:	1a9a      	subs	r2, r3, r2
 800176c:	2302      	movs	r3, #2
 800176e:	4619      	mov	r1, r3
 8001770:	4b2a      	ldr	r3, [pc, #168]	@ (800181c <control_circle+0x2cc>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	440b      	add	r3, r1
		((circle_position_x + circle_radius > ball_position_x - ball_radius ||
 8001776:	429a      	cmp	r2, r3
 8001778:	db05      	blt.n	8001786 <control_circle+0x236>
		circle_position_x == ball_position_x)				                &&
 800177a:	4b27      	ldr	r3, [pc, #156]	@ (8001818 <control_circle+0x2c8>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	4b27      	ldr	r3, [pc, #156]	@ (800181c <control_circle+0x2cc>)
 8001780:	681b      	ldr	r3, [r3, #0]
		circle_position_x - circle_radius < ball_position_x + ball_radius   ||
 8001782:	429a      	cmp	r2, r3
 8001784:	d122      	bne.n	80017cc <control_circle+0x27c>
		(circle_position_y + circle_radius < ball_position_y - ball_radius  ||
 8001786:	2303      	movs	r3, #3
 8001788:	461a      	mov	r2, r3
 800178a:	4b21      	ldr	r3, [pc, #132]	@ (8001810 <control_circle+0x2c0>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	441a      	add	r2, r3
 8001790:	4b20      	ldr	r3, [pc, #128]	@ (8001814 <control_circle+0x2c4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2102      	movs	r1, #2
 8001796:	1a5b      	subs	r3, r3, r1
		circle_position_x == ball_position_x)				                &&
 8001798:	429a      	cmp	r2, r3
 800179a:	db0a      	blt.n	80017b2 <control_circle+0x262>
		circle_position_y - circle_radius >= ball_position_y + ball_radius))) {
 800179c:	4b1c      	ldr	r3, [pc, #112]	@ (8001810 <control_circle+0x2c0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2203      	movs	r2, #3
 80017a2:	1a9a      	subs	r2, r3, r2
 80017a4:	2302      	movs	r3, #2
 80017a6:	4619      	mov	r1, r3
 80017a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001814 <control_circle+0x2c4>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	440b      	add	r3, r1
		(circle_position_y + circle_radius < ball_position_y - ball_radius  ||
 80017ae:	429a      	cmp	r2, r3
 80017b0:	db0c      	blt.n	80017cc <control_circle+0x27c>

		if(y2 > 80 && circle_position_y < 105) {
 80017b2:	4b16      	ldr	r3, [pc, #88]	@ (800180c <control_circle+0x2bc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b50      	cmp	r3, #80	@ 0x50
 80017b8:	dd08      	ble.n	80017cc <control_circle+0x27c>
 80017ba:	4b15      	ldr	r3, [pc, #84]	@ (8001810 <control_circle+0x2c0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b68      	cmp	r3, #104	@ 0x68
 80017c0:	dc04      	bgt.n	80017cc <control_circle+0x27c>

			circle_position_y ++;
 80017c2:	4b13      	ldr	r3, [pc, #76]	@ (8001810 <control_circle+0x2c0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	3301      	adds	r3, #1
 80017c8:	4a11      	ldr	r2, [pc, #68]	@ (8001810 <control_circle+0x2c0>)
 80017ca:	6013      	str	r3, [r2, #0]

		}

	}
	if(circle_position_x + circle_radius <= ball_position_x - ball_radius   ||
 80017cc:	2303      	movs	r3, #3
 80017ce:	461a      	mov	r2, r3
 80017d0:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <control_circle+0x2c8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	441a      	add	r2, r3
 80017d6:	4b11      	ldr	r3, [pc, #68]	@ (800181c <control_circle+0x2cc>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2102      	movs	r1, #2
 80017dc:	1a5b      	subs	r3, r3, r1
 80017de:	429a      	cmp	r2, r3
 80017e0:	dd55      	ble.n	800188e <control_circle+0x33e>
		circle_position_x - circle_radius >= ball_position_x + ball_radius  ||
 80017e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001818 <control_circle+0x2c8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2203      	movs	r2, #3
 80017e8:	1a9a      	subs	r2, r3, r2
 80017ea:	2302      	movs	r3, #2
 80017ec:	4619      	mov	r1, r3
 80017ee:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <control_circle+0x2cc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	440b      	add	r3, r1
	if(circle_position_x + circle_radius <= ball_position_x - ball_radius   ||
 80017f4:	429a      	cmp	r2, r3
 80017f6:	e017      	b.n	8001828 <control_circle+0x2d8>
 80017f8:	0ded288d 	.word	0x0ded288d
 80017fc:	3f8930be 	.word	0x3f8930be
 8001800:	40418000 	.word	0x40418000
 8001804:	20000000 	.word	0x20000000
 8001808:	404b8000 	.word	0x404b8000
 800180c:	20000004 	.word	0x20000004
 8001810:	2000000c 	.word	0x2000000c
 8001814:	20000014 	.word	0x20000014
 8001818:	20000008 	.word	0x20000008
 800181c:	20000010 	.word	0x20000010
 8001820:	020c49ba 	.word	0x020c49ba
 8001824:	3f96872b 	.word	0x3f96872b
 8001828:	da31      	bge.n	800188e <control_circle+0x33e>
		((circle_position_x + circle_radius > ball_position_x - ball_radius ||
 800182a:	2303      	movs	r3, #3
 800182c:	461a      	mov	r2, r3
 800182e:	4b2c      	ldr	r3, [pc, #176]	@ (80018e0 <control_circle+0x390>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	441a      	add	r2, r3
 8001834:	4b2b      	ldr	r3, [pc, #172]	@ (80018e4 <control_circle+0x394>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2102      	movs	r1, #2
 800183a:	1a5b      	subs	r3, r3, r1
		circle_position_x - circle_radius >= ball_position_x + ball_radius  ||
 800183c:	429a      	cmp	r2, r3
 800183e:	dc10      	bgt.n	8001862 <control_circle+0x312>
		circle_position_x - circle_radius < ball_position_x + ball_radius   ||
 8001840:	4b27      	ldr	r3, [pc, #156]	@ (80018e0 <control_circle+0x390>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2203      	movs	r2, #3
 8001846:	1a9a      	subs	r2, r3, r2
 8001848:	2302      	movs	r3, #2
 800184a:	4619      	mov	r1, r3
 800184c:	4b25      	ldr	r3, [pc, #148]	@ (80018e4 <control_circle+0x394>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	440b      	add	r3, r1
		((circle_position_x + circle_radius > ball_position_x - ball_radius ||
 8001852:	429a      	cmp	r2, r3
 8001854:	db05      	blt.n	8001862 <control_circle+0x312>
		circle_position_x == ball_position_x)				                &&
 8001856:	4b22      	ldr	r3, [pc, #136]	@ (80018e0 <control_circle+0x390>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	4b22      	ldr	r3, [pc, #136]	@ (80018e4 <control_circle+0x394>)
 800185c:	681b      	ldr	r3, [r3, #0]
		circle_position_x - circle_radius < ball_position_x + ball_radius   ||
 800185e:	429a      	cmp	r2, r3
 8001860:	d122      	bne.n	80018a8 <control_circle+0x358>
		(circle_position_y - circle_radius > ball_position_y + ball_radius  ||
 8001862:	4b21      	ldr	r3, [pc, #132]	@ (80018e8 <control_circle+0x398>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2203      	movs	r2, #3
 8001868:	1a9a      	subs	r2, r3, r2
 800186a:	2302      	movs	r3, #2
 800186c:	4619      	mov	r1, r3
 800186e:	4b1f      	ldr	r3, [pc, #124]	@ (80018ec <control_circle+0x39c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	440b      	add	r3, r1
		circle_position_x == ball_position_x)				                &&
 8001874:	429a      	cmp	r2, r3
 8001876:	dc0a      	bgt.n	800188e <control_circle+0x33e>
		circle_position_y + circle_radius <= ball_position_y - ball_radius))) {
 8001878:	2303      	movs	r3, #3
 800187a:	461a      	mov	r2, r3
 800187c:	4b1a      	ldr	r3, [pc, #104]	@ (80018e8 <control_circle+0x398>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	441a      	add	r2, r3
 8001882:	4b1a      	ldr	r3, [pc, #104]	@ (80018ec <control_circle+0x39c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2102      	movs	r1, #2
 8001888:	1a5b      	subs	r3, r3, r1
		(circle_position_y - circle_radius > ball_position_y + ball_radius  ||
 800188a:	429a      	cmp	r2, r3
 800188c:	dc0c      	bgt.n	80018a8 <control_circle+0x358>

		if(y2 < 80 && circle_position_y > 55) {
 800188e:	4b18      	ldr	r3, [pc, #96]	@ (80018f0 <control_circle+0x3a0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2b4f      	cmp	r3, #79	@ 0x4f
 8001894:	dc08      	bgt.n	80018a8 <control_circle+0x358>
 8001896:	4b14      	ldr	r3, [pc, #80]	@ (80018e8 <control_circle+0x398>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b37      	cmp	r3, #55	@ 0x37
 800189c:	dd04      	ble.n	80018a8 <control_circle+0x358>

			circle_position_y --;
 800189e:	4b12      	ldr	r3, [pc, #72]	@ (80018e8 <control_circle+0x398>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	4a10      	ldr	r2, [pc, #64]	@ (80018e8 <control_circle+0x398>)
 80018a6:	6013      	str	r3, [r2, #0]

		}

	}

	if(circle_position_x != last_circle_position_x ||
 80018a8:	4b0d      	ldr	r3, [pc, #52]	@ (80018e0 <control_circle+0x390>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <control_circle+0x3a4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d105      	bne.n	80018c0 <control_circle+0x370>
			circle_position_y != last_circle_position_y) {
 80018b4:	4b0c      	ldr	r3, [pc, #48]	@ (80018e8 <control_circle+0x398>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b0f      	ldr	r3, [pc, #60]	@ (80018f8 <control_circle+0x3a8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
	if(circle_position_x != last_circle_position_x ||
 80018bc:	429a      	cmp	r2, r3
 80018be:	d00b      	beq.n	80018d8 <control_circle+0x388>

		draw_pitch(circle_radius);
 80018c0:	2303      	movs	r3, #3
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fd3c 	bl	8001340 <draw_pitch>
		last_circle_position_x = circle_position_x;
 80018c8:	4b05      	ldr	r3, [pc, #20]	@ (80018e0 <control_circle+0x390>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a09      	ldr	r2, [pc, #36]	@ (80018f4 <control_circle+0x3a4>)
 80018ce:	6013      	str	r3, [r2, #0]
		last_circle_position_y = circle_position_y;
 80018d0:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <control_circle+0x398>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a08      	ldr	r2, [pc, #32]	@ (80018f8 <control_circle+0x3a8>)
 80018d6:	6013      	str	r3, [r2, #0]

	}

}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000008 	.word	0x20000008
 80018e4:	20000010 	.word	0x20000010
 80018e8:	2000000c 	.word	0x2000000c
 80018ec:	20000014 	.word	0x20000014
 80018f0:	20000004 	.word	0x20000004
 80018f4:	2000a150 	.word	0x2000a150
 80018f8:	2000a154 	.word	0x2000a154

080018fc <control_ball>:


void control_ball() {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0

		if(HAL_GPIO_ReadPin(BUTTON_SHOT_GPIO_Port, BUTTON_SHOT_Pin) == GPIO_PIN_SET) {
 8001902:	2101      	movs	r1, #1
 8001904:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001908:	f002 fd42 	bl	8004390 <HAL_GPIO_ReadPin>
 800190c:	4603      	mov	r3, r0
 800190e:	2b01      	cmp	r3, #1
 8001910:	f040 8161 	bne.w	8001bd6 <control_ball+0x2da>

			bool ball_shot_right = false;
 8001914:	2300      	movs	r3, #0
 8001916:	71fb      	strb	r3, [r7, #7]
			bool ball_shot_left = false;
 8001918:	2300      	movs	r3, #0
 800191a:	71bb      	strb	r3, [r7, #6]
			bool ball_shot_up = false;
 800191c:	2300      	movs	r3, #0
 800191e:	717b      	strb	r3, [r7, #5]
			bool ball_shot_down = false;
 8001920:	2300      	movs	r3, #0
 8001922:	713b      	strb	r3, [r7, #4]

			if(circle_position_x + circle_radius == ball_position_x - ball_radius &&
 8001924:	2303      	movs	r3, #3
 8001926:	461a      	mov	r2, r3
 8001928:	4b92      	ldr	r3, [pc, #584]	@ (8001b74 <control_ball+0x278>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	441a      	add	r2, r3
 800192e:	4b92      	ldr	r3, [pc, #584]	@ (8001b78 <control_ball+0x27c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2102      	movs	r1, #2
 8001934:	1a5b      	subs	r3, r3, r1
 8001936:	429a      	cmp	r2, r3
 8001938:	d157      	bne.n	80019ea <control_ball+0xee>
			   circle_position_y + circle_radius >= ball_position_y - ball_radius &&
 800193a:	2303      	movs	r3, #3
 800193c:	461a      	mov	r2, r3
 800193e:	4b8f      	ldr	r3, [pc, #572]	@ (8001b7c <control_ball+0x280>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	441a      	add	r2, r3
 8001944:	4b8e      	ldr	r3, [pc, #568]	@ (8001b80 <control_ball+0x284>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2102      	movs	r1, #2
 800194a:	1a5b      	subs	r3, r3, r1
			if(circle_position_x + circle_radius == ball_position_x - ball_radius &&
 800194c:	429a      	cmp	r2, r3
 800194e:	db4c      	blt.n	80019ea <control_ball+0xee>
			   circle_position_y - circle_radius <= ball_position_y + ball_radius) {
 8001950:	4b8a      	ldr	r3, [pc, #552]	@ (8001b7c <control_ball+0x280>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2203      	movs	r2, #3
 8001956:	1a9a      	subs	r2, r3, r2
 8001958:	2302      	movs	r3, #2
 800195a:	4619      	mov	r1, r3
 800195c:	4b88      	ldr	r3, [pc, #544]	@ (8001b80 <control_ball+0x284>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	440b      	add	r3, r1
			   circle_position_y + circle_radius >= ball_position_y - ball_radius &&
 8001962:	429a      	cmp	r2, r3
 8001964:	dc41      	bgt.n	80019ea <control_ball+0xee>

				ball_shot_right = true;
 8001966:	2301      	movs	r3, #1
 8001968:	71fb      	strb	r3, [r7, #7]
				if(ball_position_x < pitch_right_edge) {
 800196a:	2382      	movs	r3, #130	@ 0x82
 800196c:	461a      	mov	r2, r3
 800196e:	4b82      	ldr	r3, [pc, #520]	@ (8001b78 <control_ball+0x27c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	dd07      	ble.n	8001986 <control_ball+0x8a>

					ball_position_x += shot_distance;
 8001976:	230a      	movs	r3, #10
 8001978:	461a      	mov	r2, r3
 800197a:	4b7f      	ldr	r3, [pc, #508]	@ (8001b78 <control_ball+0x27c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4413      	add	r3, r2
 8001980:	4a7d      	ldr	r2, [pc, #500]	@ (8001b78 <control_ball+0x27c>)
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	e031      	b.n	80019ea <control_ball+0xee>

				}
				else if(ball_position_x == pitch_right_edge && (ball_position_y < right_goal_up_edge ||
 8001986:	2382      	movs	r3, #130	@ 0x82
 8001988:	461a      	mov	r2, r3
 800198a:	4b7b      	ldr	r3, [pc, #492]	@ (8001b78 <control_ball+0x27c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d112      	bne.n	80019b8 <control_ball+0xbc>
 8001992:	2341      	movs	r3, #65	@ 0x41
 8001994:	461a      	mov	r2, r3
 8001996:	4b7a      	ldr	r3, [pc, #488]	@ (8001b80 <control_ball+0x284>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	dc05      	bgt.n	80019aa <control_ball+0xae>
						ball_position_y > right_goal_down_edge)){
 800199e:	235f      	movs	r3, #95	@ 0x5f
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b77      	ldr	r3, [pc, #476]	@ (8001b80 <control_ball+0x284>)
 80019a4:	681b      	ldr	r3, [r3, #0]
				else if(ball_position_x == pitch_right_edge && (ball_position_y < right_goal_up_edge ||
 80019a6:	429a      	cmp	r2, r3
 80019a8:	da06      	bge.n	80019b8 <control_ball+0xbc>

					ball_position_x -= bounce_distance;
 80019aa:	4b73      	ldr	r3, [pc, #460]	@ (8001b78 <control_ball+0x27c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	220a      	movs	r2, #10
 80019b0:	1a9b      	subs	r3, r3, r2
 80019b2:	4a71      	ldr	r2, [pc, #452]	@ (8001b78 <control_ball+0x27c>)
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	e018      	b.n	80019ea <control_ball+0xee>

				}
				else if(ball_position_x == pitch_right_edge && (ball_position_y >= right_goal_up_edge &&
 80019b8:	2382      	movs	r3, #130	@ 0x82
 80019ba:	461a      	mov	r2, r3
 80019bc:	4b6e      	ldr	r3, [pc, #440]	@ (8001b78 <control_ball+0x27c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d112      	bne.n	80019ea <control_ball+0xee>
 80019c4:	2341      	movs	r3, #65	@ 0x41
 80019c6:	461a      	mov	r2, r3
 80019c8:	4b6d      	ldr	r3, [pc, #436]	@ (8001b80 <control_ball+0x284>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	dc0c      	bgt.n	80019ea <control_ball+0xee>
						ball_position_y <= right_goal_down_edge)) {
 80019d0:	235f      	movs	r3, #95	@ 0x5f
 80019d2:	461a      	mov	r2, r3
 80019d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001b80 <control_ball+0x284>)
 80019d6:	681b      	ldr	r3, [r3, #0]
				else if(ball_position_x == pitch_right_edge && (ball_position_y >= right_goal_up_edge &&
 80019d8:	429a      	cmp	r2, r3
 80019da:	db06      	blt.n	80019ea <control_ball+0xee>

					ball_position_x += shot_distance;
 80019dc:	230a      	movs	r3, #10
 80019de:	461a      	mov	r2, r3
 80019e0:	4b65      	ldr	r3, [pc, #404]	@ (8001b78 <control_ball+0x27c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4413      	add	r3, r2
 80019e6:	4a64      	ldr	r2, [pc, #400]	@ (8001b78 <control_ball+0x27c>)
 80019e8:	6013      	str	r3, [r2, #0]
					//result_right += 1;

				}

			}
			if(circle_position_x - circle_radius == ball_position_x + ball_radius &&
 80019ea:	4b62      	ldr	r3, [pc, #392]	@ (8001b74 <control_ball+0x278>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2203      	movs	r2, #3
 80019f0:	1a9a      	subs	r2, r3, r2
 80019f2:	2302      	movs	r3, #2
 80019f4:	4619      	mov	r1, r3
 80019f6:	4b60      	ldr	r3, [pc, #384]	@ (8001b78 <control_ball+0x27c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	440b      	add	r3, r1
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d156      	bne.n	8001aae <control_ball+0x1b2>
			   circle_position_y + circle_radius >= ball_position_y - ball_radius &&
 8001a00:	2303      	movs	r3, #3
 8001a02:	461a      	mov	r2, r3
 8001a04:	4b5d      	ldr	r3, [pc, #372]	@ (8001b7c <control_ball+0x280>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	441a      	add	r2, r3
 8001a0a:	4b5d      	ldr	r3, [pc, #372]	@ (8001b80 <control_ball+0x284>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2102      	movs	r1, #2
 8001a10:	1a5b      	subs	r3, r3, r1
			if(circle_position_x - circle_radius == ball_position_x + ball_radius &&
 8001a12:	429a      	cmp	r2, r3
 8001a14:	db4b      	blt.n	8001aae <control_ball+0x1b2>
			   circle_position_y - circle_radius <= ball_position_y + ball_radius) {
 8001a16:	4b59      	ldr	r3, [pc, #356]	@ (8001b7c <control_ball+0x280>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	1a9a      	subs	r2, r3, r2
 8001a1e:	2302      	movs	r3, #2
 8001a20:	4619      	mov	r1, r3
 8001a22:	4b57      	ldr	r3, [pc, #348]	@ (8001b80 <control_ball+0x284>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	440b      	add	r3, r1
			   circle_position_y + circle_radius >= ball_position_y - ball_radius &&
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	dc40      	bgt.n	8001aae <control_ball+0x1b2>

				ball_shot_left = true;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	71bb      	strb	r3, [r7, #6]

				if(ball_position_x > pitch_left_edge) {
 8001a30:	231e      	movs	r3, #30
 8001a32:	461a      	mov	r2, r3
 8001a34:	4b50      	ldr	r3, [pc, #320]	@ (8001b78 <control_ball+0x27c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	da06      	bge.n	8001a4a <control_ball+0x14e>

					ball_position_x -= shot_distance;
 8001a3c:	4b4e      	ldr	r3, [pc, #312]	@ (8001b78 <control_ball+0x27c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	220a      	movs	r2, #10
 8001a42:	1a9b      	subs	r3, r3, r2
 8001a44:	4a4c      	ldr	r2, [pc, #304]	@ (8001b78 <control_ball+0x27c>)
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	e031      	b.n	8001aae <control_ball+0x1b2>

				}
				else if(ball_position_x == pitch_left_edge && (ball_position_y < right_goal_up_edge ||
 8001a4a:	231e      	movs	r3, #30
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4b4a      	ldr	r3, [pc, #296]	@ (8001b78 <control_ball+0x27c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d113      	bne.n	8001a7e <control_ball+0x182>
 8001a56:	2341      	movs	r3, #65	@ 0x41
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b49      	ldr	r3, [pc, #292]	@ (8001b80 <control_ball+0x284>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	dc05      	bgt.n	8001a6e <control_ball+0x172>
						ball_position_y > right_goal_down_edge)){
 8001a62:	235f      	movs	r3, #95	@ 0x5f
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b46      	ldr	r3, [pc, #280]	@ (8001b80 <control_ball+0x284>)
 8001a68:	681b      	ldr	r3, [r3, #0]
				else if(ball_position_x == pitch_left_edge && (ball_position_y < right_goal_up_edge ||
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	da07      	bge.n	8001a7e <control_ball+0x182>

					ball_position_x += bounce_distance;
 8001a6e:	230a      	movs	r3, #10
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b41      	ldr	r3, [pc, #260]	@ (8001b78 <control_ball+0x27c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	4a3f      	ldr	r2, [pc, #252]	@ (8001b78 <control_ball+0x27c>)
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	e017      	b.n	8001aae <control_ball+0x1b2>

				}
				else if(ball_position_x == pitch_left_edge && (ball_position_y >= right_goal_up_edge &&
 8001a7e:	231e      	movs	r3, #30
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b3d      	ldr	r3, [pc, #244]	@ (8001b78 <control_ball+0x27c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d111      	bne.n	8001aae <control_ball+0x1b2>
 8001a8a:	2341      	movs	r3, #65	@ 0x41
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b80 <control_ball+0x284>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	dc0b      	bgt.n	8001aae <control_ball+0x1b2>
						ball_position_y <= right_goal_down_edge)) {
 8001a96:	235f      	movs	r3, #95	@ 0x5f
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b39      	ldr	r3, [pc, #228]	@ (8001b80 <control_ball+0x284>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
				else if(ball_position_x == pitch_left_edge && (ball_position_y >= right_goal_up_edge &&
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	db05      	blt.n	8001aae <control_ball+0x1b2>

					ball_position_x -= shot_distance;
 8001aa2:	4b35      	ldr	r3, [pc, #212]	@ (8001b78 <control_ball+0x27c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	220a      	movs	r2, #10
 8001aa8:	1a9b      	subs	r3, r3, r2
 8001aaa:	4a33      	ldr	r2, [pc, #204]	@ (8001b78 <control_ball+0x27c>)
 8001aac:	6013      	str	r3, [r2, #0]
					//result_left += 1;

				}

			}
			if(circle_position_y + circle_radius == ball_position_y - ball_radius &&
 8001aae:	2303      	movs	r3, #3
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b32      	ldr	r3, [pc, #200]	@ (8001b7c <control_ball+0x280>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	441a      	add	r2, r3
 8001ab8:	4b31      	ldr	r3, [pc, #196]	@ (8001b80 <control_ball+0x284>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2102      	movs	r1, #2
 8001abe:	1a5b      	subs	r3, r3, r1
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d129      	bne.n	8001b18 <control_ball+0x21c>
			   circle_position_x + circle_radius >= ball_position_x - ball_radius &&
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b74 <control_ball+0x278>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	441a      	add	r2, r3
 8001ace:	4b2a      	ldr	r3, [pc, #168]	@ (8001b78 <control_ball+0x27c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2102      	movs	r1, #2
 8001ad4:	1a5b      	subs	r3, r3, r1
			if(circle_position_y + circle_radius == ball_position_y - ball_radius &&
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	db1e      	blt.n	8001b18 <control_ball+0x21c>
			   circle_position_x - circle_radius <= ball_position_x + ball_radius) {
 8001ada:	4b26      	ldr	r3, [pc, #152]	@ (8001b74 <control_ball+0x278>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2203      	movs	r2, #3
 8001ae0:	1a9a      	subs	r2, r3, r2
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4b24      	ldr	r3, [pc, #144]	@ (8001b78 <control_ball+0x27c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	440b      	add	r3, r1
			   circle_position_x + circle_radius >= ball_position_x - ball_radius &&
 8001aec:	429a      	cmp	r2, r3
 8001aee:	dc13      	bgt.n	8001b18 <control_ball+0x21c>

				ball_shot_up = true;
 8001af0:	2301      	movs	r3, #1
 8001af2:	717b      	strb	r3, [r7, #5]

				if(ball_position_y < 110) {
 8001af4:	4b22      	ldr	r3, [pc, #136]	@ (8001b80 <control_ball+0x284>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b6d      	cmp	r3, #109	@ 0x6d
 8001afa:	dc07      	bgt.n	8001b0c <control_ball+0x210>

					ball_position_y += shot_distance;
 8001afc:	230a      	movs	r3, #10
 8001afe:	461a      	mov	r2, r3
 8001b00:	4b1f      	ldr	r3, [pc, #124]	@ (8001b80 <control_ball+0x284>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4413      	add	r3, r2
 8001b06:	4a1e      	ldr	r2, [pc, #120]	@ (8001b80 <control_ball+0x284>)
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	e005      	b.n	8001b18 <control_ball+0x21c>

				}
				else {

					ball_position_y -= bounce_distance;
 8001b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001b80 <control_ball+0x284>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	220a      	movs	r2, #10
 8001b12:	1a9b      	subs	r3, r3, r2
 8001b14:	4a1a      	ldr	r2, [pc, #104]	@ (8001b80 <control_ball+0x284>)
 8001b16:	6013      	str	r3, [r2, #0]

				}

			}
			if(circle_position_y - circle_radius == ball_position_y + ball_radius &&
 8001b18:	4b18      	ldr	r3, [pc, #96]	@ (8001b7c <control_ball+0x280>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	1a9a      	subs	r2, r3, r2
 8001b20:	2302      	movs	r3, #2
 8001b22:	4619      	mov	r1, r3
 8001b24:	4b16      	ldr	r3, [pc, #88]	@ (8001b80 <control_ball+0x284>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	440b      	add	r3, r1
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d131      	bne.n	8001b92 <control_ball+0x296>
			   circle_position_x + circle_radius >= ball_position_x - ball_radius &&
 8001b2e:	2303      	movs	r3, #3
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b10      	ldr	r3, [pc, #64]	@ (8001b74 <control_ball+0x278>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	441a      	add	r2, r3
 8001b38:	4b0f      	ldr	r3, [pc, #60]	@ (8001b78 <control_ball+0x27c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2102      	movs	r1, #2
 8001b3e:	1a5b      	subs	r3, r3, r1
			if(circle_position_y - circle_radius == ball_position_y + ball_radius &&
 8001b40:	429a      	cmp	r2, r3
 8001b42:	db26      	blt.n	8001b92 <control_ball+0x296>
			   circle_position_x - circle_radius <= ball_position_x + ball_radius) {
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <control_ball+0x278>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2203      	movs	r2, #3
 8001b4a:	1a9a      	subs	r2, r3, r2
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4b09      	ldr	r3, [pc, #36]	@ (8001b78 <control_ball+0x27c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	440b      	add	r3, r1
			   circle_position_x + circle_radius >= ball_position_x - ball_radius &&
 8001b56:	429a      	cmp	r2, r3
 8001b58:	dc1b      	bgt.n	8001b92 <control_ball+0x296>

				ball_shot_down = true;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	713b      	strb	r3, [r7, #4]

				if(ball_position_y > 50) {
 8001b5e:	4b08      	ldr	r3, [pc, #32]	@ (8001b80 <control_ball+0x284>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2b32      	cmp	r3, #50	@ 0x32
 8001b64:	dd0e      	ble.n	8001b84 <control_ball+0x288>

					ball_position_y -= shot_distance;
 8001b66:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <control_ball+0x284>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	220a      	movs	r2, #10
 8001b6c:	1a9b      	subs	r3, r3, r2
 8001b6e:	4a04      	ldr	r2, [pc, #16]	@ (8001b80 <control_ball+0x284>)
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	e00e      	b.n	8001b92 <control_ball+0x296>
 8001b74:	20000008 	.word	0x20000008
 8001b78:	20000010 	.word	0x20000010
 8001b7c:	2000000c 	.word	0x2000000c
 8001b80:	20000014 	.word	0x20000014

				}
				else {

					ball_position_y += bounce_distance;
 8001b84:	230a      	movs	r3, #10
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b15      	ldr	r3, [pc, #84]	@ (8001be0 <control_ball+0x2e4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	4a14      	ldr	r2, [pc, #80]	@ (8001be0 <control_ball+0x2e4>)
 8001b90:	6013      	str	r3, [r2, #0]

				}

			}
			if(ball_shot_right || ball_shot_left || ball_shot_up || ball_shot_down) {
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d108      	bne.n	8001baa <control_ball+0x2ae>
 8001b98:	79bb      	ldrb	r3, [r7, #6]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d105      	bne.n	8001baa <control_ball+0x2ae>
 8001b9e:	797b      	ldrb	r3, [r7, #5]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d102      	bne.n	8001baa <control_ball+0x2ae>
 8001ba4:	793b      	ldrb	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d015      	beq.n	8001bd6 <control_ball+0x2da>

				draw_pitch(circle_radius + 1);
 8001baa:	2303      	movs	r3, #3
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	b21b      	sxth	r3, r3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fbc3 	bl	8001340 <draw_pitch>

				if(ball_position_x == left_goal_left_edge ||
 8001bba:	2314      	movs	r3, #20
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b09      	ldr	r3, [pc, #36]	@ (8001be4 <control_ball+0x2e8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d005      	beq.n	8001bd2 <control_ball+0x2d6>
						ball_position_x == right_goal_right_edge) {
 8001bc6:	238c      	movs	r3, #140	@ 0x8c
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <control_ball+0x2e8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
				if(ball_position_x == left_goal_left_edge ||
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d101      	bne.n	8001bd6 <control_ball+0x2da>

					shot_goal();
 8001bd2:	f7ff fc0d 	bl	80013f0 <shot_goal>
				}

			}

		}
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000014 	.word	0x20000014
 8001be4:	20000010 	.word	0x20000010

08001be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001be8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bec:	b085      	sub	sp, #20
 8001bee:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bf0:	f000 fb8d 	bl	800230e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bf4:	f000 f8ba 	bl	8001d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bf8:	f7ff fa02 	bl	8001000 <MX_GPIO_Init>
  MX_DMA_Init();
 8001bfc:	f7ff f9e2 	bl	8000fc4 <MX_DMA_Init>
  MX_SPI2_Init();
 8001c00:	f000 f91c 	bl	8001e3c <MX_SPI2_Init>
  MX_ADC1_Init();
 8001c04:	f7ff f8a2 	bl	8000d4c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001c08:	f000 facc 	bl	80021a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Inicjalizacja wyswietlacza:
  lcd_init();
 8001c0c:	f7ff fad2 	bl	80011b4 <lcd_init>
      lcd_put_pixel(x, y, __REV16(x / 10 + y * 16));
    }
  }
  */
  //Wykorzystanie biblioteki hagl do rysowania zaokraglonego prostokata oraz do pisania tekstu:
  for (int i = 0; i < 8; i++) {
 8001c10:	2300      	movs	r3, #0
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	e032      	b.n	8001c7c <main+0x94>
    hagl_draw_rounded_rectangle(2+i, 2+i, 158-i, 126-i, 8-i, rgb565(0, 0, i*16));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	b21d      	sxth	r5, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	3302      	adds	r3, #2
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	b21e      	sxth	r6, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	f1c3 039e 	rsb	r3, r3, #158	@ 0x9e
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	fa0f f883 	sxth.w	r8, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	f1c3 037e 	rsb	r3, r3, #126	@ 0x7e
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	fa0f f983 	sxth.w	r9, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	f1c3 0308 	rsb	r3, r3, #8
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	b21c      	sxth	r4, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	011b      	lsls	r3, r3, #4
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f006 f8c2 	bl	8007de8 <rgb565>
 8001c64:	4603      	mov	r3, r0
 8001c66:	9301      	str	r3, [sp, #4]
 8001c68:	9400      	str	r4, [sp, #0]
 8001c6a:	464b      	mov	r3, r9
 8001c6c:	4642      	mov	r2, r8
 8001c6e:	4631      	mov	r1, r6
 8001c70:	4628      	mov	r0, r5
 8001c72:	f005 ff1f 	bl	8007ab4 <hagl_draw_rounded_rectangle>
  for (int i = 0; i < 8; i++) {
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b07      	cmp	r3, #7
 8001c80:	ddc9      	ble.n	8001c16 <main+0x2e>
  }

  hagl_put_text(L"Jasnosc pomieszczenia", 16, 15, YELLOW, font6x9);
 8001c82:	4b31      	ldr	r3, [pc, #196]	@ (8001d48 <main+0x160>)
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	f24e 03ff 	movw	r3, #57599	@ 0xe0ff
 8001c8a:	220f      	movs	r2, #15
 8001c8c:	2110      	movs	r1, #16
 8001c8e:	482f      	ldr	r0, [pc, #188]	@ (8001d4c <main+0x164>)
 8001c90:	f005 fde0 	bl	8007854 <hagl_put_text>
  hagl_fill_rectangle(40, 75, 50, 65, WHITE);
  hagl_fill_rectangle(20, 75, 30, 65, WHITE);
  */

  //Obramowanie progress_bar:
  hagl_draw_rectangle(30, 40, 130, 30, YELLOW);
 8001c94:	f24e 03ff 	movw	r3, #57599	@ 0xe0ff
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	231e      	movs	r3, #30
 8001c9c:	2282      	movs	r2, #130	@ 0x82
 8001c9e:	2128      	movs	r1, #40	@ 0x28
 8001ca0:	201e      	movs	r0, #30
 8001ca2:	f005 fbaf 	bl	8007404 <hagl_draw_rectangle>

  //Obramowanie boiska:
  hagl_draw_rectangle(pitch_left_edge, pitch_up_edge, pitch_right_edge, pitch_down_edge, WHITE);
 8001ca6:	201e      	movs	r0, #30
 8001ca8:	2132      	movs	r1, #50	@ 0x32
 8001caa:	2282      	movs	r2, #130	@ 0x82
 8001cac:	246e      	movs	r4, #110	@ 0x6e
 8001cae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	4623      	mov	r3, r4
 8001cb6:	f005 fba5 	bl	8007404 <hagl_draw_rectangle>

  //Lewa bramka:
  hagl_draw_rectangle(left_goal_left_edge, left_goal_up_edge, left_goal_right_edge,
 8001cba:	2014      	movs	r0, #20
 8001cbc:	2141      	movs	r1, #65	@ 0x41
 8001cbe:	221e      	movs	r2, #30
 8001cc0:	245f      	movs	r4, #95	@ 0x5f
 8001cc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	4623      	mov	r3, r4
 8001cca:	f005 fb9b 	bl	8007404 <hagl_draw_rectangle>
		  left_goal_down_edge, WHITE);

  //Prawa bramka:
  hagl_draw_rectangle(right_goal_left_edge, right_goal_up_edge, right_goal_right_edge,
 8001cce:	2082      	movs	r0, #130	@ 0x82
 8001cd0:	2141      	movs	r1, #65	@ 0x41
 8001cd2:	228c      	movs	r2, #140	@ 0x8c
 8001cd4:	245f      	movs	r4, #95	@ 0x5f
 8001cd6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	4623      	mov	r3, r4
 8001cde:	f005 fb91 	bl	8007404 <hagl_draw_rectangle>
  //hagl_put_text(&result_left_start, 64, 111, YELLOW, font6x9);
  //hagl_put_text(L":", 80, 111, YELLOW, font6x9);
  //hagl_put_text(&result_right_start, 90, 111, YELLOW, font6x9);

  //Przesylanie danych z bufora na wyswietlacz:
  lcd_copy();
 8001ce2:	f7ff faef 	bl	80012c4 <lcd_copy>

  volatile static uint16_t value[3];
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001ce6:	217f      	movs	r1, #127	@ 0x7f
 8001ce8:	4819      	ldr	r0, [pc, #100]	@ (8001d50 <main+0x168>)
 8001cea:	f001 fd8d 	bl	8003808 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)value, 3);
 8001cee:	2203      	movs	r2, #3
 8001cf0:	4918      	ldr	r1, [pc, #96]	@ (8001d54 <main+0x16c>)
 8001cf2:	4817      	ldr	r0, [pc, #92]	@ (8001d50 <main+0x168>)
 8001cf4:	f000 fef0 	bl	8002ad8 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  printf("Photoresistor = %u\n", value[0]);
 8001cf8:	4b16      	ldr	r3, [pc, #88]	@ (8001d54 <main+0x16c>)
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4815      	ldr	r0, [pc, #84]	@ (8001d58 <main+0x170>)
 8001d02:	f006 fa11 	bl	8008128 <iprintf>
	  draw_progress_bar(value[0]);
 8001d06:	4b13      	ldr	r3, [pc, #76]	@ (8001d54 <main+0x16c>)
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff fbb7 	bl	8001480 <draw_progress_bar>

	  printf("Potentiometer 1: %u\n", y1);
 8001d12:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <main+0x174>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4619      	mov	r1, r3
 8001d18:	4811      	ldr	r0, [pc, #68]	@ (8001d60 <main+0x178>)
 8001d1a:	f006 fa05 	bl	8008128 <iprintf>
	  printf("Potentiometer 2: %u\n", y2);
 8001d1e:	4b11      	ldr	r3, [pc, #68]	@ (8001d64 <main+0x17c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4619      	mov	r1, r3
 8001d24:	4810      	ldr	r0, [pc, #64]	@ (8001d68 <main+0x180>)
 8001d26:	f006 f9ff 	bl	8008128 <iprintf>
	  control_circle(value[1], value[2]);
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d54 <main+0x16c>)
 8001d2c:	885b      	ldrh	r3, [r3, #2]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b08      	ldr	r3, [pc, #32]	@ (8001d54 <main+0x16c>)
 8001d34:	889b      	ldrh	r3, [r3, #4]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	f7ff fc08 	bl	8001550 <control_circle>
	  control_ball();
 8001d40:	f7ff fddc 	bl	80018fc <control_ball>
	  printf("Photoresistor = %u\n", value[0]);
 8001d44:	bf00      	nop
 8001d46:	e7d7      	b.n	8001cf8 <main+0x110>
 8001d48:	08008e30 	.word	0x08008e30
 8001d4c:	08008cfc 	.word	0x08008cfc
 8001d50:	200000a4 	.word	0x200000a4
 8001d54:	2000a15c 	.word	0x2000a15c
 8001d58:	08008d54 	.word	0x08008d54
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	08008d68 	.word	0x08008d68
 8001d64:	20000004 	.word	0x20000004
 8001d68:	08008d80 	.word	0x08008d80

08001d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b096      	sub	sp, #88	@ 0x58
 8001d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d72:	f107 0314 	add.w	r3, r7, #20
 8001d76:	2244      	movs	r2, #68	@ 0x44
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f006 fa29 	bl	80081d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d80:	463b      	mov	r3, r7
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d8e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001d92:	f002 fb4b 	bl	800442c <HAL_PWREx_ControlVoltageScaling>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001d9c:	f000 f848 	bl	8001e30 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001da0:	f002 fb26 	bl	80043f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001da4:	4b21      	ldr	r3, [pc, #132]	@ (8001e2c <SystemClock_Config+0xc0>)
 8001da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001daa:	4a20      	ldr	r2, [pc, #128]	@ (8001e2c <SystemClock_Config+0xc0>)
 8001dac:	f023 0318 	bic.w	r3, r3, #24
 8001db0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001db4:	2314      	movs	r3, #20
 8001db6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001db8:	2301      	movs	r3, #1
 8001dba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001dc4:	2360      	movs	r3, #96	@ 0x60
 8001dc6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001dd4:	2328      	movs	r3, #40	@ 0x28
 8001dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001dd8:	2307      	movs	r3, #7
 8001dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001de0:	2302      	movs	r3, #2
 8001de2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	4618      	mov	r0, r3
 8001dea:	f002 fb75 	bl	80044d8 <HAL_RCC_OscConfig>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001df4:	f000 f81c 	bl	8001e30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001df8:	230f      	movs	r3, #15
 8001dfa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e0c:	463b      	mov	r3, r7
 8001e0e:	2104      	movs	r1, #4
 8001e10:	4618      	mov	r0, r3
 8001e12:	f002 ff3d 	bl	8004c90 <HAL_RCC_ClockConfig>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001e1c:	f000 f808 	bl	8001e30 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001e20:	f003 fc44 	bl	80056ac <HAL_RCCEx_EnableMSIPLLMode>
}
 8001e24:	bf00      	nop
 8001e26:	3758      	adds	r7, #88	@ 0x58
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40021000 	.word	0x40021000

08001e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e34:	b672      	cpsid	i
}
 8001e36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <Error_Handler+0x8>

08001e3c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001e40:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb0 <MX_SPI2_Init+0x74>)
 8001e42:	4a1c      	ldr	r2, [pc, #112]	@ (8001eb4 <MX_SPI2_Init+0x78>)
 8001e44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e46:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb0 <MX_SPI2_Init+0x74>)
 8001e48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e4e:	4b18      	ldr	r3, [pc, #96]	@ (8001eb0 <MX_SPI2_Init+0x74>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e54:	4b16      	ldr	r3, [pc, #88]	@ (8001eb0 <MX_SPI2_Init+0x74>)
 8001e56:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001e5a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e5c:	4b14      	ldr	r3, [pc, #80]	@ (8001eb0 <MX_SPI2_Init+0x74>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e62:	4b13      	ldr	r3, [pc, #76]	@ (8001eb0 <MX_SPI2_Init+0x74>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e68:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <MX_SPI2_Init+0x74>)
 8001e6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e6e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001e70:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb0 <MX_SPI2_Init+0x74>)
 8001e72:	2210      	movs	r2, #16
 8001e74:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e76:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <MX_SPI2_Init+0x74>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb0 <MX_SPI2_Init+0x74>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e82:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb0 <MX_SPI2_Init+0x74>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001e88:	4b09      	ldr	r3, [pc, #36]	@ (8001eb0 <MX_SPI2_Init+0x74>)
 8001e8a:	2207      	movs	r2, #7
 8001e8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e8e:	4b08      	ldr	r3, [pc, #32]	@ (8001eb0 <MX_SPI2_Init+0x74>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001e94:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <MX_SPI2_Init+0x74>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e9a:	4805      	ldr	r0, [pc, #20]	@ (8001eb0 <MX_SPI2_Init+0x74>)
 8001e9c:	f003 fde8 	bl	8005a70 <HAL_SPI_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001ea6:	f7ff ffc3 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	2000a164 	.word	0x2000a164
 8001eb4:	40003800 	.word	0x40003800

08001eb8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	@ 0x28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a25      	ldr	r2, [pc, #148]	@ (8001f6c <HAL_SPI_MspInit+0xb4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d144      	bne.n	8001f64 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001eda:	4b25      	ldr	r3, [pc, #148]	@ (8001f70 <HAL_SPI_MspInit+0xb8>)
 8001edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ede:	4a24      	ldr	r2, [pc, #144]	@ (8001f70 <HAL_SPI_MspInit+0xb8>)
 8001ee0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ee4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ee6:	4b22      	ldr	r3, [pc, #136]	@ (8001f70 <HAL_SPI_MspInit+0xb8>)
 8001ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f70 <HAL_SPI_MspInit+0xb8>)
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef6:	4a1e      	ldr	r2, [pc, #120]	@ (8001f70 <HAL_SPI_MspInit+0xb8>)
 8001ef8:	f043 0304 	orr.w	r3, r3, #4
 8001efc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001efe:	4b1c      	ldr	r3, [pc, #112]	@ (8001f70 <HAL_SPI_MspInit+0xb8>)
 8001f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0a:	4b19      	ldr	r3, [pc, #100]	@ (8001f70 <HAL_SPI_MspInit+0xb8>)
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0e:	4a18      	ldr	r2, [pc, #96]	@ (8001f70 <HAL_SPI_MspInit+0xb8>)
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f16:	4b16      	ldr	r3, [pc, #88]	@ (8001f70 <HAL_SPI_MspInit+0xb8>)
 8001f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f22:	2308      	movs	r3, #8
 8001f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f32:	2305      	movs	r3, #5
 8001f34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f36:	f107 0314 	add.w	r3, r7, #20
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	480d      	ldr	r0, [pc, #52]	@ (8001f74 <HAL_SPI_MspInit+0xbc>)
 8001f3e:	f002 f87d 	bl	800403c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f50:	2303      	movs	r3, #3
 8001f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f54:	2305      	movs	r3, #5
 8001f56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4806      	ldr	r0, [pc, #24]	@ (8001f78 <HAL_SPI_MspInit+0xc0>)
 8001f60:	f002 f86c 	bl	800403c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001f64:	bf00      	nop
 8001f66:	3728      	adds	r7, #40	@ 0x28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40003800 	.word	0x40003800
 8001f70:	40021000 	.word	0x40021000
 8001f74:	48000800 	.word	0x48000800
 8001f78:	48000400 	.word	0x48000400

08001f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f82:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc0 <HAL_MspInit+0x44>)
 8001f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f86:	4a0e      	ldr	r2, [pc, #56]	@ (8001fc0 <HAL_MspInit+0x44>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc0 <HAL_MspInit+0x44>)
 8001f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f9a:	4b09      	ldr	r3, [pc, #36]	@ (8001fc0 <HAL_MspInit+0x44>)
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9e:	4a08      	ldr	r2, [pc, #32]	@ (8001fc0 <HAL_MspInit+0x44>)
 8001fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fa6:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <HAL_MspInit+0x44>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40021000 	.word	0x40021000

08001fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fc8:	bf00      	nop
 8001fca:	e7fd      	b.n	8001fc8 <NMI_Handler+0x4>

08001fcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fd0:	bf00      	nop
 8001fd2:	e7fd      	b.n	8001fd0 <HardFault_Handler+0x4>

08001fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd8:	bf00      	nop
 8001fda:	e7fd      	b.n	8001fd8 <MemManage_Handler+0x4>

08001fdc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fe0:	bf00      	nop
 8001fe2:	e7fd      	b.n	8001fe0 <BusFault_Handler+0x4>

08001fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe8:	bf00      	nop
 8001fea:	e7fd      	b.n	8001fe8 <UsageFault_Handler+0x4>

08001fec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800201a:	f000 f9cd 	bl	80023b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002028:	4802      	ldr	r0, [pc, #8]	@ (8002034 <DMA1_Channel1_IRQHandler+0x10>)
 800202a:	f001 ff27 	bl	8003e7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000108 	.word	0x20000108

08002038 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	e00a      	b.n	8002060 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800204a:	f3af 8000 	nop.w
 800204e:	4601      	mov	r1, r0
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	1c5a      	adds	r2, r3, #1
 8002054:	60ba      	str	r2, [r7, #8]
 8002056:	b2ca      	uxtb	r2, r1
 8002058:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	3301      	adds	r3, #1
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	429a      	cmp	r2, r3
 8002066:	dbf0      	blt.n	800204a <_read+0x12>
  }

  return len;
 8002068:	687b      	ldr	r3, [r7, #4]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b086      	sub	sp, #24
 8002076:	af00      	add	r7, sp, #0
 8002078:	60f8      	str	r0, [r7, #12]
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	e009      	b.n	8002098 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	1c5a      	adds	r2, r3, #1
 8002088:	60ba      	str	r2, [r7, #8]
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff f9dd 	bl	800144c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	3301      	adds	r3, #1
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	429a      	cmp	r2, r3
 800209e:	dbf1      	blt.n	8002084 <_write+0x12>
  }
  return len;
 80020a0:	687b      	ldr	r3, [r7, #4]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <_close>:

int _close(int file)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020d2:	605a      	str	r2, [r3, #4]
  return 0;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <_isatty>:

int _isatty(int file)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020ea:	2301      	movs	r3, #1
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800211c:	4a14      	ldr	r2, [pc, #80]	@ (8002170 <_sbrk+0x5c>)
 800211e:	4b15      	ldr	r3, [pc, #84]	@ (8002174 <_sbrk+0x60>)
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002128:	4b13      	ldr	r3, [pc, #76]	@ (8002178 <_sbrk+0x64>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d102      	bne.n	8002136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002130:	4b11      	ldr	r3, [pc, #68]	@ (8002178 <_sbrk+0x64>)
 8002132:	4a12      	ldr	r2, [pc, #72]	@ (800217c <_sbrk+0x68>)
 8002134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002136:	4b10      	ldr	r3, [pc, #64]	@ (8002178 <_sbrk+0x64>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	429a      	cmp	r2, r3
 8002142:	d207      	bcs.n	8002154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002144:	f006 f894 	bl	8008270 <__errno>
 8002148:	4603      	mov	r3, r0
 800214a:	220c      	movs	r2, #12
 800214c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800214e:	f04f 33ff 	mov.w	r3, #4294967295
 8002152:	e009      	b.n	8002168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002154:	4b08      	ldr	r3, [pc, #32]	@ (8002178 <_sbrk+0x64>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800215a:	4b07      	ldr	r3, [pc, #28]	@ (8002178 <_sbrk+0x64>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	4a05      	ldr	r2, [pc, #20]	@ (8002178 <_sbrk+0x64>)
 8002164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002166:	68fb      	ldr	r3, [r7, #12]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20018000 	.word	0x20018000
 8002174:	00002000 	.word	0x00002000
 8002178:	2000a1c8 	.word	0x2000a1c8
 800217c:	2000a3a8 	.word	0x2000a3a8

08002180 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002184:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <SystemInit+0x20>)
 8002186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800218a:	4a05      	ldr	r2, [pc, #20]	@ (80021a0 <SystemInit+0x20>)
 800218c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002190:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021a8:	4b14      	ldr	r3, [pc, #80]	@ (80021fc <MX_USART2_UART_Init+0x58>)
 80021aa:	4a15      	ldr	r2, [pc, #84]	@ (8002200 <MX_USART2_UART_Init+0x5c>)
 80021ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021ae:	4b13      	ldr	r3, [pc, #76]	@ (80021fc <MX_USART2_UART_Init+0x58>)
 80021b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021b6:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <MX_USART2_UART_Init+0x58>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021bc:	4b0f      	ldr	r3, [pc, #60]	@ (80021fc <MX_USART2_UART_Init+0x58>)
 80021be:	2200      	movs	r2, #0
 80021c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021c2:	4b0e      	ldr	r3, [pc, #56]	@ (80021fc <MX_USART2_UART_Init+0x58>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021c8:	4b0c      	ldr	r3, [pc, #48]	@ (80021fc <MX_USART2_UART_Init+0x58>)
 80021ca:	220c      	movs	r2, #12
 80021cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ce:	4b0b      	ldr	r3, [pc, #44]	@ (80021fc <MX_USART2_UART_Init+0x58>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d4:	4b09      	ldr	r3, [pc, #36]	@ (80021fc <MX_USART2_UART_Init+0x58>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021da:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <MX_USART2_UART_Init+0x58>)
 80021dc:	2200      	movs	r2, #0
 80021de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021e0:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <MX_USART2_UART_Init+0x58>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021e6:	4805      	ldr	r0, [pc, #20]	@ (80021fc <MX_USART2_UART_Init+0x58>)
 80021e8:	f003 ffce 	bl	8006188 <HAL_UART_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80021f2:	f7ff fe1d 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	2000a1cc 	.word	0x2000a1cc
 8002200:	40004400 	.word	0x40004400

08002204 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b0ac      	sub	sp, #176	@ 0xb0
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	2288      	movs	r2, #136	@ 0x88
 8002222:	2100      	movs	r1, #0
 8002224:	4618      	mov	r0, r3
 8002226:	f005 ffd4 	bl	80081d2 <memset>
  if(uartHandle->Instance==USART2)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a21      	ldr	r2, [pc, #132]	@ (80022b4 <HAL_UART_MspInit+0xb0>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d13b      	bne.n	80022ac <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002234:	2302      	movs	r3, #2
 8002236:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002238:	2300      	movs	r3, #0
 800223a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	4618      	mov	r0, r3
 8002242:	f002 ff49 	bl	80050d8 <HAL_RCCEx_PeriphCLKConfig>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800224c:	f7ff fdf0 	bl	8001e30 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002250:	4b19      	ldr	r3, [pc, #100]	@ (80022b8 <HAL_UART_MspInit+0xb4>)
 8002252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002254:	4a18      	ldr	r2, [pc, #96]	@ (80022b8 <HAL_UART_MspInit+0xb4>)
 8002256:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800225a:	6593      	str	r3, [r2, #88]	@ 0x58
 800225c:	4b16      	ldr	r3, [pc, #88]	@ (80022b8 <HAL_UART_MspInit+0xb4>)
 800225e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002268:	4b13      	ldr	r3, [pc, #76]	@ (80022b8 <HAL_UART_MspInit+0xb4>)
 800226a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226c:	4a12      	ldr	r2, [pc, #72]	@ (80022b8 <HAL_UART_MspInit+0xb4>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002274:	4b10      	ldr	r3, [pc, #64]	@ (80022b8 <HAL_UART_MspInit+0xb4>)
 8002276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002280:	230c      	movs	r3, #12
 8002282:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002286:	2302      	movs	r3, #2
 8002288:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002292:	2303      	movs	r3, #3
 8002294:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002298:	2307      	movs	r3, #7
 800229a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80022a2:	4619      	mov	r1, r3
 80022a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022a8:	f001 fec8 	bl	800403c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80022ac:	bf00      	nop
 80022ae:	37b0      	adds	r7, #176	@ 0xb0
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40004400 	.word	0x40004400
 80022b8:	40021000 	.word	0x40021000

080022bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022c0:	f7ff ff5e 	bl	8002180 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022c4:	480c      	ldr	r0, [pc, #48]	@ (80022f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80022c6:	490d      	ldr	r1, [pc, #52]	@ (80022fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80022c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002300 <LoopForever+0xe>)
  movs r3, #0
 80022ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022cc:	e002      	b.n	80022d4 <LoopCopyDataInit>

080022ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022d2:	3304      	adds	r3, #4

080022d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022d8:	d3f9      	bcc.n	80022ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022da:	4a0a      	ldr	r2, [pc, #40]	@ (8002304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022dc:	4c0a      	ldr	r4, [pc, #40]	@ (8002308 <LoopForever+0x16>)
  movs r3, #0
 80022de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022e0:	e001      	b.n	80022e6 <LoopFillZerobss>

080022e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022e4:	3204      	adds	r2, #4

080022e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022e8:	d3fb      	bcc.n	80022e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022ea:	f005 ffc7 	bl	800827c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022ee:	f7ff fc7b 	bl	8001be8 <main>

080022f2 <LoopForever>:

LoopForever:
    b LoopForever
 80022f2:	e7fe      	b.n	80022f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80022f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80022f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022fc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002300:	0800be74 	.word	0x0800be74
  ldr r2, =_sbss
 8002304:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002308:	2000a3a4 	.word	0x2000a3a4

0800230c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800230c:	e7fe      	b.n	800230c <ADC1_2_IRQHandler>

0800230e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002318:	2003      	movs	r0, #3
 800231a:	f001 fc55 	bl	8003bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800231e:	200f      	movs	r0, #15
 8002320:	f000 f80e 	bl	8002340 <HAL_InitTick>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	71fb      	strb	r3, [r7, #7]
 800232e:	e001      	b.n	8002334 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002330:	f7ff fe24 	bl	8001f7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002334:	79fb      	ldrb	r3, [r7, #7]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800234c:	4b17      	ldr	r3, [pc, #92]	@ (80023ac <HAL_InitTick+0x6c>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d023      	beq.n	800239c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002354:	4b16      	ldr	r3, [pc, #88]	@ (80023b0 <HAL_InitTick+0x70>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b14      	ldr	r3, [pc, #80]	@ (80023ac <HAL_InitTick+0x6c>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	4619      	mov	r1, r3
 800235e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002362:	fbb3 f3f1 	udiv	r3, r3, r1
 8002366:	fbb2 f3f3 	udiv	r3, r2, r3
 800236a:	4618      	mov	r0, r3
 800236c:	f001 fc61 	bl	8003c32 <HAL_SYSTICK_Config>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10f      	bne.n	8002396 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b0f      	cmp	r3, #15
 800237a:	d809      	bhi.n	8002390 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800237c:	2200      	movs	r2, #0
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	f04f 30ff 	mov.w	r0, #4294967295
 8002384:	f001 fc2b 	bl	8003bde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002388:	4a0a      	ldr	r2, [pc, #40]	@ (80023b4 <HAL_InitTick+0x74>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	e007      	b.n	80023a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
 8002394:	e004      	b.n	80023a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	73fb      	strb	r3, [r7, #15]
 800239a:	e001      	b.n	80023a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000020 	.word	0x20000020
 80023b0:	20000018 	.word	0x20000018
 80023b4:	2000001c 	.word	0x2000001c

080023b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023bc:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <HAL_IncTick+0x20>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	4b06      	ldr	r3, [pc, #24]	@ (80023dc <HAL_IncTick+0x24>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4413      	add	r3, r2
 80023c8:	4a04      	ldr	r2, [pc, #16]	@ (80023dc <HAL_IncTick+0x24>)
 80023ca:	6013      	str	r3, [r2, #0]
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	20000020 	.word	0x20000020
 80023dc:	2000a254 	.word	0x2000a254

080023e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return uwTick;
 80023e4:	4b03      	ldr	r3, [pc, #12]	@ (80023f4 <HAL_GetTick+0x14>)
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	2000a254 	.word	0x2000a254

080023f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002400:	f7ff ffee 	bl	80023e0 <HAL_GetTick>
 8002404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002410:	d005      	beq.n	800241e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002412:	4b0a      	ldr	r3, [pc, #40]	@ (800243c <HAL_Delay+0x44>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4413      	add	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800241e:	bf00      	nop
 8002420:	f7ff ffde 	bl	80023e0 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	429a      	cmp	r2, r3
 800242e:	d8f7      	bhi.n	8002420 <HAL_Delay+0x28>
  {
  }
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000020 	.word	0x20000020

08002440 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	609a      	str	r2, [r3, #8]
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	609a      	str	r2, [r3, #8]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800249c:	4618      	mov	r0, r3
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3360      	adds	r3, #96	@ 0x60
 80024ba:	461a      	mov	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b08      	ldr	r3, [pc, #32]	@ (80024ec <LL_ADC_SetOffset+0x44>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80024e0:	bf00      	nop
 80024e2:	371c      	adds	r7, #28
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	03fff000 	.word	0x03fff000

080024f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3360      	adds	r3, #96	@ 0x60
 80024fe:	461a      	mov	r2, r3
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002510:	4618      	mov	r0, r3
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800251c:	b480      	push	{r7}
 800251e:	b087      	sub	sp, #28
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	3360      	adds	r3, #96	@ 0x60
 800252c:	461a      	mov	r2, r3
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	431a      	orrs	r2, r3
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002546:	bf00      	nop
 8002548:	371c      	adds	r7, #28
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	3330      	adds	r3, #48	@ 0x30
 8002588:	461a      	mov	r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	0a1b      	lsrs	r3, r3, #8
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	f003 030c 	and.w	r3, r3, #12
 8002594:	4413      	add	r3, r2
 8002596:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	211f      	movs	r1, #31
 80025a4:	fa01 f303 	lsl.w	r3, r1, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	401a      	ands	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	0e9b      	lsrs	r3, r3, #26
 80025b0:	f003 011f 	and.w	r1, r3, #31
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	431a      	orrs	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025c4:	bf00      	nop
 80025c6:	371c      	adds	r7, #28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	3314      	adds	r3, #20
 80025e0:	461a      	mov	r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	0e5b      	lsrs	r3, r3, #25
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	4413      	add	r3, r2
 80025ee:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	0d1b      	lsrs	r3, r3, #20
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	2107      	movs	r1, #7
 80025fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002602:	43db      	mvns	r3, r3
 8002604:	401a      	ands	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	0d1b      	lsrs	r3, r3, #20
 800260a:	f003 031f 	and.w	r3, r3, #31
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	fa01 f303 	lsl.w	r3, r1, r3
 8002614:	431a      	orrs	r2, r3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800261a:	bf00      	nop
 800261c:	371c      	adds	r7, #28
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
	...

08002628 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002640:	43db      	mvns	r3, r3
 8002642:	401a      	ands	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f003 0318 	and.w	r3, r3, #24
 800264a:	4908      	ldr	r1, [pc, #32]	@ (800266c <LL_ADC_SetChannelSingleDiff+0x44>)
 800264c:	40d9      	lsrs	r1, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	400b      	ands	r3, r1
 8002652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002656:	431a      	orrs	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800265e:	bf00      	nop
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	0007ffff 	.word	0x0007ffff

08002670 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 031f 	and.w	r3, r3, #31
}
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800269c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6093      	str	r3, [r2, #8]
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026c4:	d101      	bne.n	80026ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80026e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002710:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002714:	d101      	bne.n	800271a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002738:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800273c:	f043 0201 	orr.w	r2, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002760:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002764:	f043 0202 	orr.w	r2, r3, #2
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <LL_ADC_IsEnabled+0x18>
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <LL_ADC_IsEnabled+0x1a>
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d101      	bne.n	80027b6 <LL_ADC_IsDisableOngoing+0x18>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <LL_ADC_IsDisableOngoing+0x1a>
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80027d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027d8:	f043 0204 	orr.w	r2, r3, #4
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d101      	bne.n	8002804 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b08      	cmp	r3, #8
 8002824:	d101      	bne.n	800282a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002838:	b590      	push	{r4, r7, lr}
 800283a:	b089      	sub	sp, #36	@ 0x24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e130      	b.n	8002ab4 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800285c:	2b00      	cmp	r3, #0
 800285e:	d109      	bne.n	8002874 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7fe fb17 	bl	8000e94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff ff19 	bl	80026b0 <LL_ADC_IsDeepPowerDownEnabled>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d004      	beq.n	800288e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff feff 	bl	800268c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff ff34 	bl	8002700 <LL_ADC_IsInternalRegulatorEnabled>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d115      	bne.n	80028ca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff ff18 	bl	80026d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028a8:	4b84      	ldr	r3, [pc, #528]	@ (8002abc <HAL_ADC_Init+0x284>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	099b      	lsrs	r3, r3, #6
 80028ae:	4a84      	ldr	r2, [pc, #528]	@ (8002ac0 <HAL_ADC_Init+0x288>)
 80028b0:	fba2 2303 	umull	r2, r3, r2, r3
 80028b4:	099b      	lsrs	r3, r3, #6
 80028b6:	3301      	adds	r3, #1
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80028bc:	e002      	b.n	80028c4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	3b01      	subs	r3, #1
 80028c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f9      	bne.n	80028be <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff ff16 	bl	8002700 <LL_ADC_IsInternalRegulatorEnabled>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10d      	bne.n	80028f6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028de:	f043 0210 	orr.w	r2, r3, #16
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ea:	f043 0201 	orr.w	r2, r3, #1
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff ff76 	bl	80027ec <LL_ADC_REG_IsConversionOngoing>
 8002900:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002906:	f003 0310 	and.w	r3, r3, #16
 800290a:	2b00      	cmp	r3, #0
 800290c:	f040 80c9 	bne.w	8002aa2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	2b00      	cmp	r3, #0
 8002914:	f040 80c5 	bne.w	8002aa2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800291c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002920:	f043 0202 	orr.w	r2, r3, #2
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff ff23 	bl	8002778 <LL_ADC_IsEnabled>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d115      	bne.n	8002964 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002938:	4862      	ldr	r0, [pc, #392]	@ (8002ac4 <HAL_ADC_Init+0x28c>)
 800293a:	f7ff ff1d 	bl	8002778 <LL_ADC_IsEnabled>
 800293e:	4604      	mov	r4, r0
 8002940:	4861      	ldr	r0, [pc, #388]	@ (8002ac8 <HAL_ADC_Init+0x290>)
 8002942:	f7ff ff19 	bl	8002778 <LL_ADC_IsEnabled>
 8002946:	4603      	mov	r3, r0
 8002948:	431c      	orrs	r4, r3
 800294a:	4860      	ldr	r0, [pc, #384]	@ (8002acc <HAL_ADC_Init+0x294>)
 800294c:	f7ff ff14 	bl	8002778 <LL_ADC_IsEnabled>
 8002950:	4603      	mov	r3, r0
 8002952:	4323      	orrs	r3, r4
 8002954:	2b00      	cmp	r3, #0
 8002956:	d105      	bne.n	8002964 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	4619      	mov	r1, r3
 800295e:	485c      	ldr	r0, [pc, #368]	@ (8002ad0 <HAL_ADC_Init+0x298>)
 8002960:	f7ff fd6e 	bl	8002440 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	7e5b      	ldrb	r3, [r3, #25]
 8002968:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800296e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002974:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800297a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002982:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d106      	bne.n	80029a0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002996:	3b01      	subs	r3, #1
 8002998:	045b      	lsls	r3, r3, #17
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4313      	orrs	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d009      	beq.n	80029bc <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ac:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68da      	ldr	r2, [r3, #12]
 80029c2:	4b44      	ldr	r3, [pc, #272]	@ (8002ad4 <HAL_ADC_Init+0x29c>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6812      	ldr	r2, [r2, #0]
 80029ca:	69b9      	ldr	r1, [r7, #24]
 80029cc:	430b      	orrs	r3, r1
 80029ce:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ff1c 	bl	8002812 <LL_ADC_INJ_IsConversionOngoing>
 80029da:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d13d      	bne.n	8002a5e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d13a      	bne.n	8002a5e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029ec:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80029f4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a04:	f023 0302 	bic.w	r3, r3, #2
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	69b9      	ldr	r1, [r7, #24]
 8002a0e:	430b      	orrs	r3, r1
 8002a10:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d118      	bne.n	8002a4e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002a26:	f023 0304 	bic.w	r3, r3, #4
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002a32:	4311      	orrs	r1, r2
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002a38:	4311      	orrs	r1, r2
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	431a      	orrs	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0201 	orr.w	r2, r2, #1
 8002a4a:	611a      	str	r2, [r3, #16]
 8002a4c:	e007      	b.n	8002a5e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0201 	bic.w	r2, r2, #1
 8002a5c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d10c      	bne.n	8002a80 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6c:	f023 010f 	bic.w	r1, r3, #15
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	1e5a      	subs	r2, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a7e:	e007      	b.n	8002a90 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 020f 	bic.w	r2, r2, #15
 8002a8e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a94:	f023 0303 	bic.w	r3, r3, #3
 8002a98:	f043 0201 	orr.w	r2, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002aa0:	e007      	b.n	8002ab2 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa6:	f043 0210 	orr.w	r2, r3, #16
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ab2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3724      	adds	r7, #36	@ 0x24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd90      	pop	{r4, r7, pc}
 8002abc:	20000018 	.word	0x20000018
 8002ac0:	053e2d63 	.word	0x053e2d63
 8002ac4:	50040000 	.word	0x50040000
 8002ac8:	50040100 	.word	0x50040100
 8002acc:	50040200 	.word	0x50040200
 8002ad0:	50040300 	.word	0x50040300
 8002ad4:	fff0c007 	.word	0xfff0c007

08002ad8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ae4:	4853      	ldr	r0, [pc, #332]	@ (8002c34 <HAL_ADC_Start_DMA+0x15c>)
 8002ae6:	f7ff fdc3 	bl	8002670 <LL_ADC_GetMultimode>
 8002aea:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff fe7b 	bl	80027ec <LL_ADC_REG_IsConversionOngoing>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f040 8093 	bne.w	8002c24 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_ADC_Start_DMA+0x34>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e08e      	b.n	8002c2a <HAL_ADC_Start_DMA+0x152>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a47      	ldr	r2, [pc, #284]	@ (8002c38 <HAL_ADC_Start_DMA+0x160>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d008      	beq.n	8002b30 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	2b05      	cmp	r3, #5
 8002b28:	d002      	beq.n	8002b30 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	2b09      	cmp	r3, #9
 8002b2e:	d172      	bne.n	8002c16 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 fc9d 	bl	8003470 <ADC_Enable>
 8002b36:	4603      	mov	r3, r0
 8002b38:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002b3a:	7dfb      	ldrb	r3, [r7, #23]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d165      	bne.n	8002c0c <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b44:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b48:	f023 0301 	bic.w	r3, r3, #1
 8002b4c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a38      	ldr	r2, [pc, #224]	@ (8002c3c <HAL_ADC_Start_DMA+0x164>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d002      	beq.n	8002b64 <HAL_ADC_Start_DMA+0x8c>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	e000      	b.n	8002b66 <HAL_ADC_Start_DMA+0x8e>
 8002b64:	4b36      	ldr	r3, [pc, #216]	@ (8002c40 <HAL_ADC_Start_DMA+0x168>)
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	6812      	ldr	r2, [r2, #0]
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d002      	beq.n	8002b74 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d105      	bne.n	8002b80 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b78:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d006      	beq.n	8002b9a <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b90:	f023 0206 	bic.w	r2, r3, #6
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b98:	e002      	b.n	8002ba0 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ba4:	4a27      	ldr	r2, [pc, #156]	@ (8002c44 <HAL_ADC_Start_DMA+0x16c>)
 8002ba6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bac:	4a26      	ldr	r2, [pc, #152]	@ (8002c48 <HAL_ADC_Start_DMA+0x170>)
 8002bae:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bb4:	4a25      	ldr	r2, [pc, #148]	@ (8002c4c <HAL_ADC_Start_DMA+0x174>)
 8002bb6:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	221c      	movs	r2, #28
 8002bbe:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0210 	orr.w	r2, r2, #16
 8002bd6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	3340      	adds	r3, #64	@ 0x40
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f001 f8e0 	bl	8003dbc <HAL_DMA_Start_IT>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff fddd 	bl	80027c4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002c0a:	e00d      	b.n	8002c28 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002c14:	e008      	b.n	8002c28 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002c22:	e001      	b.n	8002c28 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c24:	2302      	movs	r3, #2
 8002c26:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	50040300 	.word	0x50040300
 8002c38:	50040200 	.word	0x50040200
 8002c3c:	50040100 	.word	0x50040100
 8002c40:	50040000 	.word	0x50040000
 8002c44:	0800363b 	.word	0x0800363b
 8002c48:	08003713 	.word	0x08003713
 8002c4c:	0800372f 	.word	0x0800372f

08002c50 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b0b6      	sub	sp, #216	@ 0xd8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x22>
 8002caa:	2302      	movs	r3, #2
 8002cac:	e3c9      	b.n	8003442 <HAL_ADC_ConfigChannel+0x7b6>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff fd96 	bl	80027ec <LL_ADC_REG_IsConversionOngoing>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f040 83aa 	bne.w	800341c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b05      	cmp	r3, #5
 8002cd6:	d824      	bhi.n	8002d22 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	3b02      	subs	r3, #2
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d81b      	bhi.n	8002d1a <HAL_ADC_ConfigChannel+0x8e>
 8002ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ce8 <HAL_ADC_ConfigChannel+0x5c>)
 8002ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce8:	08002cf9 	.word	0x08002cf9
 8002cec:	08002d01 	.word	0x08002d01
 8002cf0:	08002d09 	.word	0x08002d09
 8002cf4:	08002d11 	.word	0x08002d11
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002cf8:	230c      	movs	r3, #12
 8002cfa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002cfe:	e010      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002d00:	2312      	movs	r3, #18
 8002d02:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d06:	e00c      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002d08:	2318      	movs	r3, #24
 8002d0a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d0e:	e008      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002d10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d18:	e003      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002d1a:	2306      	movs	r3, #6
 8002d1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d20:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002d30:	f7ff fc22 	bl	8002578 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff fd57 	bl	80027ec <LL_ADC_REG_IsConversionOngoing>
 8002d3e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff fd63 	bl	8002812 <LL_ADC_INJ_IsConversionOngoing>
 8002d4c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f040 81a4 	bne.w	80030a2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f040 819f 	bne.w	80030a2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6818      	ldr	r0, [r3, #0]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	6819      	ldr	r1, [r3, #0]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	461a      	mov	r2, r3
 8002d72:	f7ff fc2d 	bl	80025d0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	695a      	ldr	r2, [r3, #20]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	08db      	lsrs	r3, r3, #3
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d00a      	beq.n	8002dae <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6818      	ldr	r0, [r3, #0]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	6919      	ldr	r1, [r3, #16]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002da8:	f7ff fb7e 	bl	80024a8 <LL_ADC_SetOffset>
 8002dac:	e179      	b.n	80030a2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2100      	movs	r1, #0
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff fb9b 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10a      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x14e>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2100      	movs	r1, #0
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fb90 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	0e9b      	lsrs	r3, r3, #26
 8002dd4:	f003 021f 	and.w	r2, r3, #31
 8002dd8:	e01e      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x18c>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2100      	movs	r1, #0
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff fb85 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002df0:	fa93 f3a3 	rbit	r3, r3
 8002df4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002df8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002dfc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002e08:	2320      	movs	r3, #32
 8002e0a:	e004      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002e0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e10:	fab3 f383 	clz	r3, r3
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d105      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x1a4>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	0e9b      	lsrs	r3, r3, #26
 8002e2a:	f003 031f 	and.w	r3, r3, #31
 8002e2e:	e018      	b.n	8002e62 <HAL_ADC_ConfigChannel+0x1d6>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e3c:	fa93 f3a3 	rbit	r3, r3
 8002e40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002e44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002e48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002e4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002e54:	2320      	movs	r3, #32
 8002e56:	e004      	b.n	8002e62 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002e58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e5c:	fab3 f383 	clz	r3, r3
 8002e60:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d106      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff fb54 	bl	800251c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2101      	movs	r1, #1
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff fb38 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8002e80:	4603      	mov	r3, r0
 8002e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10a      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x214>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2101      	movs	r1, #1
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fb2d 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8002e96:	4603      	mov	r3, r0
 8002e98:	0e9b      	lsrs	r3, r3, #26
 8002e9a:	f003 021f 	and.w	r2, r3, #31
 8002e9e:	e01e      	b.n	8002ede <HAL_ADC_ConfigChannel+0x252>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff fb22 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8002eac:	4603      	mov	r3, r0
 8002eae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002eb6:	fa93 f3a3 	rbit	r3, r3
 8002eba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002ebe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ec2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002ec6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002ece:	2320      	movs	r3, #32
 8002ed0:	e004      	b.n	8002edc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002ed2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d105      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x26a>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	0e9b      	lsrs	r3, r3, #26
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	e018      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x29c>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f02:	fa93 f3a3 	rbit	r3, r3
 8002f06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002f0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f0e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002f12:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002f1a:	2320      	movs	r3, #32
 8002f1c:	e004      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002f1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f22:	fab3 f383 	clz	r3, r3
 8002f26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d106      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2200      	movs	r2, #0
 8002f32:	2101      	movs	r1, #1
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff faf1 	bl	800251c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2102      	movs	r1, #2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff fad5 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8002f46:	4603      	mov	r3, r0
 8002f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10a      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x2da>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2102      	movs	r1, #2
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff faca 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	0e9b      	lsrs	r3, r3, #26
 8002f60:	f003 021f 	and.w	r2, r3, #31
 8002f64:	e01e      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x318>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2102      	movs	r1, #2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff fabf 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8002f72:	4603      	mov	r3, r0
 8002f74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f7c:	fa93 f3a3 	rbit	r3, r3
 8002f80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002f8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002f94:	2320      	movs	r3, #32
 8002f96:	e004      	b.n	8002fa2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002f98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f9c:	fab3 f383 	clz	r3, r3
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d105      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x330>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	0e9b      	lsrs	r3, r3, #26
 8002fb6:	f003 031f 	and.w	r3, r3, #31
 8002fba:	e014      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0x35a>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fc4:	fa93 f3a3 	rbit	r3, r3
 8002fc8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002fca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002fd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002fd8:	2320      	movs	r3, #32
 8002fda:	e004      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002fdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fe0:	fab3 f383 	clz	r3, r3
 8002fe4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d106      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2102      	movs	r1, #2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fa92 	bl	800251c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2103      	movs	r1, #3
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff fa76 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8003004:	4603      	mov	r3, r0
 8003006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10a      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x398>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2103      	movs	r1, #3
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff fa6b 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 800301a:	4603      	mov	r3, r0
 800301c:	0e9b      	lsrs	r3, r3, #26
 800301e:	f003 021f 	and.w	r2, r3, #31
 8003022:	e017      	b.n	8003054 <HAL_ADC_ConfigChannel+0x3c8>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2103      	movs	r1, #3
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff fa60 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8003030:	4603      	mov	r3, r0
 8003032:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003034:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003036:	fa93 f3a3 	rbit	r3, r3
 800303a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800303c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800303e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003040:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003046:	2320      	movs	r3, #32
 8003048:	e003      	b.n	8003052 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800304a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800304c:	fab3 f383 	clz	r3, r3
 8003050:	b2db      	uxtb	r3, r3
 8003052:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305c:	2b00      	cmp	r3, #0
 800305e:	d105      	bne.n	800306c <HAL_ADC_ConfigChannel+0x3e0>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	0e9b      	lsrs	r3, r3, #26
 8003066:	f003 031f 	and.w	r3, r3, #31
 800306a:	e011      	b.n	8003090 <HAL_ADC_ConfigChannel+0x404>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003074:	fa93 f3a3 	rbit	r3, r3
 8003078:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800307a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800307c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800307e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003084:	2320      	movs	r3, #32
 8003086:	e003      	b.n	8003090 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003088:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800308a:	fab3 f383 	clz	r3, r3
 800308e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003090:	429a      	cmp	r2, r3
 8003092:	d106      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2200      	movs	r2, #0
 800309a:	2103      	movs	r1, #3
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff fa3d 	bl	800251c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff fb66 	bl	8002778 <LL_ADC_IsEnabled>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f040 8140 	bne.w	8003334 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	6819      	ldr	r1, [r3, #0]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	461a      	mov	r2, r3
 80030c2:	f7ff fab1 	bl	8002628 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	4a8f      	ldr	r2, [pc, #572]	@ (8003308 <HAL_ADC_ConfigChannel+0x67c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	f040 8131 	bne.w	8003334 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10b      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x46e>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	0e9b      	lsrs	r3, r3, #26
 80030e8:	3301      	adds	r3, #1
 80030ea:	f003 031f 	and.w	r3, r3, #31
 80030ee:	2b09      	cmp	r3, #9
 80030f0:	bf94      	ite	ls
 80030f2:	2301      	movls	r3, #1
 80030f4:	2300      	movhi	r3, #0
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	e019      	b.n	800312e <HAL_ADC_ConfigChannel+0x4a2>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003100:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003102:	fa93 f3a3 	rbit	r3, r3
 8003106:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800310a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800310c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003112:	2320      	movs	r3, #32
 8003114:	e003      	b.n	800311e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003116:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003118:	fab3 f383 	clz	r3, r3
 800311c:	b2db      	uxtb	r3, r3
 800311e:	3301      	adds	r3, #1
 8003120:	f003 031f 	and.w	r3, r3, #31
 8003124:	2b09      	cmp	r3, #9
 8003126:	bf94      	ite	ls
 8003128:	2301      	movls	r3, #1
 800312a:	2300      	movhi	r3, #0
 800312c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800312e:	2b00      	cmp	r3, #0
 8003130:	d079      	beq.n	8003226 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800313a:	2b00      	cmp	r3, #0
 800313c:	d107      	bne.n	800314e <HAL_ADC_ConfigChannel+0x4c2>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	0e9b      	lsrs	r3, r3, #26
 8003144:	3301      	adds	r3, #1
 8003146:	069b      	lsls	r3, r3, #26
 8003148:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800314c:	e015      	b.n	800317a <HAL_ADC_ConfigChannel+0x4ee>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003154:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003156:	fa93 f3a3 	rbit	r3, r3
 800315a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800315c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800315e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003160:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003166:	2320      	movs	r3, #32
 8003168:	e003      	b.n	8003172 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800316a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800316c:	fab3 f383 	clz	r3, r3
 8003170:	b2db      	uxtb	r3, r3
 8003172:	3301      	adds	r3, #1
 8003174:	069b      	lsls	r3, r3, #26
 8003176:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003182:	2b00      	cmp	r3, #0
 8003184:	d109      	bne.n	800319a <HAL_ADC_ConfigChannel+0x50e>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	0e9b      	lsrs	r3, r3, #26
 800318c:	3301      	adds	r3, #1
 800318e:	f003 031f 	and.w	r3, r3, #31
 8003192:	2101      	movs	r1, #1
 8003194:	fa01 f303 	lsl.w	r3, r1, r3
 8003198:	e017      	b.n	80031ca <HAL_ADC_ConfigChannel+0x53e>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031a2:	fa93 f3a3 	rbit	r3, r3
 80031a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80031a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031aa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80031ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80031b2:	2320      	movs	r3, #32
 80031b4:	e003      	b.n	80031be <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80031b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031b8:	fab3 f383 	clz	r3, r3
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	3301      	adds	r3, #1
 80031c0:	f003 031f 	and.w	r3, r3, #31
 80031c4:	2101      	movs	r1, #1
 80031c6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ca:	ea42 0103 	orr.w	r1, r2, r3
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10a      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x564>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	0e9b      	lsrs	r3, r3, #26
 80031e0:	3301      	adds	r3, #1
 80031e2:	f003 021f 	and.w	r2, r3, #31
 80031e6:	4613      	mov	r3, r2
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	4413      	add	r3, r2
 80031ec:	051b      	lsls	r3, r3, #20
 80031ee:	e018      	b.n	8003222 <HAL_ADC_ConfigChannel+0x596>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f8:	fa93 f3a3 	rbit	r3, r3
 80031fc:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80031fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003200:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003208:	2320      	movs	r3, #32
 800320a:	e003      	b.n	8003214 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800320c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800320e:	fab3 f383 	clz	r3, r3
 8003212:	b2db      	uxtb	r3, r3
 8003214:	3301      	adds	r3, #1
 8003216:	f003 021f 	and.w	r2, r3, #31
 800321a:	4613      	mov	r3, r2
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	4413      	add	r3, r2
 8003220:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003222:	430b      	orrs	r3, r1
 8003224:	e081      	b.n	800332a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800322e:	2b00      	cmp	r3, #0
 8003230:	d107      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x5b6>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	0e9b      	lsrs	r3, r3, #26
 8003238:	3301      	adds	r3, #1
 800323a:	069b      	lsls	r3, r3, #26
 800323c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003240:	e015      	b.n	800326e <HAL_ADC_ConfigChannel+0x5e2>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800324a:	fa93 f3a3 	rbit	r3, r3
 800324e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003252:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800325a:	2320      	movs	r3, #32
 800325c:	e003      	b.n	8003266 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800325e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003260:	fab3 f383 	clz	r3, r3
 8003264:	b2db      	uxtb	r3, r3
 8003266:	3301      	adds	r3, #1
 8003268:	069b      	lsls	r3, r3, #26
 800326a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003276:	2b00      	cmp	r3, #0
 8003278:	d109      	bne.n	800328e <HAL_ADC_ConfigChannel+0x602>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	0e9b      	lsrs	r3, r3, #26
 8003280:	3301      	adds	r3, #1
 8003282:	f003 031f 	and.w	r3, r3, #31
 8003286:	2101      	movs	r1, #1
 8003288:	fa01 f303 	lsl.w	r3, r1, r3
 800328c:	e017      	b.n	80032be <HAL_ADC_ConfigChannel+0x632>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	fa93 f3a3 	rbit	r3, r3
 800329a:	61bb      	str	r3, [r7, #24]
  return result;
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80032a6:	2320      	movs	r3, #32
 80032a8:	e003      	b.n	80032b2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	fab3 f383 	clz	r3, r3
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	3301      	adds	r3, #1
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	2101      	movs	r1, #1
 80032ba:	fa01 f303 	lsl.w	r3, r1, r3
 80032be:	ea42 0103 	orr.w	r1, r2, r3
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10d      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x65e>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	0e9b      	lsrs	r3, r3, #26
 80032d4:	3301      	adds	r3, #1
 80032d6:	f003 021f 	and.w	r2, r3, #31
 80032da:	4613      	mov	r3, r2
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	4413      	add	r3, r2
 80032e0:	3b1e      	subs	r3, #30
 80032e2:	051b      	lsls	r3, r3, #20
 80032e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032e8:	e01e      	b.n	8003328 <HAL_ADC_ConfigChannel+0x69c>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	fa93 f3a3 	rbit	r3, r3
 80032f6:	60fb      	str	r3, [r7, #12]
  return result;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d104      	bne.n	800330c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003302:	2320      	movs	r3, #32
 8003304:	e006      	b.n	8003314 <HAL_ADC_ConfigChannel+0x688>
 8003306:	bf00      	nop
 8003308:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	fab3 f383 	clz	r3, r3
 8003312:	b2db      	uxtb	r3, r3
 8003314:	3301      	adds	r3, #1
 8003316:	f003 021f 	and.w	r2, r3, #31
 800331a:	4613      	mov	r3, r2
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	4413      	add	r3, r2
 8003320:	3b1e      	subs	r3, #30
 8003322:	051b      	lsls	r3, r3, #20
 8003324:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003328:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800332e:	4619      	mov	r1, r3
 8003330:	f7ff f94e 	bl	80025d0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	4b44      	ldr	r3, [pc, #272]	@ (800344c <HAL_ADC_ConfigChannel+0x7c0>)
 800333a:	4013      	ands	r3, r2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d07a      	beq.n	8003436 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003340:	4843      	ldr	r0, [pc, #268]	@ (8003450 <HAL_ADC_ConfigChannel+0x7c4>)
 8003342:	f7ff f8a3 	bl	800248c <LL_ADC_GetCommonPathInternalCh>
 8003346:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a41      	ldr	r2, [pc, #260]	@ (8003454 <HAL_ADC_ConfigChannel+0x7c8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d12c      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003354:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003358:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d126      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a3c      	ldr	r2, [pc, #240]	@ (8003458 <HAL_ADC_ConfigChannel+0x7cc>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d004      	beq.n	8003374 <HAL_ADC_ConfigChannel+0x6e8>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a3b      	ldr	r2, [pc, #236]	@ (800345c <HAL_ADC_ConfigChannel+0x7d0>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d15d      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003374:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003378:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800337c:	4619      	mov	r1, r3
 800337e:	4834      	ldr	r0, [pc, #208]	@ (8003450 <HAL_ADC_ConfigChannel+0x7c4>)
 8003380:	f7ff f871 	bl	8002466 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003384:	4b36      	ldr	r3, [pc, #216]	@ (8003460 <HAL_ADC_ConfigChannel+0x7d4>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	099b      	lsrs	r3, r3, #6
 800338a:	4a36      	ldr	r2, [pc, #216]	@ (8003464 <HAL_ADC_ConfigChannel+0x7d8>)
 800338c:	fba2 2303 	umull	r2, r3, r2, r3
 8003390:	099b      	lsrs	r3, r3, #6
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	4613      	mov	r3, r2
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	4413      	add	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800339e:	e002      	b.n	80033a6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f9      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033ac:	e040      	b.n	8003430 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a2d      	ldr	r2, [pc, #180]	@ (8003468 <HAL_ADC_ConfigChannel+0x7dc>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d118      	bne.n	80033ea <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d112      	bne.n	80033ea <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a23      	ldr	r2, [pc, #140]	@ (8003458 <HAL_ADC_ConfigChannel+0x7cc>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d004      	beq.n	80033d8 <HAL_ADC_ConfigChannel+0x74c>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a22      	ldr	r2, [pc, #136]	@ (800345c <HAL_ADC_ConfigChannel+0x7d0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d12d      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033e0:	4619      	mov	r1, r3
 80033e2:	481b      	ldr	r0, [pc, #108]	@ (8003450 <HAL_ADC_ConfigChannel+0x7c4>)
 80033e4:	f7ff f83f 	bl	8002466 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033e8:	e024      	b.n	8003434 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a1f      	ldr	r2, [pc, #124]	@ (800346c <HAL_ADC_ConfigChannel+0x7e0>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d120      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80033f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d11a      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a14      	ldr	r2, [pc, #80]	@ (8003458 <HAL_ADC_ConfigChannel+0x7cc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d115      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800340a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800340e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003412:	4619      	mov	r1, r3
 8003414:	480e      	ldr	r0, [pc, #56]	@ (8003450 <HAL_ADC_ConfigChannel+0x7c4>)
 8003416:	f7ff f826 	bl	8002466 <LL_ADC_SetCommonPathInternalCh>
 800341a:	e00c      	b.n	8003436 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003420:	f043 0220 	orr.w	r2, r3, #32
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800342e:	e002      	b.n	8003436 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003430:	bf00      	nop
 8003432:	e000      	b.n	8003436 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003434:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800343e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003442:	4618      	mov	r0, r3
 8003444:	37d8      	adds	r7, #216	@ 0xd8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	80080000 	.word	0x80080000
 8003450:	50040300 	.word	0x50040300
 8003454:	c7520000 	.word	0xc7520000
 8003458:	50040000 	.word	0x50040000
 800345c:	50040200 	.word	0x50040200
 8003460:	20000018 	.word	0x20000018
 8003464:	053e2d63 	.word	0x053e2d63
 8003468:	cb840000 	.word	0xcb840000
 800346c:	80000001 	.word	0x80000001

08003470 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003478:	2300      	movs	r3, #0
 800347a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff f979 	bl	8002778 <LL_ADC_IsEnabled>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d169      	bne.n	8003560 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	4b36      	ldr	r3, [pc, #216]	@ (800356c <ADC_Enable+0xfc>)
 8003494:	4013      	ands	r3, r2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00d      	beq.n	80034b6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800349e:	f043 0210 	orr.w	r2, r3, #16
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034aa:	f043 0201 	orr.w	r2, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e055      	b.n	8003562 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff f934 	bl	8002728 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80034c0:	482b      	ldr	r0, [pc, #172]	@ (8003570 <ADC_Enable+0x100>)
 80034c2:	f7fe ffe3 	bl	800248c <LL_ADC_GetCommonPathInternalCh>
 80034c6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80034c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d013      	beq.n	80034f8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034d0:	4b28      	ldr	r3, [pc, #160]	@ (8003574 <ADC_Enable+0x104>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	099b      	lsrs	r3, r3, #6
 80034d6:	4a28      	ldr	r2, [pc, #160]	@ (8003578 <ADC_Enable+0x108>)
 80034d8:	fba2 2303 	umull	r2, r3, r2, r3
 80034dc:	099b      	lsrs	r3, r3, #6
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	4613      	mov	r3, r2
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80034ea:	e002      	b.n	80034f2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1f9      	bne.n	80034ec <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80034f8:	f7fe ff72 	bl	80023e0 <HAL_GetTick>
 80034fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034fe:	e028      	b.n	8003552 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff f937 	bl	8002778 <LL_ADC_IsEnabled>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d104      	bne.n	800351a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff f907 	bl	8002728 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800351a:	f7fe ff61 	bl	80023e0 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d914      	bls.n	8003552 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b01      	cmp	r3, #1
 8003534:	d00d      	beq.n	8003552 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800353a:	f043 0210 	orr.w	r2, r3, #16
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003546:	f043 0201 	orr.w	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e007      	b.n	8003562 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b01      	cmp	r3, #1
 800355e:	d1cf      	bne.n	8003500 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	8000003f 	.word	0x8000003f
 8003570:	50040300 	.word	0x50040300
 8003574:	20000018 	.word	0x20000018
 8003578:	053e2d63 	.word	0x053e2d63

0800357c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff f908 	bl	800279e <LL_ADC_IsDisableOngoing>
 800358e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff f8ef 	bl	8002778 <LL_ADC_IsEnabled>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d047      	beq.n	8003630 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d144      	bne.n	8003630 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 030d 	and.w	r3, r3, #13
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d10c      	bne.n	80035ce <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff f8c9 	bl	8002750 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2203      	movs	r2, #3
 80035c4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035c6:	f7fe ff0b 	bl	80023e0 <HAL_GetTick>
 80035ca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035cc:	e029      	b.n	8003622 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d2:	f043 0210 	orr.w	r2, r3, #16
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035de:	f043 0201 	orr.w	r2, r3, #1
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e023      	b.n	8003632 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035ea:	f7fe fef9 	bl	80023e0 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d914      	bls.n	8003622 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00d      	beq.n	8003622 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800360a:	f043 0210 	orr.w	r2, r3, #16
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003616:	f043 0201 	orr.w	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e007      	b.n	8003632 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1dc      	bne.n	80035ea <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003646:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800364c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003650:	2b00      	cmp	r3, #0
 8003652:	d14b      	bne.n	80036ec <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003658:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d021      	beq.n	80036b2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f7fe ff6d 	bl	8002552 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d032      	beq.n	80036e4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d12b      	bne.n	80036e4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003690:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800369c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d11f      	bne.n	80036e4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a8:	f043 0201 	orr.w	r2, r3, #1
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	655a      	str	r2, [r3, #84]	@ 0x54
 80036b0:	e018      	b.n	80036e4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d111      	bne.n	80036e4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d105      	bne.n	80036e4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036dc:	f043 0201 	orr.w	r2, r3, #1
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f7ff fab3 	bl	8002c50 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80036ea:	e00e      	b.n	800370a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f0:	f003 0310 	and.w	r3, r3, #16
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f7ff fabd 	bl	8002c78 <HAL_ADC_ErrorCallback>
}
 80036fe:	e004      	b.n	800370a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	4798      	blx	r3
}
 800370a:	bf00      	nop
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b084      	sub	sp, #16
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f7ff fa9f 	bl	8002c64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003726:	bf00      	nop
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b084      	sub	sp, #16
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003740:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374c:	f043 0204 	orr.w	r2, r3, #4
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f7ff fa8f 	bl	8002c78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800375a:	bf00      	nop
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <LL_ADC_IsEnabled>:
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <LL_ADC_IsEnabled+0x18>
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <LL_ADC_IsEnabled+0x1a>
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <LL_ADC_StartCalibration>:
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800379a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	609a      	str	r2, [r3, #8]
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <LL_ADC_IsCalibrationOnGoing>:
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80037ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037ce:	d101      	bne.n	80037d4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80037d0:	2301      	movs	r3, #1
 80037d2:	e000      	b.n	80037d6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <LL_ADC_REG_IsConversionOngoing>:
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d101      	bne.n	80037fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80037f6:	2301      	movs	r3, #1
 80037f8:	e000      	b.n	80037fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003812:	2300      	movs	r3, #0
 8003814:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800381c:	2b01      	cmp	r3, #1
 800381e:	d101      	bne.n	8003824 <HAL_ADCEx_Calibration_Start+0x1c>
 8003820:	2302      	movs	r3, #2
 8003822:	e04d      	b.n	80038c0 <HAL_ADCEx_Calibration_Start+0xb8>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7ff fea5 	bl	800357c <ADC_Disable>
 8003832:	4603      	mov	r3, r0
 8003834:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003836:	7bfb      	ldrb	r3, [r7, #15]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d136      	bne.n	80038aa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003840:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003844:	f023 0302 	bic.w	r3, r3, #2
 8003848:	f043 0202 	orr.w	r2, r3, #2
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6839      	ldr	r1, [r7, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff ff96 	bl	8003788 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800385c:	e014      	b.n	8003888 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	3301      	adds	r3, #1
 8003862:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800386a:	d30d      	bcc.n	8003888 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003870:	f023 0312 	bic.w	r3, r3, #18
 8003874:	f043 0210 	orr.w	r2, r3, #16
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e01b      	b.n	80038c0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff ff94 	bl	80037ba <LL_ADC_IsCalibrationOnGoing>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1e2      	bne.n	800385e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800389c:	f023 0303 	bic.w	r3, r3, #3
 80038a0:	f043 0201 	orr.w	r2, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	655a      	str	r2, [r3, #84]	@ 0x54
 80038a8:	e005      	b.n	80038b6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ae:	f043 0210 	orr.w	r2, r3, #16
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80038be:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80038c8:	b590      	push	{r4, r7, lr}
 80038ca:	b09f      	sub	sp, #124	@ 0x7c
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d101      	bne.n	80038e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80038e2:	2302      	movs	r3, #2
 80038e4:	e093      	b.n	8003a0e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80038ee:	2300      	movs	r3, #0
 80038f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80038f2:	2300      	movs	r3, #0
 80038f4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a47      	ldr	r2, [pc, #284]	@ (8003a18 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d102      	bne.n	8003906 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003900:	4b46      	ldr	r3, [pc, #280]	@ (8003a1c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003902:	60bb      	str	r3, [r7, #8]
 8003904:	e001      	b.n	800390a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003906:	2300      	movs	r3, #0
 8003908:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10b      	bne.n	8003928 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003914:	f043 0220 	orr.w	r2, r3, #32
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e072      	b.n	8003a0e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff ff59 	bl	80037e2 <LL_ADC_REG_IsConversionOngoing>
 8003930:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff ff53 	bl	80037e2 <LL_ADC_REG_IsConversionOngoing>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d154      	bne.n	80039ec <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003942:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003944:	2b00      	cmp	r3, #0
 8003946:	d151      	bne.n	80039ec <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003948:	4b35      	ldr	r3, [pc, #212]	@ (8003a20 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800394a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d02c      	beq.n	80039ae <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003954:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	6859      	ldr	r1, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003966:	035b      	lsls	r3, r3, #13
 8003968:	430b      	orrs	r3, r1
 800396a:	431a      	orrs	r2, r3
 800396c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800396e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003970:	4829      	ldr	r0, [pc, #164]	@ (8003a18 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003972:	f7ff fef6 	bl	8003762 <LL_ADC_IsEnabled>
 8003976:	4604      	mov	r4, r0
 8003978:	4828      	ldr	r0, [pc, #160]	@ (8003a1c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800397a:	f7ff fef2 	bl	8003762 <LL_ADC_IsEnabled>
 800397e:	4603      	mov	r3, r0
 8003980:	431c      	orrs	r4, r3
 8003982:	4828      	ldr	r0, [pc, #160]	@ (8003a24 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003984:	f7ff feed 	bl	8003762 <LL_ADC_IsEnabled>
 8003988:	4603      	mov	r3, r0
 800398a:	4323      	orrs	r3, r4
 800398c:	2b00      	cmp	r3, #0
 800398e:	d137      	bne.n	8003a00 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003990:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003998:	f023 030f 	bic.w	r3, r3, #15
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	6811      	ldr	r1, [r2, #0]
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	6892      	ldr	r2, [r2, #8]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	431a      	orrs	r2, r3
 80039a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039aa:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039ac:	e028      	b.n	8003a00 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80039ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039b8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039ba:	4817      	ldr	r0, [pc, #92]	@ (8003a18 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80039bc:	f7ff fed1 	bl	8003762 <LL_ADC_IsEnabled>
 80039c0:	4604      	mov	r4, r0
 80039c2:	4816      	ldr	r0, [pc, #88]	@ (8003a1c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80039c4:	f7ff fecd 	bl	8003762 <LL_ADC_IsEnabled>
 80039c8:	4603      	mov	r3, r0
 80039ca:	431c      	orrs	r4, r3
 80039cc:	4815      	ldr	r0, [pc, #84]	@ (8003a24 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80039ce:	f7ff fec8 	bl	8003762 <LL_ADC_IsEnabled>
 80039d2:	4603      	mov	r3, r0
 80039d4:	4323      	orrs	r3, r4
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d112      	bne.n	8003a00 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80039da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80039e2:	f023 030f 	bic.w	r3, r3, #15
 80039e6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80039e8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039ea:	e009      	b.n	8003a00 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f0:	f043 0220 	orr.w	r2, r3, #32
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80039fe:	e000      	b.n	8003a02 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a00:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a0a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	377c      	adds	r7, #124	@ 0x7c
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd90      	pop	{r4, r7, pc}
 8003a16:	bf00      	nop
 8003a18:	50040000 	.word	0x50040000
 8003a1c:	50040100 	.word	0x50040100
 8003a20:	50040300 	.word	0x50040300
 8003a24:	50040200 	.word	0x50040200

08003a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a38:	4b0c      	ldr	r3, [pc, #48]	@ (8003a6c <__NVIC_SetPriorityGrouping+0x44>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a44:	4013      	ands	r3, r2
 8003a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a5a:	4a04      	ldr	r2, [pc, #16]	@ (8003a6c <__NVIC_SetPriorityGrouping+0x44>)
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	60d3      	str	r3, [r2, #12]
}
 8003a60:	bf00      	nop
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	e000ed00 	.word	0xe000ed00

08003a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a74:	4b04      	ldr	r3, [pc, #16]	@ (8003a88 <__NVIC_GetPriorityGrouping+0x18>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	0a1b      	lsrs	r3, r3, #8
 8003a7a:	f003 0307 	and.w	r3, r3, #7
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	e000ed00 	.word	0xe000ed00

08003a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	db0b      	blt.n	8003ab6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a9e:	79fb      	ldrb	r3, [r7, #7]
 8003aa0:	f003 021f 	and.w	r2, r3, #31
 8003aa4:	4907      	ldr	r1, [pc, #28]	@ (8003ac4 <__NVIC_EnableIRQ+0x38>)
 8003aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aaa:	095b      	lsrs	r3, r3, #5
 8003aac:	2001      	movs	r0, #1
 8003aae:	fa00 f202 	lsl.w	r2, r0, r2
 8003ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	e000e100 	.word	0xe000e100

08003ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	6039      	str	r1, [r7, #0]
 8003ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	db0a      	blt.n	8003af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	490c      	ldr	r1, [pc, #48]	@ (8003b14 <__NVIC_SetPriority+0x4c>)
 8003ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae6:	0112      	lsls	r2, r2, #4
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	440b      	add	r3, r1
 8003aec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003af0:	e00a      	b.n	8003b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	4908      	ldr	r1, [pc, #32]	@ (8003b18 <__NVIC_SetPriority+0x50>)
 8003af8:	79fb      	ldrb	r3, [r7, #7]
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	3b04      	subs	r3, #4
 8003b00:	0112      	lsls	r2, r2, #4
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	440b      	add	r3, r1
 8003b06:	761a      	strb	r2, [r3, #24]
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	e000e100 	.word	0xe000e100
 8003b18:	e000ed00 	.word	0xe000ed00

08003b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b089      	sub	sp, #36	@ 0x24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f1c3 0307 	rsb	r3, r3, #7
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	bf28      	it	cs
 8003b3a:	2304      	movcs	r3, #4
 8003b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	3304      	adds	r3, #4
 8003b42:	2b06      	cmp	r3, #6
 8003b44:	d902      	bls.n	8003b4c <NVIC_EncodePriority+0x30>
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	3b03      	subs	r3, #3
 8003b4a:	e000      	b.n	8003b4e <NVIC_EncodePriority+0x32>
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b50:	f04f 32ff 	mov.w	r2, #4294967295
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	43da      	mvns	r2, r3
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	401a      	ands	r2, r3
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b64:	f04f 31ff 	mov.w	r1, #4294967295
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6e:	43d9      	mvns	r1, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b74:	4313      	orrs	r3, r2
         );
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3724      	adds	r7, #36	@ 0x24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
	...

08003b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b94:	d301      	bcc.n	8003b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b96:	2301      	movs	r3, #1
 8003b98:	e00f      	b.n	8003bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8003bc4 <SysTick_Config+0x40>)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ba2:	210f      	movs	r1, #15
 8003ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba8:	f7ff ff8e 	bl	8003ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bac:	4b05      	ldr	r3, [pc, #20]	@ (8003bc4 <SysTick_Config+0x40>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bb2:	4b04      	ldr	r3, [pc, #16]	@ (8003bc4 <SysTick_Config+0x40>)
 8003bb4:	2207      	movs	r2, #7
 8003bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	e000e010 	.word	0xe000e010

08003bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff ff29 	bl	8003a28 <__NVIC_SetPriorityGrouping>
}
 8003bd6:	bf00      	nop
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b086      	sub	sp, #24
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	4603      	mov	r3, r0
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	607a      	str	r2, [r7, #4]
 8003bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003bf0:	f7ff ff3e 	bl	8003a70 <__NVIC_GetPriorityGrouping>
 8003bf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	68b9      	ldr	r1, [r7, #8]
 8003bfa:	6978      	ldr	r0, [r7, #20]
 8003bfc:	f7ff ff8e 	bl	8003b1c <NVIC_EncodePriority>
 8003c00:	4602      	mov	r2, r0
 8003c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c06:	4611      	mov	r1, r2
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff ff5d 	bl	8003ac8 <__NVIC_SetPriority>
}
 8003c0e:	bf00      	nop
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b082      	sub	sp, #8
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff ff31 	bl	8003a8c <__NVIC_EnableIRQ>
}
 8003c2a:	bf00      	nop
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b082      	sub	sp, #8
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7ff ffa2 	bl	8003b84 <SysTick_Config>
 8003c40:	4603      	mov	r3, r0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
	...

08003c4c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e098      	b.n	8003d90 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	4b4d      	ldr	r3, [pc, #308]	@ (8003d9c <HAL_DMA_Init+0x150>)
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d80f      	bhi.n	8003c8a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	4b4b      	ldr	r3, [pc, #300]	@ (8003da0 <HAL_DMA_Init+0x154>)
 8003c72:	4413      	add	r3, r2
 8003c74:	4a4b      	ldr	r2, [pc, #300]	@ (8003da4 <HAL_DMA_Init+0x158>)
 8003c76:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	009a      	lsls	r2, r3, #2
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a48      	ldr	r2, [pc, #288]	@ (8003da8 <HAL_DMA_Init+0x15c>)
 8003c86:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c88:	e00e      	b.n	8003ca8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	4b46      	ldr	r3, [pc, #280]	@ (8003dac <HAL_DMA_Init+0x160>)
 8003c92:	4413      	add	r3, r2
 8003c94:	4a43      	ldr	r2, [pc, #268]	@ (8003da4 <HAL_DMA_Init+0x158>)
 8003c96:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9a:	091b      	lsrs	r3, r3, #4
 8003c9c:	009a      	lsls	r2, r3, #2
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a42      	ldr	r2, [pc, #264]	@ (8003db0 <HAL_DMA_Init+0x164>)
 8003ca6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cc2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ce4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d02:	d039      	beq.n	8003d78 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d08:	4a27      	ldr	r2, [pc, #156]	@ (8003da8 <HAL_DMA_Init+0x15c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d11a      	bne.n	8003d44 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003d0e:	4b29      	ldr	r3, [pc, #164]	@ (8003db4 <HAL_DMA_Init+0x168>)
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d16:	f003 031c 	and.w	r3, r3, #28
 8003d1a:	210f      	movs	r1, #15
 8003d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d20:	43db      	mvns	r3, r3
 8003d22:	4924      	ldr	r1, [pc, #144]	@ (8003db4 <HAL_DMA_Init+0x168>)
 8003d24:	4013      	ands	r3, r2
 8003d26:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003d28:	4b22      	ldr	r3, [pc, #136]	@ (8003db4 <HAL_DMA_Init+0x168>)
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6859      	ldr	r1, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d34:	f003 031c 	and.w	r3, r3, #28
 8003d38:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3c:	491d      	ldr	r1, [pc, #116]	@ (8003db4 <HAL_DMA_Init+0x168>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	600b      	str	r3, [r1, #0]
 8003d42:	e019      	b.n	8003d78 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003d44:	4b1c      	ldr	r3, [pc, #112]	@ (8003db8 <HAL_DMA_Init+0x16c>)
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4c:	f003 031c 	and.w	r3, r3, #28
 8003d50:	210f      	movs	r1, #15
 8003d52:	fa01 f303 	lsl.w	r3, r1, r3
 8003d56:	43db      	mvns	r3, r3
 8003d58:	4917      	ldr	r1, [pc, #92]	@ (8003db8 <HAL_DMA_Init+0x16c>)
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003d5e:	4b16      	ldr	r3, [pc, #88]	@ (8003db8 <HAL_DMA_Init+0x16c>)
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6859      	ldr	r1, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6a:	f003 031c 	and.w	r3, r3, #28
 8003d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d72:	4911      	ldr	r1, [pc, #68]	@ (8003db8 <HAL_DMA_Init+0x16c>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	40020407 	.word	0x40020407
 8003da0:	bffdfff8 	.word	0xbffdfff8
 8003da4:	cccccccd 	.word	0xcccccccd
 8003da8:	40020000 	.word	0x40020000
 8003dac:	bffdfbf8 	.word	0xbffdfbf8
 8003db0:	40020400 	.word	0x40020400
 8003db4:	400200a8 	.word	0x400200a8
 8003db8:	400204a8 	.word	0x400204a8

08003dbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
 8003dc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_DMA_Start_IT+0x20>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e04b      	b.n	8003e74 <HAL_DMA_Start_IT+0xb8>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d13a      	bne.n	8003e66 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 0201 	bic.w	r2, r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	68b9      	ldr	r1, [r7, #8]
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f000 f8e0 	bl	8003fda <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d008      	beq.n	8003e34 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f042 020e 	orr.w	r2, r2, #14
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	e00f      	b.n	8003e54 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0204 	bic.w	r2, r2, #4
 8003e42:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 020a 	orr.w	r2, r2, #10
 8003e52:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0201 	orr.w	r2, r2, #1
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	e005      	b.n	8003e72 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e6e:	2302      	movs	r3, #2
 8003e70:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e98:	f003 031c 	and.w	r3, r3, #28
 8003e9c:	2204      	movs	r2, #4
 8003e9e:	409a      	lsls	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d026      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x7a>
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d021      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0320 	and.w	r3, r3, #32
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d107      	bne.n	8003ed0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0204 	bic.w	r2, r2, #4
 8003ece:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed4:	f003 021c 	and.w	r2, r3, #28
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003edc:	2104      	movs	r1, #4
 8003ede:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d071      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003ef4:	e06c      	b.n	8003fd0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efa:	f003 031c 	and.w	r3, r3, #28
 8003efe:	2202      	movs	r2, #2
 8003f00:	409a      	lsls	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4013      	ands	r3, r2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d02e      	beq.n	8003f68 <HAL_DMA_IRQHandler+0xec>
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d029      	beq.n	8003f68 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0320 	and.w	r3, r3, #32
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10b      	bne.n	8003f3a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 020a 	bic.w	r2, r2, #10
 8003f30:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3e:	f003 021c 	and.w	r2, r3, #28
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f46:	2102      	movs	r1, #2
 8003f48:	fa01 f202 	lsl.w	r2, r1, r2
 8003f4c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d038      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003f66:	e033      	b.n	8003fd0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6c:	f003 031c 	and.w	r3, r3, #28
 8003f70:	2208      	movs	r2, #8
 8003f72:	409a      	lsls	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4013      	ands	r3, r2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d02a      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x156>
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d025      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 020e 	bic.w	r2, r2, #14
 8003f94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9a:	f003 021c 	and.w	r2, r3, #28
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8003fa8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d004      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003fd0:	bf00      	nop
 8003fd2:	bf00      	nop
}
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b085      	sub	sp, #20
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	607a      	str	r2, [r7, #4]
 8003fe6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fec:	f003 021c 	and.w	r2, r3, #28
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8003ffa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	2b10      	cmp	r3, #16
 800400a:	d108      	bne.n	800401e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800401c:	e007      	b.n	800402e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	60da      	str	r2, [r3, #12]
}
 800402e:	bf00      	nop
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
	...

0800403c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004046:	2300      	movs	r3, #0
 8004048:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800404a:	e17f      	b.n	800434c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	2101      	movs	r1, #1
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	fa01 f303 	lsl.w	r3, r1, r3
 8004058:	4013      	ands	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 8171 	beq.w	8004346 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f003 0303 	and.w	r3, r3, #3
 800406c:	2b01      	cmp	r3, #1
 800406e:	d005      	beq.n	800407c <HAL_GPIO_Init+0x40>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f003 0303 	and.w	r3, r3, #3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d130      	bne.n	80040de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	2203      	movs	r2, #3
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	43db      	mvns	r3, r3
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4013      	ands	r3, r2
 8004092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040b2:	2201      	movs	r2, #1
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	43db      	mvns	r3, r3
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4013      	ands	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	091b      	lsrs	r3, r3, #4
 80040c8:	f003 0201 	and.w	r2, r3, #1
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	fa02 f303 	lsl.w	r3, r2, r3
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	2b03      	cmp	r3, #3
 80040e8:	d118      	bne.n	800411c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80040f0:	2201      	movs	r2, #1
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	43db      	mvns	r3, r3
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4013      	ands	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	08db      	lsrs	r3, r3, #3
 8004106:	f003 0201 	and.w	r2, r3, #1
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	4313      	orrs	r3, r2
 8004114:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f003 0303 	and.w	r3, r3, #3
 8004124:	2b03      	cmp	r3, #3
 8004126:	d017      	beq.n	8004158 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	2203      	movs	r2, #3
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	43db      	mvns	r3, r3
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4013      	ands	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	4313      	orrs	r3, r2
 8004150:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d123      	bne.n	80041ac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	08da      	lsrs	r2, r3, #3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3208      	adds	r2, #8
 800416c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004170:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	220f      	movs	r2, #15
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	43db      	mvns	r3, r3
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	4013      	ands	r3, r2
 8004186:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	08da      	lsrs	r2, r3, #3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3208      	adds	r2, #8
 80041a6:	6939      	ldr	r1, [r7, #16]
 80041a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	2203      	movs	r2, #3
 80041b8:	fa02 f303 	lsl.w	r3, r2, r3
 80041bc:	43db      	mvns	r3, r3
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	4013      	ands	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 0203 	and.w	r2, r3, #3
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 80ac 	beq.w	8004346 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ee:	4b5f      	ldr	r3, [pc, #380]	@ (800436c <HAL_GPIO_Init+0x330>)
 80041f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041f2:	4a5e      	ldr	r2, [pc, #376]	@ (800436c <HAL_GPIO_Init+0x330>)
 80041f4:	f043 0301 	orr.w	r3, r3, #1
 80041f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80041fa:	4b5c      	ldr	r3, [pc, #368]	@ (800436c <HAL_GPIO_Init+0x330>)
 80041fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	60bb      	str	r3, [r7, #8]
 8004204:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004206:	4a5a      	ldr	r2, [pc, #360]	@ (8004370 <HAL_GPIO_Init+0x334>)
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	089b      	lsrs	r3, r3, #2
 800420c:	3302      	adds	r3, #2
 800420e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004212:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	220f      	movs	r2, #15
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	43db      	mvns	r3, r3
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4013      	ands	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004230:	d025      	beq.n	800427e <HAL_GPIO_Init+0x242>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a4f      	ldr	r2, [pc, #316]	@ (8004374 <HAL_GPIO_Init+0x338>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d01f      	beq.n	800427a <HAL_GPIO_Init+0x23e>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a4e      	ldr	r2, [pc, #312]	@ (8004378 <HAL_GPIO_Init+0x33c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d019      	beq.n	8004276 <HAL_GPIO_Init+0x23a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a4d      	ldr	r2, [pc, #308]	@ (800437c <HAL_GPIO_Init+0x340>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d013      	beq.n	8004272 <HAL_GPIO_Init+0x236>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a4c      	ldr	r2, [pc, #304]	@ (8004380 <HAL_GPIO_Init+0x344>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d00d      	beq.n	800426e <HAL_GPIO_Init+0x232>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a4b      	ldr	r2, [pc, #300]	@ (8004384 <HAL_GPIO_Init+0x348>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d007      	beq.n	800426a <HAL_GPIO_Init+0x22e>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a4a      	ldr	r2, [pc, #296]	@ (8004388 <HAL_GPIO_Init+0x34c>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d101      	bne.n	8004266 <HAL_GPIO_Init+0x22a>
 8004262:	2306      	movs	r3, #6
 8004264:	e00c      	b.n	8004280 <HAL_GPIO_Init+0x244>
 8004266:	2307      	movs	r3, #7
 8004268:	e00a      	b.n	8004280 <HAL_GPIO_Init+0x244>
 800426a:	2305      	movs	r3, #5
 800426c:	e008      	b.n	8004280 <HAL_GPIO_Init+0x244>
 800426e:	2304      	movs	r3, #4
 8004270:	e006      	b.n	8004280 <HAL_GPIO_Init+0x244>
 8004272:	2303      	movs	r3, #3
 8004274:	e004      	b.n	8004280 <HAL_GPIO_Init+0x244>
 8004276:	2302      	movs	r3, #2
 8004278:	e002      	b.n	8004280 <HAL_GPIO_Init+0x244>
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <HAL_GPIO_Init+0x244>
 800427e:	2300      	movs	r3, #0
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	f002 0203 	and.w	r2, r2, #3
 8004286:	0092      	lsls	r2, r2, #2
 8004288:	4093      	lsls	r3, r2
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004290:	4937      	ldr	r1, [pc, #220]	@ (8004370 <HAL_GPIO_Init+0x334>)
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	089b      	lsrs	r3, r3, #2
 8004296:	3302      	adds	r3, #2
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800429e:	4b3b      	ldr	r3, [pc, #236]	@ (800438c <HAL_GPIO_Init+0x350>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	43db      	mvns	r3, r3
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	4013      	ands	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4313      	orrs	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042c2:	4a32      	ldr	r2, [pc, #200]	@ (800438c <HAL_GPIO_Init+0x350>)
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042c8:	4b30      	ldr	r3, [pc, #192]	@ (800438c <HAL_GPIO_Init+0x350>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	43db      	mvns	r3, r3
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4013      	ands	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042ec:	4a27      	ldr	r2, [pc, #156]	@ (800438c <HAL_GPIO_Init+0x350>)
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80042f2:	4b26      	ldr	r3, [pc, #152]	@ (800438c <HAL_GPIO_Init+0x350>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	43db      	mvns	r3, r3
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	4013      	ands	r3, r2
 8004300:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004316:	4a1d      	ldr	r2, [pc, #116]	@ (800438c <HAL_GPIO_Init+0x350>)
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800431c:	4b1b      	ldr	r3, [pc, #108]	@ (800438c <HAL_GPIO_Init+0x350>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	43db      	mvns	r3, r3
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	4013      	ands	r3, r2
 800432a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4313      	orrs	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004340:	4a12      	ldr	r2, [pc, #72]	@ (800438c <HAL_GPIO_Init+0x350>)
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	3301      	adds	r3, #1
 800434a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	fa22 f303 	lsr.w	r3, r2, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	f47f ae78 	bne.w	800404c <HAL_GPIO_Init+0x10>
  }
}
 800435c:	bf00      	nop
 800435e:	bf00      	nop
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	40021000 	.word	0x40021000
 8004370:	40010000 	.word	0x40010000
 8004374:	48000400 	.word	0x48000400
 8004378:	48000800 	.word	0x48000800
 800437c:	48000c00 	.word	0x48000c00
 8004380:	48001000 	.word	0x48001000
 8004384:	48001400 	.word	0x48001400
 8004388:	48001800 	.word	0x48001800
 800438c:	40010400 	.word	0x40010400

08004390 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	887b      	ldrh	r3, [r7, #2]
 80043a2:	4013      	ands	r3, r2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043a8:	2301      	movs	r3, #1
 80043aa:	73fb      	strb	r3, [r7, #15]
 80043ac:	e001      	b.n	80043b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043ae:	2300      	movs	r3, #0
 80043b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	460b      	mov	r3, r1
 80043ca:	807b      	strh	r3, [r7, #2]
 80043cc:	4613      	mov	r3, r2
 80043ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043d0:	787b      	ldrb	r3, [r7, #1]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043d6:	887a      	ldrh	r2, [r7, #2]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043dc:	e002      	b.n	80043e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043de:	887a      	ldrh	r2, [r7, #2]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043f4:	4b05      	ldr	r3, [pc, #20]	@ (800440c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a04      	ldr	r2, [pc, #16]	@ (800440c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043fe:	6013      	str	r3, [r2, #0]
}
 8004400:	bf00      	nop
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	40007000 	.word	0x40007000

08004410 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004414:	4b04      	ldr	r3, [pc, #16]	@ (8004428 <HAL_PWREx_GetVoltageRange+0x18>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800441c:	4618      	mov	r0, r3
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40007000 	.word	0x40007000

0800442c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800443a:	d130      	bne.n	800449e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800443c:	4b23      	ldr	r3, [pc, #140]	@ (80044cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004444:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004448:	d038      	beq.n	80044bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800444a:	4b20      	ldr	r3, [pc, #128]	@ (80044cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004452:	4a1e      	ldr	r2, [pc, #120]	@ (80044cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004454:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004458:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800445a:	4b1d      	ldr	r3, [pc, #116]	@ (80044d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2232      	movs	r2, #50	@ 0x32
 8004460:	fb02 f303 	mul.w	r3, r2, r3
 8004464:	4a1b      	ldr	r2, [pc, #108]	@ (80044d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004466:	fba2 2303 	umull	r2, r3, r2, r3
 800446a:	0c9b      	lsrs	r3, r3, #18
 800446c:	3301      	adds	r3, #1
 800446e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004470:	e002      	b.n	8004478 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	3b01      	subs	r3, #1
 8004476:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004478:	4b14      	ldr	r3, [pc, #80]	@ (80044cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004480:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004484:	d102      	bne.n	800448c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1f2      	bne.n	8004472 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800448c:	4b0f      	ldr	r3, [pc, #60]	@ (80044cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004494:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004498:	d110      	bne.n	80044bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e00f      	b.n	80044be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800449e:	4b0b      	ldr	r3, [pc, #44]	@ (80044cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80044a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044aa:	d007      	beq.n	80044bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044ac:	4b07      	ldr	r3, [pc, #28]	@ (80044cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044b4:	4a05      	ldr	r2, [pc, #20]	@ (80044cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40007000 	.word	0x40007000
 80044d0:	20000018 	.word	0x20000018
 80044d4:	431bde83 	.word	0x431bde83

080044d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e3ca      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044ea:	4b97      	ldr	r3, [pc, #604]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f003 030c 	and.w	r3, r3, #12
 80044f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044f4:	4b94      	ldr	r3, [pc, #592]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f003 0303 	and.w	r3, r3, #3
 80044fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0310 	and.w	r3, r3, #16
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 80e4 	beq.w	80046d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d007      	beq.n	8004522 <HAL_RCC_OscConfig+0x4a>
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	2b0c      	cmp	r3, #12
 8004516:	f040 808b 	bne.w	8004630 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2b01      	cmp	r3, #1
 800451e:	f040 8087 	bne.w	8004630 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004522:	4b89      	ldr	r3, [pc, #548]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d005      	beq.n	800453a <HAL_RCC_OscConfig+0x62>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e3a2      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1a      	ldr	r2, [r3, #32]
 800453e:	4b82      	ldr	r3, [pc, #520]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	2b00      	cmp	r3, #0
 8004548:	d004      	beq.n	8004554 <HAL_RCC_OscConfig+0x7c>
 800454a:	4b7f      	ldr	r3, [pc, #508]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004552:	e005      	b.n	8004560 <HAL_RCC_OscConfig+0x88>
 8004554:	4b7c      	ldr	r3, [pc, #496]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 8004556:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800455a:	091b      	lsrs	r3, r3, #4
 800455c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004560:	4293      	cmp	r3, r2
 8004562:	d223      	bcs.n	80045ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fd55 	bl	8005018 <RCC_SetFlashLatencyFromMSIRange>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e383      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004578:	4b73      	ldr	r3, [pc, #460]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a72      	ldr	r2, [pc, #456]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 800457e:	f043 0308 	orr.w	r3, r3, #8
 8004582:	6013      	str	r3, [r2, #0]
 8004584:	4b70      	ldr	r3, [pc, #448]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	496d      	ldr	r1, [pc, #436]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 8004592:	4313      	orrs	r3, r2
 8004594:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004596:	4b6c      	ldr	r3, [pc, #432]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	021b      	lsls	r3, r3, #8
 80045a4:	4968      	ldr	r1, [pc, #416]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	604b      	str	r3, [r1, #4]
 80045aa:	e025      	b.n	80045f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045ac:	4b66      	ldr	r3, [pc, #408]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a65      	ldr	r2, [pc, #404]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 80045b2:	f043 0308 	orr.w	r3, r3, #8
 80045b6:	6013      	str	r3, [r2, #0]
 80045b8:	4b63      	ldr	r3, [pc, #396]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	4960      	ldr	r1, [pc, #384]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045ca:	4b5f      	ldr	r3, [pc, #380]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	021b      	lsls	r3, r3, #8
 80045d8:	495b      	ldr	r1, [pc, #364]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d109      	bne.n	80045f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 fd15 	bl	8005018 <RCC_SetFlashLatencyFromMSIRange>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e343      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045f8:	f000 fc4a 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 80045fc:	4602      	mov	r2, r0
 80045fe:	4b52      	ldr	r3, [pc, #328]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	091b      	lsrs	r3, r3, #4
 8004604:	f003 030f 	and.w	r3, r3, #15
 8004608:	4950      	ldr	r1, [pc, #320]	@ (800474c <HAL_RCC_OscConfig+0x274>)
 800460a:	5ccb      	ldrb	r3, [r1, r3]
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	fa22 f303 	lsr.w	r3, r2, r3
 8004614:	4a4e      	ldr	r2, [pc, #312]	@ (8004750 <HAL_RCC_OscConfig+0x278>)
 8004616:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004618:	4b4e      	ldr	r3, [pc, #312]	@ (8004754 <HAL_RCC_OscConfig+0x27c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4618      	mov	r0, r3
 800461e:	f7fd fe8f 	bl	8002340 <HAL_InitTick>
 8004622:	4603      	mov	r3, r0
 8004624:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004626:	7bfb      	ldrb	r3, [r7, #15]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d052      	beq.n	80046d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800462c:	7bfb      	ldrb	r3, [r7, #15]
 800462e:	e327      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d032      	beq.n	800469e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004638:	4b43      	ldr	r3, [pc, #268]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a42      	ldr	r2, [pc, #264]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 800463e:	f043 0301 	orr.w	r3, r3, #1
 8004642:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004644:	f7fd fecc 	bl	80023e0 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800464c:	f7fd fec8 	bl	80023e0 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e310      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800465e:	4b3a      	ldr	r3, [pc, #232]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0f0      	beq.n	800464c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800466a:	4b37      	ldr	r3, [pc, #220]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a36      	ldr	r2, [pc, #216]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 8004670:	f043 0308 	orr.w	r3, r3, #8
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	4b34      	ldr	r3, [pc, #208]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	4931      	ldr	r1, [pc, #196]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 8004684:	4313      	orrs	r3, r2
 8004686:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004688:	4b2f      	ldr	r3, [pc, #188]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	021b      	lsls	r3, r3, #8
 8004696:	492c      	ldr	r1, [pc, #176]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 8004698:	4313      	orrs	r3, r2
 800469a:	604b      	str	r3, [r1, #4]
 800469c:	e01a      	b.n	80046d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800469e:	4b2a      	ldr	r3, [pc, #168]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a29      	ldr	r2, [pc, #164]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 80046a4:	f023 0301 	bic.w	r3, r3, #1
 80046a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046aa:	f7fd fe99 	bl	80023e0 <HAL_GetTick>
 80046ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046b0:	e008      	b.n	80046c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046b2:	f7fd fe95 	bl	80023e0 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e2dd      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046c4:	4b20      	ldr	r3, [pc, #128]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1f0      	bne.n	80046b2 <HAL_RCC_OscConfig+0x1da>
 80046d0:	e000      	b.n	80046d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d074      	beq.n	80047ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	2b08      	cmp	r3, #8
 80046e4:	d005      	beq.n	80046f2 <HAL_RCC_OscConfig+0x21a>
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	2b0c      	cmp	r3, #12
 80046ea:	d10e      	bne.n	800470a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d10b      	bne.n	800470a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f2:	4b15      	ldr	r3, [pc, #84]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d064      	beq.n	80047c8 <HAL_RCC_OscConfig+0x2f0>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d160      	bne.n	80047c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e2ba      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004712:	d106      	bne.n	8004722 <HAL_RCC_OscConfig+0x24a>
 8004714:	4b0c      	ldr	r3, [pc, #48]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a0b      	ldr	r2, [pc, #44]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 800471a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800471e:	6013      	str	r3, [r2, #0]
 8004720:	e026      	b.n	8004770 <HAL_RCC_OscConfig+0x298>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800472a:	d115      	bne.n	8004758 <HAL_RCC_OscConfig+0x280>
 800472c:	4b06      	ldr	r3, [pc, #24]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a05      	ldr	r2, [pc, #20]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 8004732:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	4b03      	ldr	r3, [pc, #12]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a02      	ldr	r2, [pc, #8]	@ (8004748 <HAL_RCC_OscConfig+0x270>)
 800473e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	e014      	b.n	8004770 <HAL_RCC_OscConfig+0x298>
 8004746:	bf00      	nop
 8004748:	40021000 	.word	0x40021000
 800474c:	0800bde8 	.word	0x0800bde8
 8004750:	20000018 	.word	0x20000018
 8004754:	2000001c 	.word	0x2000001c
 8004758:	4ba0      	ldr	r3, [pc, #640]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a9f      	ldr	r2, [pc, #636]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 800475e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004762:	6013      	str	r3, [r2, #0]
 8004764:	4b9d      	ldr	r3, [pc, #628]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a9c      	ldr	r2, [pc, #624]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 800476a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800476e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d013      	beq.n	80047a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004778:	f7fd fe32 	bl	80023e0 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004780:	f7fd fe2e 	bl	80023e0 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b64      	cmp	r3, #100	@ 0x64
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e276      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004792:	4b92      	ldr	r3, [pc, #584]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <HAL_RCC_OscConfig+0x2a8>
 800479e:	e014      	b.n	80047ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a0:	f7fd fe1e 	bl	80023e0 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047a8:	f7fd fe1a 	bl	80023e0 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b64      	cmp	r3, #100	@ 0x64
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e262      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047ba:	4b88      	ldr	r3, [pc, #544]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f0      	bne.n	80047a8 <HAL_RCC_OscConfig+0x2d0>
 80047c6:	e000      	b.n	80047ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d060      	beq.n	8004898 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d005      	beq.n	80047e8 <HAL_RCC_OscConfig+0x310>
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2b0c      	cmp	r3, #12
 80047e0:	d119      	bne.n	8004816 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d116      	bne.n	8004816 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047e8:	4b7c      	ldr	r3, [pc, #496]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <HAL_RCC_OscConfig+0x328>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e23f      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004800:	4b76      	ldr	r3, [pc, #472]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	061b      	lsls	r3, r3, #24
 800480e:	4973      	ldr	r1, [pc, #460]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 8004810:	4313      	orrs	r3, r2
 8004812:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004814:	e040      	b.n	8004898 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d023      	beq.n	8004866 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800481e:	4b6f      	ldr	r3, [pc, #444]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a6e      	ldr	r2, [pc, #440]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 8004824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482a:	f7fd fdd9 	bl	80023e0 <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004830:	e008      	b.n	8004844 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004832:	f7fd fdd5 	bl	80023e0 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e21d      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004844:	4b65      	ldr	r3, [pc, #404]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0f0      	beq.n	8004832 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004850:	4b62      	ldr	r3, [pc, #392]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	061b      	lsls	r3, r3, #24
 800485e:	495f      	ldr	r1, [pc, #380]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 8004860:	4313      	orrs	r3, r2
 8004862:	604b      	str	r3, [r1, #4]
 8004864:	e018      	b.n	8004898 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004866:	4b5d      	ldr	r3, [pc, #372]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a5c      	ldr	r2, [pc, #368]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 800486c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004872:	f7fd fdb5 	bl	80023e0 <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800487a:	f7fd fdb1 	bl	80023e0 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e1f9      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800488c:	4b53      	ldr	r3, [pc, #332]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1f0      	bne.n	800487a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d03c      	beq.n	800491e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d01c      	beq.n	80048e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ac:	4b4b      	ldr	r3, [pc, #300]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 80048ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048b2:	4a4a      	ldr	r2, [pc, #296]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 80048b4:	f043 0301 	orr.w	r3, r3, #1
 80048b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048bc:	f7fd fd90 	bl	80023e0 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048c4:	f7fd fd8c 	bl	80023e0 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e1d4      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048d6:	4b41      	ldr	r3, [pc, #260]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 80048d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d0ef      	beq.n	80048c4 <HAL_RCC_OscConfig+0x3ec>
 80048e4:	e01b      	b.n	800491e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048e6:	4b3d      	ldr	r3, [pc, #244]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 80048e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048ec:	4a3b      	ldr	r2, [pc, #236]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 80048ee:	f023 0301 	bic.w	r3, r3, #1
 80048f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f6:	f7fd fd73 	bl	80023e0 <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048fe:	f7fd fd6f 	bl	80023e0 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e1b7      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004910:	4b32      	ldr	r3, [pc, #200]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 8004912:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1ef      	bne.n	80048fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 80a6 	beq.w	8004a78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800492c:	2300      	movs	r3, #0
 800492e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004930:	4b2a      	ldr	r3, [pc, #168]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 8004932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10d      	bne.n	8004958 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800493c:	4b27      	ldr	r3, [pc, #156]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 800493e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004940:	4a26      	ldr	r2, [pc, #152]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 8004942:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004946:	6593      	str	r3, [r2, #88]	@ 0x58
 8004948:	4b24      	ldr	r3, [pc, #144]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 800494a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800494c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004950:	60bb      	str	r3, [r7, #8]
 8004952:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004954:	2301      	movs	r3, #1
 8004956:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004958:	4b21      	ldr	r3, [pc, #132]	@ (80049e0 <HAL_RCC_OscConfig+0x508>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004960:	2b00      	cmp	r3, #0
 8004962:	d118      	bne.n	8004996 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004964:	4b1e      	ldr	r3, [pc, #120]	@ (80049e0 <HAL_RCC_OscConfig+0x508>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a1d      	ldr	r2, [pc, #116]	@ (80049e0 <HAL_RCC_OscConfig+0x508>)
 800496a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800496e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004970:	f7fd fd36 	bl	80023e0 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004978:	f7fd fd32 	bl	80023e0 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e17a      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800498a:	4b15      	ldr	r3, [pc, #84]	@ (80049e0 <HAL_RCC_OscConfig+0x508>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0f0      	beq.n	8004978 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d108      	bne.n	80049b0 <HAL_RCC_OscConfig+0x4d8>
 800499e:	4b0f      	ldr	r3, [pc, #60]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 80049a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a4:	4a0d      	ldr	r2, [pc, #52]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 80049a6:	f043 0301 	orr.w	r3, r3, #1
 80049aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049ae:	e029      	b.n	8004a04 <HAL_RCC_OscConfig+0x52c>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2b05      	cmp	r3, #5
 80049b6:	d115      	bne.n	80049e4 <HAL_RCC_OscConfig+0x50c>
 80049b8:	4b08      	ldr	r3, [pc, #32]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 80049ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049be:	4a07      	ldr	r2, [pc, #28]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 80049c0:	f043 0304 	orr.w	r3, r3, #4
 80049c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049c8:	4b04      	ldr	r3, [pc, #16]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 80049ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ce:	4a03      	ldr	r2, [pc, #12]	@ (80049dc <HAL_RCC_OscConfig+0x504>)
 80049d0:	f043 0301 	orr.w	r3, r3, #1
 80049d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049d8:	e014      	b.n	8004a04 <HAL_RCC_OscConfig+0x52c>
 80049da:	bf00      	nop
 80049dc:	40021000 	.word	0x40021000
 80049e0:	40007000 	.word	0x40007000
 80049e4:	4b9c      	ldr	r3, [pc, #624]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 80049e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ea:	4a9b      	ldr	r2, [pc, #620]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 80049ec:	f023 0301 	bic.w	r3, r3, #1
 80049f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049f4:	4b98      	ldr	r3, [pc, #608]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 80049f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049fa:	4a97      	ldr	r2, [pc, #604]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 80049fc:	f023 0304 	bic.w	r3, r3, #4
 8004a00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d016      	beq.n	8004a3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a0c:	f7fd fce8 	bl	80023e0 <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a12:	e00a      	b.n	8004a2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a14:	f7fd fce4 	bl	80023e0 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e12a      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a2a:	4b8b      	ldr	r3, [pc, #556]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0ed      	beq.n	8004a14 <HAL_RCC_OscConfig+0x53c>
 8004a38:	e015      	b.n	8004a66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a3a:	f7fd fcd1 	bl	80023e0 <HAL_GetTick>
 8004a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a40:	e00a      	b.n	8004a58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a42:	f7fd fccd 	bl	80023e0 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e113      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a58:	4b7f      	ldr	r3, [pc, #508]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1ed      	bne.n	8004a42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a66:	7ffb      	ldrb	r3, [r7, #31]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d105      	bne.n	8004a78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a6c:	4b7a      	ldr	r3, [pc, #488]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a70:	4a79      	ldr	r2, [pc, #484]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004a72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a76:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 80fe 	beq.w	8004c7e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	f040 80d0 	bne.w	8004c2c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a8c:	4b72      	ldr	r3, [pc, #456]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f003 0203 	and.w	r2, r3, #3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d130      	bne.n	8004b02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d127      	bne.n	8004b02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004abc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d11f      	bne.n	8004b02 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004acc:	2a07      	cmp	r2, #7
 8004ace:	bf14      	ite	ne
 8004ad0:	2201      	movne	r2, #1
 8004ad2:	2200      	moveq	r2, #0
 8004ad4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d113      	bne.n	8004b02 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae4:	085b      	lsrs	r3, r3, #1
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d109      	bne.n	8004b02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af8:	085b      	lsrs	r3, r3, #1
 8004afa:	3b01      	subs	r3, #1
 8004afc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d06e      	beq.n	8004be0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	2b0c      	cmp	r3, #12
 8004b06:	d069      	beq.n	8004bdc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b08:	4b53      	ldr	r3, [pc, #332]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d105      	bne.n	8004b20 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b14:	4b50      	ldr	r3, [pc, #320]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e0ad      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b24:	4b4c      	ldr	r3, [pc, #304]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a4b      	ldr	r2, [pc, #300]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004b2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b30:	f7fd fc56 	bl	80023e0 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b38:	f7fd fc52 	bl	80023e0 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e09a      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b4a:	4b43      	ldr	r3, [pc, #268]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f0      	bne.n	8004b38 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b56:	4b40      	ldr	r3, [pc, #256]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	4b40      	ldr	r3, [pc, #256]	@ (8004c5c <HAL_RCC_OscConfig+0x784>)
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b66:	3a01      	subs	r2, #1
 8004b68:	0112      	lsls	r2, r2, #4
 8004b6a:	4311      	orrs	r1, r2
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b70:	0212      	lsls	r2, r2, #8
 8004b72:	4311      	orrs	r1, r2
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b78:	0852      	lsrs	r2, r2, #1
 8004b7a:	3a01      	subs	r2, #1
 8004b7c:	0552      	lsls	r2, r2, #21
 8004b7e:	4311      	orrs	r1, r2
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004b84:	0852      	lsrs	r2, r2, #1
 8004b86:	3a01      	subs	r2, #1
 8004b88:	0652      	lsls	r2, r2, #25
 8004b8a:	4311      	orrs	r1, r2
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b90:	0912      	lsrs	r2, r2, #4
 8004b92:	0452      	lsls	r2, r2, #17
 8004b94:	430a      	orrs	r2, r1
 8004b96:	4930      	ldr	r1, [pc, #192]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b9c:	4b2e      	ldr	r3, [pc, #184]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a2d      	ldr	r2, [pc, #180]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004ba2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ba6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ba8:	4b2b      	ldr	r3, [pc, #172]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	4a2a      	ldr	r2, [pc, #168]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004bae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bb4:	f7fd fc14 	bl	80023e0 <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bbc:	f7fd fc10 	bl	80023e0 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e058      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bce:	4b22      	ldr	r3, [pc, #136]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0f0      	beq.n	8004bbc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bda:	e050      	b.n	8004c7e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e04f      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be0:	4b1d      	ldr	r3, [pc, #116]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d148      	bne.n	8004c7e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004bec:	4b1a      	ldr	r3, [pc, #104]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a19      	ldr	r2, [pc, #100]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004bf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bf6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bf8:	4b17      	ldr	r3, [pc, #92]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	4a16      	ldr	r2, [pc, #88]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004bfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c04:	f7fd fbec 	bl	80023e0 <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c0c:	f7fd fbe8 	bl	80023e0 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e030      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0f0      	beq.n	8004c0c <HAL_RCC_OscConfig+0x734>
 8004c2a:	e028      	b.n	8004c7e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	2b0c      	cmp	r3, #12
 8004c30:	d023      	beq.n	8004c7a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c32:	4b09      	ldr	r3, [pc, #36]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a08      	ldr	r2, [pc, #32]	@ (8004c58 <HAL_RCC_OscConfig+0x780>)
 8004c38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3e:	f7fd fbcf 	bl	80023e0 <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c44:	e00c      	b.n	8004c60 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c46:	f7fd fbcb 	bl	80023e0 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d905      	bls.n	8004c60 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e013      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c60:	4b09      	ldr	r3, [pc, #36]	@ (8004c88 <HAL_RCC_OscConfig+0x7b0>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1ec      	bne.n	8004c46 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c6c:	4b06      	ldr	r3, [pc, #24]	@ (8004c88 <HAL_RCC_OscConfig+0x7b0>)
 8004c6e:	68da      	ldr	r2, [r3, #12]
 8004c70:	4905      	ldr	r1, [pc, #20]	@ (8004c88 <HAL_RCC_OscConfig+0x7b0>)
 8004c72:	4b06      	ldr	r3, [pc, #24]	@ (8004c8c <HAL_RCC_OscConfig+0x7b4>)
 8004c74:	4013      	ands	r3, r2
 8004c76:	60cb      	str	r3, [r1, #12]
 8004c78:	e001      	b.n	8004c7e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e000      	b.n	8004c80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3720      	adds	r7, #32
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	feeefffc 	.word	0xfeeefffc

08004c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e0e7      	b.n	8004e74 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ca4:	4b75      	ldr	r3, [pc, #468]	@ (8004e7c <HAL_RCC_ClockConfig+0x1ec>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d910      	bls.n	8004cd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cb2:	4b72      	ldr	r3, [pc, #456]	@ (8004e7c <HAL_RCC_ClockConfig+0x1ec>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f023 0207 	bic.w	r2, r3, #7
 8004cba:	4970      	ldr	r1, [pc, #448]	@ (8004e7c <HAL_RCC_ClockConfig+0x1ec>)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc2:	4b6e      	ldr	r3, [pc, #440]	@ (8004e7c <HAL_RCC_ClockConfig+0x1ec>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d001      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e0cf      	b.n	8004e74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d010      	beq.n	8004d02 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	4b66      	ldr	r3, [pc, #408]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d908      	bls.n	8004d02 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cf0:	4b63      	ldr	r3, [pc, #396]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	4960      	ldr	r1, [pc, #384]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d04c      	beq.n	8004da8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d107      	bne.n	8004d26 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d16:	4b5a      	ldr	r3, [pc, #360]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d121      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e0a6      	b.n	8004e74 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d107      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d2e:	4b54      	ldr	r3, [pc, #336]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d115      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e09a      	b.n	8004e74 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d107      	bne.n	8004d56 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d46:	4b4e      	ldr	r3, [pc, #312]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d109      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e08e      	b.n	8004e74 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d56:	4b4a      	ldr	r3, [pc, #296]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e086      	b.n	8004e74 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d66:	4b46      	ldr	r3, [pc, #280]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f023 0203 	bic.w	r2, r3, #3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	4943      	ldr	r1, [pc, #268]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d78:	f7fd fb32 	bl	80023e0 <HAL_GetTick>
 8004d7c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7e:	e00a      	b.n	8004d96 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d80:	f7fd fb2e 	bl	80023e0 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e06e      	b.n	8004e74 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d96:	4b3a      	ldr	r3, [pc, #232]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 020c 	and.w	r2, r3, #12
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d1eb      	bne.n	8004d80 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d010      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	4b31      	ldr	r3, [pc, #196]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d208      	bcs.n	8004dd6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dc4:	4b2e      	ldr	r3, [pc, #184]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	492b      	ldr	r1, [pc, #172]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dd6:	4b29      	ldr	r3, [pc, #164]	@ (8004e7c <HAL_RCC_ClockConfig+0x1ec>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0307 	and.w	r3, r3, #7
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d210      	bcs.n	8004e06 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de4:	4b25      	ldr	r3, [pc, #148]	@ (8004e7c <HAL_RCC_ClockConfig+0x1ec>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f023 0207 	bic.w	r2, r3, #7
 8004dec:	4923      	ldr	r1, [pc, #140]	@ (8004e7c <HAL_RCC_ClockConfig+0x1ec>)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df4:	4b21      	ldr	r3, [pc, #132]	@ (8004e7c <HAL_RCC_ClockConfig+0x1ec>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d001      	beq.n	8004e06 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e036      	b.n	8004e74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0304 	and.w	r3, r3, #4
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d008      	beq.n	8004e24 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e12:	4b1b      	ldr	r3, [pc, #108]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	4918      	ldr	r1, [pc, #96]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d009      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e30:	4b13      	ldr	r3, [pc, #76]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	00db      	lsls	r3, r3, #3
 8004e3e:	4910      	ldr	r1, [pc, #64]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e44:	f000 f824 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e80 <HAL_RCC_ClockConfig+0x1f0>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	091b      	lsrs	r3, r3, #4
 8004e50:	f003 030f 	and.w	r3, r3, #15
 8004e54:	490b      	ldr	r1, [pc, #44]	@ (8004e84 <HAL_RCC_ClockConfig+0x1f4>)
 8004e56:	5ccb      	ldrb	r3, [r1, r3]
 8004e58:	f003 031f 	and.w	r3, r3, #31
 8004e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e60:	4a09      	ldr	r2, [pc, #36]	@ (8004e88 <HAL_RCC_ClockConfig+0x1f8>)
 8004e62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e64:	4b09      	ldr	r3, [pc, #36]	@ (8004e8c <HAL_RCC_ClockConfig+0x1fc>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fd fa69 	bl	8002340 <HAL_InitTick>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e72:	7afb      	ldrb	r3, [r7, #11]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40022000 	.word	0x40022000
 8004e80:	40021000 	.word	0x40021000
 8004e84:	0800bde8 	.word	0x0800bde8
 8004e88:	20000018 	.word	0x20000018
 8004e8c:	2000001c 	.word	0x2000001c

08004e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b089      	sub	sp, #36	@ 0x24
 8004e94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	61fb      	str	r3, [r7, #28]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e9e:	4b3e      	ldr	r3, [pc, #248]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 030c 	and.w	r3, r3, #12
 8004ea6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ea8:	4b3b      	ldr	r3, [pc, #236]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f003 0303 	and.w	r3, r3, #3
 8004eb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d005      	beq.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x34>
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	2b0c      	cmp	r3, #12
 8004ebc:	d121      	bne.n	8004f02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d11e      	bne.n	8004f02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ec4:	4b34      	ldr	r3, [pc, #208]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d107      	bne.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ed0:	4b31      	ldr	r3, [pc, #196]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ed6:	0a1b      	lsrs	r3, r3, #8
 8004ed8:	f003 030f 	and.w	r3, r3, #15
 8004edc:	61fb      	str	r3, [r7, #28]
 8004ede:	e005      	b.n	8004eec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	091b      	lsrs	r3, r3, #4
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004eec:	4a2b      	ldr	r2, [pc, #172]	@ (8004f9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ef4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10d      	bne.n	8004f18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f00:	e00a      	b.n	8004f18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d102      	bne.n	8004f0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f08:	4b25      	ldr	r3, [pc, #148]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f0a:	61bb      	str	r3, [r7, #24]
 8004f0c:	e004      	b.n	8004f18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	2b08      	cmp	r3, #8
 8004f12:	d101      	bne.n	8004f18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f14:	4b23      	ldr	r3, [pc, #140]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	2b0c      	cmp	r3, #12
 8004f1c:	d134      	bne.n	8004f88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d003      	beq.n	8004f36 <HAL_RCC_GetSysClockFreq+0xa6>
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d003      	beq.n	8004f3c <HAL_RCC_GetSysClockFreq+0xac>
 8004f34:	e005      	b.n	8004f42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f36:	4b1a      	ldr	r3, [pc, #104]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f38:	617b      	str	r3, [r7, #20]
      break;
 8004f3a:	e005      	b.n	8004f48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f3c:	4b19      	ldr	r3, [pc, #100]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f3e:	617b      	str	r3, [r7, #20]
      break;
 8004f40:	e002      	b.n	8004f48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	617b      	str	r3, [r7, #20]
      break;
 8004f46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f48:	4b13      	ldr	r3, [pc, #76]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	091b      	lsrs	r3, r3, #4
 8004f4e:	f003 0307 	and.w	r3, r3, #7
 8004f52:	3301      	adds	r3, #1
 8004f54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f56:	4b10      	ldr	r3, [pc, #64]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	0a1b      	lsrs	r3, r3, #8
 8004f5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	fb03 f202 	mul.w	r2, r3, r2
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	0e5b      	lsrs	r3, r3, #25
 8004f74:	f003 0303 	and.w	r3, r3, #3
 8004f78:	3301      	adds	r3, #1
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f88:	69bb      	ldr	r3, [r7, #24]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3724      	adds	r7, #36	@ 0x24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	0800be00 	.word	0x0800be00
 8004fa0:	00f42400 	.word	0x00f42400
 8004fa4:	007a1200 	.word	0x007a1200

08004fa8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fac:	4b03      	ldr	r3, [pc, #12]	@ (8004fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8004fae:	681b      	ldr	r3, [r3, #0]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	20000018 	.word	0x20000018

08004fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004fc4:	f7ff fff0 	bl	8004fa8 <HAL_RCC_GetHCLKFreq>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	4b06      	ldr	r3, [pc, #24]	@ (8004fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	0a1b      	lsrs	r3, r3, #8
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	4904      	ldr	r1, [pc, #16]	@ (8004fe8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fd6:	5ccb      	ldrb	r3, [r1, r3]
 8004fd8:	f003 031f 	and.w	r3, r3, #31
 8004fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	40021000 	.word	0x40021000
 8004fe8:	0800bdf8 	.word	0x0800bdf8

08004fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ff0:	f7ff ffda 	bl	8004fa8 <HAL_RCC_GetHCLKFreq>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	4b06      	ldr	r3, [pc, #24]	@ (8005010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	0adb      	lsrs	r3, r3, #11
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	4904      	ldr	r1, [pc, #16]	@ (8005014 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005002:	5ccb      	ldrb	r3, [r1, r3]
 8005004:	f003 031f 	and.w	r3, r3, #31
 8005008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800500c:	4618      	mov	r0, r3
 800500e:	bd80      	pop	{r7, pc}
 8005010:	40021000 	.word	0x40021000
 8005014:	0800bdf8 	.word	0x0800bdf8

08005018 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005020:	2300      	movs	r3, #0
 8005022:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005024:	4b2a      	ldr	r3, [pc, #168]	@ (80050d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005030:	f7ff f9ee 	bl	8004410 <HAL_PWREx_GetVoltageRange>
 8005034:	6178      	str	r0, [r7, #20]
 8005036:	e014      	b.n	8005062 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005038:	4b25      	ldr	r3, [pc, #148]	@ (80050d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800503a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800503c:	4a24      	ldr	r2, [pc, #144]	@ (80050d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800503e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005042:	6593      	str	r3, [r2, #88]	@ 0x58
 8005044:	4b22      	ldr	r3, [pc, #136]	@ (80050d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005050:	f7ff f9de 	bl	8004410 <HAL_PWREx_GetVoltageRange>
 8005054:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005056:	4b1e      	ldr	r3, [pc, #120]	@ (80050d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800505a:	4a1d      	ldr	r2, [pc, #116]	@ (80050d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800505c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005060:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005068:	d10b      	bne.n	8005082 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b80      	cmp	r3, #128	@ 0x80
 800506e:	d919      	bls.n	80050a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2ba0      	cmp	r3, #160	@ 0xa0
 8005074:	d902      	bls.n	800507c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005076:	2302      	movs	r3, #2
 8005078:	613b      	str	r3, [r7, #16]
 800507a:	e013      	b.n	80050a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800507c:	2301      	movs	r3, #1
 800507e:	613b      	str	r3, [r7, #16]
 8005080:	e010      	b.n	80050a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b80      	cmp	r3, #128	@ 0x80
 8005086:	d902      	bls.n	800508e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005088:	2303      	movs	r3, #3
 800508a:	613b      	str	r3, [r7, #16]
 800508c:	e00a      	b.n	80050a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b80      	cmp	r3, #128	@ 0x80
 8005092:	d102      	bne.n	800509a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005094:	2302      	movs	r3, #2
 8005096:	613b      	str	r3, [r7, #16]
 8005098:	e004      	b.n	80050a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b70      	cmp	r3, #112	@ 0x70
 800509e:	d101      	bne.n	80050a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050a0:	2301      	movs	r3, #1
 80050a2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80050a4:	4b0b      	ldr	r3, [pc, #44]	@ (80050d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f023 0207 	bic.w	r2, r3, #7
 80050ac:	4909      	ldr	r1, [pc, #36]	@ (80050d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80050b4:	4b07      	ldr	r3, [pc, #28]	@ (80050d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d001      	beq.n	80050c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e000      	b.n	80050c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	40021000 	.word	0x40021000
 80050d4:	40022000 	.word	0x40022000

080050d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050e0:	2300      	movs	r3, #0
 80050e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050e4:	2300      	movs	r3, #0
 80050e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d041      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80050fc:	d02a      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80050fe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005102:	d824      	bhi.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005104:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005108:	d008      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800510a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800510e:	d81e      	bhi.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00a      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005114:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005118:	d010      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800511a:	e018      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800511c:	4b86      	ldr	r3, [pc, #536]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	4a85      	ldr	r2, [pc, #532]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005122:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005126:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005128:	e015      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	3304      	adds	r3, #4
 800512e:	2100      	movs	r1, #0
 8005130:	4618      	mov	r0, r3
 8005132:	f000 facb 	bl	80056cc <RCCEx_PLLSAI1_Config>
 8005136:	4603      	mov	r3, r0
 8005138:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800513a:	e00c      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	3320      	adds	r3, #32
 8005140:	2100      	movs	r1, #0
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fbb6 	bl	80058b4 <RCCEx_PLLSAI2_Config>
 8005148:	4603      	mov	r3, r0
 800514a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800514c:	e003      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	74fb      	strb	r3, [r7, #19]
      break;
 8005152:	e000      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005154:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005156:	7cfb      	ldrb	r3, [r7, #19]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10b      	bne.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800515c:	4b76      	ldr	r3, [pc, #472]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800515e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005162:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800516a:	4973      	ldr	r1, [pc, #460]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800516c:	4313      	orrs	r3, r2
 800516e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005172:	e001      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005174:	7cfb      	ldrb	r3, [r7, #19]
 8005176:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d041      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005188:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800518c:	d02a      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800518e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005192:	d824      	bhi.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005194:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005198:	d008      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800519a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800519e:	d81e      	bhi.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00a      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80051a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051a8:	d010      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80051aa:	e018      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051ac:	4b62      	ldr	r3, [pc, #392]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	4a61      	ldr	r2, [pc, #388]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051b8:	e015      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	3304      	adds	r3, #4
 80051be:	2100      	movs	r1, #0
 80051c0:	4618      	mov	r0, r3
 80051c2:	f000 fa83 	bl	80056cc <RCCEx_PLLSAI1_Config>
 80051c6:	4603      	mov	r3, r0
 80051c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051ca:	e00c      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	3320      	adds	r3, #32
 80051d0:	2100      	movs	r1, #0
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fb6e 	bl	80058b4 <RCCEx_PLLSAI2_Config>
 80051d8:	4603      	mov	r3, r0
 80051da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051dc:	e003      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	74fb      	strb	r3, [r7, #19]
      break;
 80051e2:	e000      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80051e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051e6:	7cfb      	ldrb	r3, [r7, #19]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10b      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80051ec:	4b52      	ldr	r3, [pc, #328]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051fa:	494f      	ldr	r1, [pc, #316]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005202:	e001      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005204:	7cfb      	ldrb	r3, [r7, #19]
 8005206:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 80a0 	beq.w	8005356 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005216:	2300      	movs	r3, #0
 8005218:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800521a:	4b47      	ldr	r3, [pc, #284]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800521c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800521e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005226:	2301      	movs	r3, #1
 8005228:	e000      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800522a:	2300      	movs	r3, #0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00d      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005230:	4b41      	ldr	r3, [pc, #260]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005234:	4a40      	ldr	r2, [pc, #256]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005236:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800523a:	6593      	str	r3, [r2, #88]	@ 0x58
 800523c:	4b3e      	ldr	r3, [pc, #248]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800523e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005244:	60bb      	str	r3, [r7, #8]
 8005246:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005248:	2301      	movs	r3, #1
 800524a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800524c:	4b3b      	ldr	r3, [pc, #236]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a3a      	ldr	r2, [pc, #232]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005252:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005256:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005258:	f7fd f8c2 	bl	80023e0 <HAL_GetTick>
 800525c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800525e:	e009      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005260:	f7fd f8be 	bl	80023e0 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d902      	bls.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	74fb      	strb	r3, [r7, #19]
        break;
 8005272:	e005      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005274:	4b31      	ldr	r3, [pc, #196]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800527c:	2b00      	cmp	r3, #0
 800527e:	d0ef      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005280:	7cfb      	ldrb	r3, [r7, #19]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d15c      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005286:	4b2c      	ldr	r3, [pc, #176]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800528c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005290:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d01f      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d019      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052a4:	4b24      	ldr	r3, [pc, #144]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052b0:	4b21      	ldr	r3, [pc, #132]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052b6:	4a20      	ldr	r2, [pc, #128]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052d0:	4a19      	ldr	r2, [pc, #100]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d016      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e2:	f7fd f87d 	bl	80023e0 <HAL_GetTick>
 80052e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052e8:	e00b      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ea:	f7fd f879 	bl	80023e0 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d902      	bls.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	74fb      	strb	r3, [r7, #19]
            break;
 8005300:	e006      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005302:	4b0d      	ldr	r3, [pc, #52]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0ec      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005310:	7cfb      	ldrb	r3, [r7, #19]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10c      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005316:	4b08      	ldr	r3, [pc, #32]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800531c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005326:	4904      	ldr	r1, [pc, #16]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005328:	4313      	orrs	r3, r2
 800532a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800532e:	e009      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005330:	7cfb      	ldrb	r3, [r7, #19]
 8005332:	74bb      	strb	r3, [r7, #18]
 8005334:	e006      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005336:	bf00      	nop
 8005338:	40021000 	.word	0x40021000
 800533c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005340:	7cfb      	ldrb	r3, [r7, #19]
 8005342:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005344:	7c7b      	ldrb	r3, [r7, #17]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d105      	bne.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800534a:	4b9e      	ldr	r3, [pc, #632]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800534c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800534e:	4a9d      	ldr	r2, [pc, #628]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005350:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005354:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00a      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005362:	4b98      	ldr	r3, [pc, #608]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005368:	f023 0203 	bic.w	r2, r3, #3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005370:	4994      	ldr	r1, [pc, #592]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005372:	4313      	orrs	r3, r2
 8005374:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00a      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005384:	4b8f      	ldr	r3, [pc, #572]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800538a:	f023 020c 	bic.w	r2, r3, #12
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005392:	498c      	ldr	r1, [pc, #560]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005394:	4313      	orrs	r3, r2
 8005396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0304 	and.w	r3, r3, #4
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00a      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053a6:	4b87      	ldr	r3, [pc, #540]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b4:	4983      	ldr	r1, [pc, #524]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0308 	and.w	r3, r3, #8
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00a      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053c8:	4b7e      	ldr	r3, [pc, #504]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053d6:	497b      	ldr	r1, [pc, #492]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0310 	and.w	r3, r3, #16
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00a      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053ea:	4b76      	ldr	r3, [pc, #472]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053f8:	4972      	ldr	r1, [pc, #456]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0320 	and.w	r3, r3, #32
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00a      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800540c:	4b6d      	ldr	r3, [pc, #436]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005412:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800541a:	496a      	ldr	r1, [pc, #424]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541c:	4313      	orrs	r3, r2
 800541e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00a      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800542e:	4b65      	ldr	r3, [pc, #404]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005434:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800543c:	4961      	ldr	r1, [pc, #388]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800543e:	4313      	orrs	r3, r2
 8005440:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00a      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005450:	4b5c      	ldr	r3, [pc, #368]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005456:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800545e:	4959      	ldr	r1, [pc, #356]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005460:	4313      	orrs	r3, r2
 8005462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00a      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005472:	4b54      	ldr	r3, [pc, #336]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005478:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005480:	4950      	ldr	r1, [pc, #320]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005482:	4313      	orrs	r3, r2
 8005484:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00a      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005494:	4b4b      	ldr	r3, [pc, #300]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800549a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054a2:	4948      	ldr	r1, [pc, #288]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00a      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054b6:	4b43      	ldr	r3, [pc, #268]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054c4:	493f      	ldr	r1, [pc, #252]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d028      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054d8:	4b3a      	ldr	r3, [pc, #232]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054e6:	4937      	ldr	r1, [pc, #220]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054f6:	d106      	bne.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054f8:	4b32      	ldr	r3, [pc, #200]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	4a31      	ldr	r2, [pc, #196]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005502:	60d3      	str	r3, [r2, #12]
 8005504:	e011      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800550a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800550e:	d10c      	bne.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3304      	adds	r3, #4
 8005514:	2101      	movs	r1, #1
 8005516:	4618      	mov	r0, r3
 8005518:	f000 f8d8 	bl	80056cc <RCCEx_PLLSAI1_Config>
 800551c:	4603      	mov	r3, r0
 800551e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005520:	7cfb      	ldrb	r3, [r7, #19]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005526:	7cfb      	ldrb	r3, [r7, #19]
 8005528:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d028      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005536:	4b23      	ldr	r3, [pc, #140]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800553c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005544:	491f      	ldr	r1, [pc, #124]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005546:	4313      	orrs	r3, r2
 8005548:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005550:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005554:	d106      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005556:	4b1b      	ldr	r3, [pc, #108]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	4a1a      	ldr	r2, [pc, #104]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800555c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005560:	60d3      	str	r3, [r2, #12]
 8005562:	e011      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005568:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800556c:	d10c      	bne.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	3304      	adds	r3, #4
 8005572:	2101      	movs	r1, #1
 8005574:	4618      	mov	r0, r3
 8005576:	f000 f8a9 	bl	80056cc <RCCEx_PLLSAI1_Config>
 800557a:	4603      	mov	r3, r0
 800557c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800557e:	7cfb      	ldrb	r3, [r7, #19]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005584:	7cfb      	ldrb	r3, [r7, #19]
 8005586:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d02b      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005594:	4b0b      	ldr	r3, [pc, #44]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800559a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055a2:	4908      	ldr	r1, [pc, #32]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055b2:	d109      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055b4:	4b03      	ldr	r3, [pc, #12]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	4a02      	ldr	r2, [pc, #8]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055be:	60d3      	str	r3, [r2, #12]
 80055c0:	e014      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80055c2:	bf00      	nop
 80055c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055d0:	d10c      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	3304      	adds	r3, #4
 80055d6:	2101      	movs	r1, #1
 80055d8:	4618      	mov	r0, r3
 80055da:	f000 f877 	bl	80056cc <RCCEx_PLLSAI1_Config>
 80055de:	4603      	mov	r3, r0
 80055e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055e2:	7cfb      	ldrb	r3, [r7, #19]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80055e8:	7cfb      	ldrb	r3, [r7, #19]
 80055ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d02f      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055f8:	4b2b      	ldr	r3, [pc, #172]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005606:	4928      	ldr	r1, [pc, #160]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005608:	4313      	orrs	r3, r2
 800560a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005612:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005616:	d10d      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	3304      	adds	r3, #4
 800561c:	2102      	movs	r1, #2
 800561e:	4618      	mov	r0, r3
 8005620:	f000 f854 	bl	80056cc <RCCEx_PLLSAI1_Config>
 8005624:	4603      	mov	r3, r0
 8005626:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005628:	7cfb      	ldrb	r3, [r7, #19]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d014      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800562e:	7cfb      	ldrb	r3, [r7, #19]
 8005630:	74bb      	strb	r3, [r7, #18]
 8005632:	e011      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005638:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800563c:	d10c      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	3320      	adds	r3, #32
 8005642:	2102      	movs	r1, #2
 8005644:	4618      	mov	r0, r3
 8005646:	f000 f935 	bl	80058b4 <RCCEx_PLLSAI2_Config>
 800564a:	4603      	mov	r3, r0
 800564c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800564e:	7cfb      	ldrb	r3, [r7, #19]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005654:	7cfb      	ldrb	r3, [r7, #19]
 8005656:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00a      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005664:	4b10      	ldr	r3, [pc, #64]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800566a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005672:	490d      	ldr	r1, [pc, #52]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005674:	4313      	orrs	r3, r2
 8005676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00b      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005686:	4b08      	ldr	r3, [pc, #32]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800568c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005696:	4904      	ldr	r1, [pc, #16]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005698:	4313      	orrs	r3, r2
 800569a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800569e:	7cbb      	ldrb	r3, [r7, #18]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3718      	adds	r7, #24
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	40021000 	.word	0x40021000

080056ac <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80056b0:	4b05      	ldr	r3, [pc, #20]	@ (80056c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a04      	ldr	r2, [pc, #16]	@ (80056c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80056b6:	f043 0304 	orr.w	r3, r3, #4
 80056ba:	6013      	str	r3, [r2, #0]
}
 80056bc:	bf00      	nop
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	40021000 	.word	0x40021000

080056cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056da:	4b75      	ldr	r3, [pc, #468]	@ (80058b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d018      	beq.n	8005718 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80056e6:	4b72      	ldr	r3, [pc, #456]	@ (80058b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f003 0203 	and.w	r2, r3, #3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d10d      	bne.n	8005712 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
       ||
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d009      	beq.n	8005712 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80056fe:	4b6c      	ldr	r3, [pc, #432]	@ (80058b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	091b      	lsrs	r3, r3, #4
 8005704:	f003 0307 	and.w	r3, r3, #7
 8005708:	1c5a      	adds	r2, r3, #1
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
       ||
 800570e:	429a      	cmp	r2, r3
 8005710:	d047      	beq.n	80057a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	73fb      	strb	r3, [r7, #15]
 8005716:	e044      	b.n	80057a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b03      	cmp	r3, #3
 800571e:	d018      	beq.n	8005752 <RCCEx_PLLSAI1_Config+0x86>
 8005720:	2b03      	cmp	r3, #3
 8005722:	d825      	bhi.n	8005770 <RCCEx_PLLSAI1_Config+0xa4>
 8005724:	2b01      	cmp	r3, #1
 8005726:	d002      	beq.n	800572e <RCCEx_PLLSAI1_Config+0x62>
 8005728:	2b02      	cmp	r3, #2
 800572a:	d009      	beq.n	8005740 <RCCEx_PLLSAI1_Config+0x74>
 800572c:	e020      	b.n	8005770 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800572e:	4b60      	ldr	r3, [pc, #384]	@ (80058b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d11d      	bne.n	8005776 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800573e:	e01a      	b.n	8005776 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005740:	4b5b      	ldr	r3, [pc, #364]	@ (80058b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005748:	2b00      	cmp	r3, #0
 800574a:	d116      	bne.n	800577a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005750:	e013      	b.n	800577a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005752:	4b57      	ldr	r3, [pc, #348]	@ (80058b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10f      	bne.n	800577e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800575e:	4b54      	ldr	r3, [pc, #336]	@ (80058b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d109      	bne.n	800577e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800576e:	e006      	b.n	800577e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	73fb      	strb	r3, [r7, #15]
      break;
 8005774:	e004      	b.n	8005780 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005776:	bf00      	nop
 8005778:	e002      	b.n	8005780 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800577a:	bf00      	nop
 800577c:	e000      	b.n	8005780 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800577e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005780:	7bfb      	ldrb	r3, [r7, #15]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10d      	bne.n	80057a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005786:	4b4a      	ldr	r3, [pc, #296]	@ (80058b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6819      	ldr	r1, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	3b01      	subs	r3, #1
 8005798:	011b      	lsls	r3, r3, #4
 800579a:	430b      	orrs	r3, r1
 800579c:	4944      	ldr	r1, [pc, #272]	@ (80058b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80057a2:	7bfb      	ldrb	r3, [r7, #15]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d17d      	bne.n	80058a4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80057a8:	4b41      	ldr	r3, [pc, #260]	@ (80058b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a40      	ldr	r2, [pc, #256]	@ (80058b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80057b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057b4:	f7fc fe14 	bl	80023e0 <HAL_GetTick>
 80057b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057ba:	e009      	b.n	80057d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057bc:	f7fc fe10 	bl	80023e0 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d902      	bls.n	80057d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	73fb      	strb	r3, [r7, #15]
        break;
 80057ce:	e005      	b.n	80057dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057d0:	4b37      	ldr	r3, [pc, #220]	@ (80058b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1ef      	bne.n	80057bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d160      	bne.n	80058a4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d111      	bne.n	800580c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057e8:	4b31      	ldr	r3, [pc, #196]	@ (80058b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80057f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	6892      	ldr	r2, [r2, #8]
 80057f8:	0211      	lsls	r1, r2, #8
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	68d2      	ldr	r2, [r2, #12]
 80057fe:	0912      	lsrs	r2, r2, #4
 8005800:	0452      	lsls	r2, r2, #17
 8005802:	430a      	orrs	r2, r1
 8005804:	492a      	ldr	r1, [pc, #168]	@ (80058b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005806:	4313      	orrs	r3, r2
 8005808:	610b      	str	r3, [r1, #16]
 800580a:	e027      	b.n	800585c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d112      	bne.n	8005838 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005812:	4b27      	ldr	r3, [pc, #156]	@ (80058b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800581a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	6892      	ldr	r2, [r2, #8]
 8005822:	0211      	lsls	r1, r2, #8
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6912      	ldr	r2, [r2, #16]
 8005828:	0852      	lsrs	r2, r2, #1
 800582a:	3a01      	subs	r2, #1
 800582c:	0552      	lsls	r2, r2, #21
 800582e:	430a      	orrs	r2, r1
 8005830:	491f      	ldr	r1, [pc, #124]	@ (80058b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005832:	4313      	orrs	r3, r2
 8005834:	610b      	str	r3, [r1, #16]
 8005836:	e011      	b.n	800585c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005838:	4b1d      	ldr	r3, [pc, #116]	@ (80058b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005840:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	6892      	ldr	r2, [r2, #8]
 8005848:	0211      	lsls	r1, r2, #8
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	6952      	ldr	r2, [r2, #20]
 800584e:	0852      	lsrs	r2, r2, #1
 8005850:	3a01      	subs	r2, #1
 8005852:	0652      	lsls	r2, r2, #25
 8005854:	430a      	orrs	r2, r1
 8005856:	4916      	ldr	r1, [pc, #88]	@ (80058b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005858:	4313      	orrs	r3, r2
 800585a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800585c:	4b14      	ldr	r3, [pc, #80]	@ (80058b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a13      	ldr	r2, [pc, #76]	@ (80058b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005862:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005866:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005868:	f7fc fdba 	bl	80023e0 <HAL_GetTick>
 800586c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800586e:	e009      	b.n	8005884 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005870:	f7fc fdb6 	bl	80023e0 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d902      	bls.n	8005884 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	73fb      	strb	r3, [r7, #15]
          break;
 8005882:	e005      	b.n	8005890 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005884:	4b0a      	ldr	r3, [pc, #40]	@ (80058b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0ef      	beq.n	8005870 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005890:	7bfb      	ldrb	r3, [r7, #15]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d106      	bne.n	80058a4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005896:	4b06      	ldr	r3, [pc, #24]	@ (80058b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005898:	691a      	ldr	r2, [r3, #16]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	4904      	ldr	r1, [pc, #16]	@ (80058b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	40021000 	.word	0x40021000

080058b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058c2:	4b6a      	ldr	r3, [pc, #424]	@ (8005a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d018      	beq.n	8005900 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80058ce:	4b67      	ldr	r3, [pc, #412]	@ (8005a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f003 0203 	and.w	r2, r3, #3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d10d      	bne.n	80058fa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
       ||
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d009      	beq.n	80058fa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80058e6:	4b61      	ldr	r3, [pc, #388]	@ (8005a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	091b      	lsrs	r3, r3, #4
 80058ec:	f003 0307 	and.w	r3, r3, #7
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
       ||
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d047      	beq.n	800598a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	73fb      	strb	r3, [r7, #15]
 80058fe:	e044      	b.n	800598a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b03      	cmp	r3, #3
 8005906:	d018      	beq.n	800593a <RCCEx_PLLSAI2_Config+0x86>
 8005908:	2b03      	cmp	r3, #3
 800590a:	d825      	bhi.n	8005958 <RCCEx_PLLSAI2_Config+0xa4>
 800590c:	2b01      	cmp	r3, #1
 800590e:	d002      	beq.n	8005916 <RCCEx_PLLSAI2_Config+0x62>
 8005910:	2b02      	cmp	r3, #2
 8005912:	d009      	beq.n	8005928 <RCCEx_PLLSAI2_Config+0x74>
 8005914:	e020      	b.n	8005958 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005916:	4b55      	ldr	r3, [pc, #340]	@ (8005a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d11d      	bne.n	800595e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005926:	e01a      	b.n	800595e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005928:	4b50      	ldr	r3, [pc, #320]	@ (8005a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005930:	2b00      	cmp	r3, #0
 8005932:	d116      	bne.n	8005962 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005938:	e013      	b.n	8005962 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800593a:	4b4c      	ldr	r3, [pc, #304]	@ (8005a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10f      	bne.n	8005966 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005946:	4b49      	ldr	r3, [pc, #292]	@ (8005a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d109      	bne.n	8005966 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005956:	e006      	b.n	8005966 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	73fb      	strb	r3, [r7, #15]
      break;
 800595c:	e004      	b.n	8005968 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800595e:	bf00      	nop
 8005960:	e002      	b.n	8005968 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005962:	bf00      	nop
 8005964:	e000      	b.n	8005968 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005966:	bf00      	nop
    }

    if(status == HAL_OK)
 8005968:	7bfb      	ldrb	r3, [r7, #15]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10d      	bne.n	800598a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800596e:	4b3f      	ldr	r3, [pc, #252]	@ (8005a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6819      	ldr	r1, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	3b01      	subs	r3, #1
 8005980:	011b      	lsls	r3, r3, #4
 8005982:	430b      	orrs	r3, r1
 8005984:	4939      	ldr	r1, [pc, #228]	@ (8005a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005986:	4313      	orrs	r3, r2
 8005988:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800598a:	7bfb      	ldrb	r3, [r7, #15]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d167      	bne.n	8005a60 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005990:	4b36      	ldr	r3, [pc, #216]	@ (8005a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a35      	ldr	r2, [pc, #212]	@ (8005a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005996:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800599a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800599c:	f7fc fd20 	bl	80023e0 <HAL_GetTick>
 80059a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059a2:	e009      	b.n	80059b8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059a4:	f7fc fd1c 	bl	80023e0 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d902      	bls.n	80059b8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	73fb      	strb	r3, [r7, #15]
        break;
 80059b6:	e005      	b.n	80059c4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059b8:	4b2c      	ldr	r3, [pc, #176]	@ (8005a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1ef      	bne.n	80059a4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d14a      	bne.n	8005a60 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d111      	bne.n	80059f4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059d0:	4b26      	ldr	r3, [pc, #152]	@ (8005a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80059d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	6892      	ldr	r2, [r2, #8]
 80059e0:	0211      	lsls	r1, r2, #8
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	68d2      	ldr	r2, [r2, #12]
 80059e6:	0912      	lsrs	r2, r2, #4
 80059e8:	0452      	lsls	r2, r2, #17
 80059ea:	430a      	orrs	r2, r1
 80059ec:	491f      	ldr	r1, [pc, #124]	@ (8005a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	614b      	str	r3, [r1, #20]
 80059f2:	e011      	b.n	8005a18 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059f4:	4b1d      	ldr	r3, [pc, #116]	@ (8005a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80059fc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6892      	ldr	r2, [r2, #8]
 8005a04:	0211      	lsls	r1, r2, #8
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	6912      	ldr	r2, [r2, #16]
 8005a0a:	0852      	lsrs	r2, r2, #1
 8005a0c:	3a01      	subs	r2, #1
 8005a0e:	0652      	lsls	r2, r2, #25
 8005a10:	430a      	orrs	r2, r1
 8005a12:	4916      	ldr	r1, [pc, #88]	@ (8005a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005a18:	4b14      	ldr	r3, [pc, #80]	@ (8005a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a13      	ldr	r2, [pc, #76]	@ (8005a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a24:	f7fc fcdc 	bl	80023e0 <HAL_GetTick>
 8005a28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a2a:	e009      	b.n	8005a40 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a2c:	f7fc fcd8 	bl	80023e0 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d902      	bls.n	8005a40 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	73fb      	strb	r3, [r7, #15]
          break;
 8005a3e:	e005      	b.n	8005a4c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a40:	4b0a      	ldr	r3, [pc, #40]	@ (8005a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0ef      	beq.n	8005a2c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005a52:	4b06      	ldr	r3, [pc, #24]	@ (8005a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a54:	695a      	ldr	r2, [r3, #20]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	4904      	ldr	r1, [pc, #16]	@ (8005a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	40021000 	.word	0x40021000

08005a70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e095      	b.n	8005bae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d108      	bne.n	8005a9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a92:	d009      	beq.n	8005aa8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	61da      	str	r2, [r3, #28]
 8005a9a:	e005      	b.n	8005aa8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d106      	bne.n	8005ac8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7fc f9f8 	bl	8001eb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ade:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ae8:	d902      	bls.n	8005af0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005aea:	2300      	movs	r3, #0
 8005aec:	60fb      	str	r3, [r7, #12]
 8005aee:	e002      	b.n	8005af6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005af0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005af4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005afe:	d007      	beq.n	8005b10 <HAL_SPI_Init+0xa0>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b08:	d002      	beq.n	8005b10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005b20:	431a      	orrs	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	431a      	orrs	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	69db      	ldr	r3, [r3, #28]
 8005b44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b52:	ea42 0103 	orr.w	r1, r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b5a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	0c1b      	lsrs	r3, r3, #16
 8005b6c:	f003 0204 	and.w	r2, r3, #4
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b74:	f003 0310 	and.w	r3, r3, #16
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b7e:	f003 0308 	and.w	r3, r3, #8
 8005b82:	431a      	orrs	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005b8c:	ea42 0103 	orr.w	r1, r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b088      	sub	sp, #32
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	60f8      	str	r0, [r7, #12]
 8005bbe:	60b9      	str	r1, [r7, #8]
 8005bc0:	603b      	str	r3, [r7, #0]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bc6:	f7fc fc0b 	bl	80023e0 <HAL_GetTick>
 8005bca:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005bcc:	88fb      	ldrh	r3, [r7, #6]
 8005bce:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d001      	beq.n	8005be0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005bdc:	2302      	movs	r3, #2
 8005bde:	e15c      	b.n	8005e9a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <HAL_SPI_Transmit+0x36>
 8005be6:	88fb      	ldrh	r3, [r7, #6]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e154      	b.n	8005e9a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d101      	bne.n	8005bfe <HAL_SPI_Transmit+0x48>
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	e14d      	b.n	8005e9a <HAL_SPI_Transmit+0x2e4>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2203      	movs	r2, #3
 8005c0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	88fa      	ldrh	r2, [r7, #6]
 8005c1e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	88fa      	ldrh	r2, [r7, #6]
 8005c24:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c50:	d10f      	bne.n	8005c72 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c7c:	2b40      	cmp	r3, #64	@ 0x40
 8005c7e:	d007      	beq.n	8005c90 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c98:	d952      	bls.n	8005d40 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <HAL_SPI_Transmit+0xf2>
 8005ca2:	8b7b      	ldrh	r3, [r7, #26]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d145      	bne.n	8005d34 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cac:	881a      	ldrh	r2, [r3, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb8:	1c9a      	adds	r2, r3, #2
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ccc:	e032      	b.n	8005d34 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d112      	bne.n	8005d02 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce0:	881a      	ldrh	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cec:	1c9a      	adds	r2, r3, #2
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d00:	e018      	b.n	8005d34 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d02:	f7fc fb6d 	bl	80023e0 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d803      	bhi.n	8005d1a <HAL_SPI_Transmit+0x164>
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d18:	d102      	bne.n	8005d20 <HAL_SPI_Transmit+0x16a>
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d109      	bne.n	8005d34 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e0b2      	b.n	8005e9a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1c7      	bne.n	8005cce <HAL_SPI_Transmit+0x118>
 8005d3e:	e083      	b.n	8005e48 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d002      	beq.n	8005d4e <HAL_SPI_Transmit+0x198>
 8005d48:	8b7b      	ldrh	r3, [r7, #26]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d177      	bne.n	8005e3e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d912      	bls.n	8005d7e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d5c:	881a      	ldrh	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d68:	1c9a      	adds	r2, r3, #2
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	3b02      	subs	r3, #2
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d7c:	e05f      	b.n	8005e3e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	330c      	adds	r3, #12
 8005d88:	7812      	ldrb	r2, [r2, #0]
 8005d8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005da4:	e04b      	b.n	8005e3e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d12b      	bne.n	8005e0c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d912      	bls.n	8005de4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc2:	881a      	ldrh	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dce:	1c9a      	adds	r2, r3, #2
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	3b02      	subs	r3, #2
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005de2:	e02c      	b.n	8005e3e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	330c      	adds	r3, #12
 8005dee:	7812      	ldrb	r2, [r2, #0]
 8005df0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df6:	1c5a      	adds	r2, r3, #1
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	3b01      	subs	r3, #1
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e0a:	e018      	b.n	8005e3e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e0c:	f7fc fae8 	bl	80023e0 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d803      	bhi.n	8005e24 <HAL_SPI_Transmit+0x26e>
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e22:	d102      	bne.n	8005e2a <HAL_SPI_Transmit+0x274>
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d109      	bne.n	8005e3e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e02d      	b.n	8005e9a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1ae      	bne.n	8005da6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e48:	69fa      	ldr	r2, [r7, #28]
 8005e4a:	6839      	ldr	r1, [r7, #0]
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f000 f955 	bl	80060fc <SPI_EndRxTxTransaction>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d002      	beq.n	8005e5e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10a      	bne.n	8005e7c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e66:	2300      	movs	r3, #0
 8005e68:	617b      	str	r3, [r7, #20]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	617b      	str	r3, [r7, #20]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	617b      	str	r3, [r7, #20]
 8005e7a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e000      	b.n	8005e9a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005e98:	2300      	movs	r3, #0
  }
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3720      	adds	r7, #32
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b083      	sub	sp, #12
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005eb0:	b2db      	uxtb	r3, r3
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	370c      	adds	r7, #12
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
	...

08005ec0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b088      	sub	sp, #32
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	603b      	str	r3, [r7, #0]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ed0:	f7fc fa86 	bl	80023e0 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed8:	1a9b      	subs	r3, r3, r2
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	4413      	add	r3, r2
 8005ede:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ee0:	f7fc fa7e 	bl	80023e0 <HAL_GetTick>
 8005ee4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ee6:	4b39      	ldr	r3, [pc, #228]	@ (8005fcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	015b      	lsls	r3, r3, #5
 8005eec:	0d1b      	lsrs	r3, r3, #20
 8005eee:	69fa      	ldr	r2, [r7, #28]
 8005ef0:	fb02 f303 	mul.w	r3, r2, r3
 8005ef4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ef6:	e054      	b.n	8005fa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efe:	d050      	beq.n	8005fa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f00:	f7fc fa6e 	bl	80023e0 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	69fa      	ldr	r2, [r7, #28]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d902      	bls.n	8005f16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d13d      	bne.n	8005f92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005f24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f2e:	d111      	bne.n	8005f54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f38:	d004      	beq.n	8005f44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f42:	d107      	bne.n	8005f54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f5c:	d10f      	bne.n	8005f7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f6c:	601a      	str	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e017      	b.n	8005fc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689a      	ldr	r2, [r3, #8]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	4013      	ands	r3, r2
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	bf0c      	ite	eq
 8005fb2:	2301      	moveq	r3, #1
 8005fb4:	2300      	movne	r3, #0
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	461a      	mov	r2, r3
 8005fba:	79fb      	ldrb	r3, [r7, #7]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d19b      	bne.n	8005ef8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3720      	adds	r7, #32
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	20000018 	.word	0x20000018

08005fd0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b08a      	sub	sp, #40	@ 0x28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
 8005fdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005fe2:	f7fc f9fd 	bl	80023e0 <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fea:	1a9b      	subs	r3, r3, r2
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	4413      	add	r3, r2
 8005ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005ff2:	f7fc f9f5 	bl	80023e0 <HAL_GetTick>
 8005ff6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	330c      	adds	r3, #12
 8005ffe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006000:	4b3d      	ldr	r3, [pc, #244]	@ (80060f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	4613      	mov	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	00da      	lsls	r2, r3, #3
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	0d1b      	lsrs	r3, r3, #20
 8006010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006012:	fb02 f303 	mul.w	r3, r2, r3
 8006016:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006018:	e060      	b.n	80060dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006020:	d107      	bne.n	8006032 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d104      	bne.n	8006032 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	b2db      	uxtb	r3, r3
 800602e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006030:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006038:	d050      	beq.n	80060dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800603a:	f7fc f9d1 	bl	80023e0 <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006046:	429a      	cmp	r2, r3
 8006048:	d902      	bls.n	8006050 <SPI_WaitFifoStateUntilTimeout+0x80>
 800604a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604c:	2b00      	cmp	r3, #0
 800604e:	d13d      	bne.n	80060cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800605e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006068:	d111      	bne.n	800608e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006072:	d004      	beq.n	800607e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800607c:	d107      	bne.n	800608e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800608c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006092:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006096:	d10f      	bne.n	80060b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060a6:	601a      	str	r2, [r3, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80060b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e010      	b.n	80060ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80060d2:	2300      	movs	r3, #0
 80060d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	3b01      	subs	r3, #1
 80060da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689a      	ldr	r2, [r3, #8]
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	4013      	ands	r3, r2
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d196      	bne.n	800601a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3728      	adds	r7, #40	@ 0x28
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	20000018 	.word	0x20000018

080060fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af02      	add	r7, sp, #8
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	2200      	movs	r2, #0
 8006110:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f7ff ff5b 	bl	8005fd0 <SPI_WaitFifoStateUntilTimeout>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d007      	beq.n	8006130 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006124:	f043 0220 	orr.w	r2, r3, #32
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e027      	b.n	8006180 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	2200      	movs	r2, #0
 8006138:	2180      	movs	r1, #128	@ 0x80
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f7ff fec0 	bl	8005ec0 <SPI_WaitFlagStateUntilTimeout>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d007      	beq.n	8006156 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800614a:	f043 0220 	orr.w	r2, r3, #32
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e014      	b.n	8006180 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	2200      	movs	r2, #0
 800615e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f7ff ff34 	bl	8005fd0 <SPI_WaitFifoStateUntilTimeout>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d007      	beq.n	800617e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006172:	f043 0220 	orr.w	r2, r3, #32
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e000      	b.n	8006180 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e040      	b.n	800621c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d106      	bne.n	80061b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7fc f82a 	bl	8002204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2224      	movs	r2, #36	@ 0x24
 80061b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f022 0201 	bic.w	r2, r2, #1
 80061c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 fb6a 	bl	80068a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f8af 	bl	8006338 <UART_SetConfig>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d101      	bne.n	80061e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e01b      	b.n	800621c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	685a      	ldr	r2, [r3, #4]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80061f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	689a      	ldr	r2, [r3, #8]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006202:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f042 0201 	orr.w	r2, r2, #1
 8006212:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fbe9 	bl	80069ec <UART_CheckIdleState>
 800621a:	4603      	mov	r3, r0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b08a      	sub	sp, #40	@ 0x28
 8006228:	af02      	add	r7, sp, #8
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	603b      	str	r3, [r7, #0]
 8006230:	4613      	mov	r3, r2
 8006232:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006238:	2b20      	cmp	r3, #32
 800623a:	d177      	bne.n	800632c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d002      	beq.n	8006248 <HAL_UART_Transmit+0x24>
 8006242:	88fb      	ldrh	r3, [r7, #6]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e070      	b.n	800632e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2221      	movs	r2, #33	@ 0x21
 8006258:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800625a:	f7fc f8c1 	bl	80023e0 <HAL_GetTick>
 800625e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	88fa      	ldrh	r2, [r7, #6]
 8006264:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	88fa      	ldrh	r2, [r7, #6]
 800626c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006278:	d108      	bne.n	800628c <HAL_UART_Transmit+0x68>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d104      	bne.n	800628c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006282:	2300      	movs	r3, #0
 8006284:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	61bb      	str	r3, [r7, #24]
 800628a:	e003      	b.n	8006294 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006290:	2300      	movs	r3, #0
 8006292:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006294:	e02f      	b.n	80062f6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2200      	movs	r2, #0
 800629e:	2180      	movs	r1, #128	@ 0x80
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 fc4b 	bl	8006b3c <UART_WaitOnFlagUntilTimeout>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d004      	beq.n	80062b6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2220      	movs	r2, #32
 80062b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e03b      	b.n	800632e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10b      	bne.n	80062d4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	881a      	ldrh	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062c8:	b292      	uxth	r2, r2
 80062ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	3302      	adds	r3, #2
 80062d0:	61bb      	str	r3, [r7, #24]
 80062d2:	e007      	b.n	80062e4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	781a      	ldrb	r2, [r3, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	3301      	adds	r3, #1
 80062e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	3b01      	subs	r3, #1
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1c9      	bne.n	8006296 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	2200      	movs	r2, #0
 800630a:	2140      	movs	r1, #64	@ 0x40
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f000 fc15 	bl	8006b3c <UART_WaitOnFlagUntilTimeout>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d004      	beq.n	8006322 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2220      	movs	r2, #32
 800631c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e005      	b.n	800632e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2220      	movs	r2, #32
 8006326:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006328:	2300      	movs	r3, #0
 800632a:	e000      	b.n	800632e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800632c:	2302      	movs	r3, #2
  }
}
 800632e:	4618      	mov	r0, r3
 8006330:	3720      	adds	r7, #32
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800633c:	b08a      	sub	sp, #40	@ 0x28
 800633e:	af00      	add	r7, sp, #0
 8006340:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	689a      	ldr	r2, [r3, #8]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	431a      	orrs	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	431a      	orrs	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	69db      	ldr	r3, [r3, #28]
 800635c:	4313      	orrs	r3, r2
 800635e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	4ba4      	ldr	r3, [pc, #656]	@ (80065f8 <UART_SetConfig+0x2c0>)
 8006368:	4013      	ands	r3, r2
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	6812      	ldr	r2, [r2, #0]
 800636e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006370:	430b      	orrs	r3, r1
 8006372:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	68da      	ldr	r2, [r3, #12]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a99      	ldr	r2, [pc, #612]	@ (80065fc <UART_SetConfig+0x2c4>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d004      	beq.n	80063a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063a0:	4313      	orrs	r3, r2
 80063a2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063b4:	430a      	orrs	r2, r1
 80063b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a90      	ldr	r2, [pc, #576]	@ (8006600 <UART_SetConfig+0x2c8>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d126      	bne.n	8006410 <UART_SetConfig+0xd8>
 80063c2:	4b90      	ldr	r3, [pc, #576]	@ (8006604 <UART_SetConfig+0x2cc>)
 80063c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063c8:	f003 0303 	and.w	r3, r3, #3
 80063cc:	2b03      	cmp	r3, #3
 80063ce:	d81b      	bhi.n	8006408 <UART_SetConfig+0xd0>
 80063d0:	a201      	add	r2, pc, #4	@ (adr r2, 80063d8 <UART_SetConfig+0xa0>)
 80063d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d6:	bf00      	nop
 80063d8:	080063e9 	.word	0x080063e9
 80063dc:	080063f9 	.word	0x080063f9
 80063e0:	080063f1 	.word	0x080063f1
 80063e4:	08006401 	.word	0x08006401
 80063e8:	2301      	movs	r3, #1
 80063ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063ee:	e116      	b.n	800661e <UART_SetConfig+0x2e6>
 80063f0:	2302      	movs	r3, #2
 80063f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063f6:	e112      	b.n	800661e <UART_SetConfig+0x2e6>
 80063f8:	2304      	movs	r3, #4
 80063fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063fe:	e10e      	b.n	800661e <UART_SetConfig+0x2e6>
 8006400:	2308      	movs	r3, #8
 8006402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006406:	e10a      	b.n	800661e <UART_SetConfig+0x2e6>
 8006408:	2310      	movs	r3, #16
 800640a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800640e:	e106      	b.n	800661e <UART_SetConfig+0x2e6>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a7c      	ldr	r2, [pc, #496]	@ (8006608 <UART_SetConfig+0x2d0>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d138      	bne.n	800648c <UART_SetConfig+0x154>
 800641a:	4b7a      	ldr	r3, [pc, #488]	@ (8006604 <UART_SetConfig+0x2cc>)
 800641c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006420:	f003 030c 	and.w	r3, r3, #12
 8006424:	2b0c      	cmp	r3, #12
 8006426:	d82d      	bhi.n	8006484 <UART_SetConfig+0x14c>
 8006428:	a201      	add	r2, pc, #4	@ (adr r2, 8006430 <UART_SetConfig+0xf8>)
 800642a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642e:	bf00      	nop
 8006430:	08006465 	.word	0x08006465
 8006434:	08006485 	.word	0x08006485
 8006438:	08006485 	.word	0x08006485
 800643c:	08006485 	.word	0x08006485
 8006440:	08006475 	.word	0x08006475
 8006444:	08006485 	.word	0x08006485
 8006448:	08006485 	.word	0x08006485
 800644c:	08006485 	.word	0x08006485
 8006450:	0800646d 	.word	0x0800646d
 8006454:	08006485 	.word	0x08006485
 8006458:	08006485 	.word	0x08006485
 800645c:	08006485 	.word	0x08006485
 8006460:	0800647d 	.word	0x0800647d
 8006464:	2300      	movs	r3, #0
 8006466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800646a:	e0d8      	b.n	800661e <UART_SetConfig+0x2e6>
 800646c:	2302      	movs	r3, #2
 800646e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006472:	e0d4      	b.n	800661e <UART_SetConfig+0x2e6>
 8006474:	2304      	movs	r3, #4
 8006476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800647a:	e0d0      	b.n	800661e <UART_SetConfig+0x2e6>
 800647c:	2308      	movs	r3, #8
 800647e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006482:	e0cc      	b.n	800661e <UART_SetConfig+0x2e6>
 8006484:	2310      	movs	r3, #16
 8006486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800648a:	e0c8      	b.n	800661e <UART_SetConfig+0x2e6>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a5e      	ldr	r2, [pc, #376]	@ (800660c <UART_SetConfig+0x2d4>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d125      	bne.n	80064e2 <UART_SetConfig+0x1aa>
 8006496:	4b5b      	ldr	r3, [pc, #364]	@ (8006604 <UART_SetConfig+0x2cc>)
 8006498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800649c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80064a0:	2b30      	cmp	r3, #48	@ 0x30
 80064a2:	d016      	beq.n	80064d2 <UART_SetConfig+0x19a>
 80064a4:	2b30      	cmp	r3, #48	@ 0x30
 80064a6:	d818      	bhi.n	80064da <UART_SetConfig+0x1a2>
 80064a8:	2b20      	cmp	r3, #32
 80064aa:	d00a      	beq.n	80064c2 <UART_SetConfig+0x18a>
 80064ac:	2b20      	cmp	r3, #32
 80064ae:	d814      	bhi.n	80064da <UART_SetConfig+0x1a2>
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d002      	beq.n	80064ba <UART_SetConfig+0x182>
 80064b4:	2b10      	cmp	r3, #16
 80064b6:	d008      	beq.n	80064ca <UART_SetConfig+0x192>
 80064b8:	e00f      	b.n	80064da <UART_SetConfig+0x1a2>
 80064ba:	2300      	movs	r3, #0
 80064bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064c0:	e0ad      	b.n	800661e <UART_SetConfig+0x2e6>
 80064c2:	2302      	movs	r3, #2
 80064c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064c8:	e0a9      	b.n	800661e <UART_SetConfig+0x2e6>
 80064ca:	2304      	movs	r3, #4
 80064cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064d0:	e0a5      	b.n	800661e <UART_SetConfig+0x2e6>
 80064d2:	2308      	movs	r3, #8
 80064d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064d8:	e0a1      	b.n	800661e <UART_SetConfig+0x2e6>
 80064da:	2310      	movs	r3, #16
 80064dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064e0:	e09d      	b.n	800661e <UART_SetConfig+0x2e6>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a4a      	ldr	r2, [pc, #296]	@ (8006610 <UART_SetConfig+0x2d8>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d125      	bne.n	8006538 <UART_SetConfig+0x200>
 80064ec:	4b45      	ldr	r3, [pc, #276]	@ (8006604 <UART_SetConfig+0x2cc>)
 80064ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80064f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80064f8:	d016      	beq.n	8006528 <UART_SetConfig+0x1f0>
 80064fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80064fc:	d818      	bhi.n	8006530 <UART_SetConfig+0x1f8>
 80064fe:	2b80      	cmp	r3, #128	@ 0x80
 8006500:	d00a      	beq.n	8006518 <UART_SetConfig+0x1e0>
 8006502:	2b80      	cmp	r3, #128	@ 0x80
 8006504:	d814      	bhi.n	8006530 <UART_SetConfig+0x1f8>
 8006506:	2b00      	cmp	r3, #0
 8006508:	d002      	beq.n	8006510 <UART_SetConfig+0x1d8>
 800650a:	2b40      	cmp	r3, #64	@ 0x40
 800650c:	d008      	beq.n	8006520 <UART_SetConfig+0x1e8>
 800650e:	e00f      	b.n	8006530 <UART_SetConfig+0x1f8>
 8006510:	2300      	movs	r3, #0
 8006512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006516:	e082      	b.n	800661e <UART_SetConfig+0x2e6>
 8006518:	2302      	movs	r3, #2
 800651a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800651e:	e07e      	b.n	800661e <UART_SetConfig+0x2e6>
 8006520:	2304      	movs	r3, #4
 8006522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006526:	e07a      	b.n	800661e <UART_SetConfig+0x2e6>
 8006528:	2308      	movs	r3, #8
 800652a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800652e:	e076      	b.n	800661e <UART_SetConfig+0x2e6>
 8006530:	2310      	movs	r3, #16
 8006532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006536:	e072      	b.n	800661e <UART_SetConfig+0x2e6>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a35      	ldr	r2, [pc, #212]	@ (8006614 <UART_SetConfig+0x2dc>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d12a      	bne.n	8006598 <UART_SetConfig+0x260>
 8006542:	4b30      	ldr	r3, [pc, #192]	@ (8006604 <UART_SetConfig+0x2cc>)
 8006544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006548:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800654c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006550:	d01a      	beq.n	8006588 <UART_SetConfig+0x250>
 8006552:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006556:	d81b      	bhi.n	8006590 <UART_SetConfig+0x258>
 8006558:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800655c:	d00c      	beq.n	8006578 <UART_SetConfig+0x240>
 800655e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006562:	d815      	bhi.n	8006590 <UART_SetConfig+0x258>
 8006564:	2b00      	cmp	r3, #0
 8006566:	d003      	beq.n	8006570 <UART_SetConfig+0x238>
 8006568:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800656c:	d008      	beq.n	8006580 <UART_SetConfig+0x248>
 800656e:	e00f      	b.n	8006590 <UART_SetConfig+0x258>
 8006570:	2300      	movs	r3, #0
 8006572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006576:	e052      	b.n	800661e <UART_SetConfig+0x2e6>
 8006578:	2302      	movs	r3, #2
 800657a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800657e:	e04e      	b.n	800661e <UART_SetConfig+0x2e6>
 8006580:	2304      	movs	r3, #4
 8006582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006586:	e04a      	b.n	800661e <UART_SetConfig+0x2e6>
 8006588:	2308      	movs	r3, #8
 800658a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800658e:	e046      	b.n	800661e <UART_SetConfig+0x2e6>
 8006590:	2310      	movs	r3, #16
 8006592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006596:	e042      	b.n	800661e <UART_SetConfig+0x2e6>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a17      	ldr	r2, [pc, #92]	@ (80065fc <UART_SetConfig+0x2c4>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d13a      	bne.n	8006618 <UART_SetConfig+0x2e0>
 80065a2:	4b18      	ldr	r3, [pc, #96]	@ (8006604 <UART_SetConfig+0x2cc>)
 80065a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80065ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065b0:	d01a      	beq.n	80065e8 <UART_SetConfig+0x2b0>
 80065b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065b6:	d81b      	bhi.n	80065f0 <UART_SetConfig+0x2b8>
 80065b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065bc:	d00c      	beq.n	80065d8 <UART_SetConfig+0x2a0>
 80065be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065c2:	d815      	bhi.n	80065f0 <UART_SetConfig+0x2b8>
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <UART_SetConfig+0x298>
 80065c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065cc:	d008      	beq.n	80065e0 <UART_SetConfig+0x2a8>
 80065ce:	e00f      	b.n	80065f0 <UART_SetConfig+0x2b8>
 80065d0:	2300      	movs	r3, #0
 80065d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065d6:	e022      	b.n	800661e <UART_SetConfig+0x2e6>
 80065d8:	2302      	movs	r3, #2
 80065da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065de:	e01e      	b.n	800661e <UART_SetConfig+0x2e6>
 80065e0:	2304      	movs	r3, #4
 80065e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065e6:	e01a      	b.n	800661e <UART_SetConfig+0x2e6>
 80065e8:	2308      	movs	r3, #8
 80065ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ee:	e016      	b.n	800661e <UART_SetConfig+0x2e6>
 80065f0:	2310      	movs	r3, #16
 80065f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065f6:	e012      	b.n	800661e <UART_SetConfig+0x2e6>
 80065f8:	efff69f3 	.word	0xefff69f3
 80065fc:	40008000 	.word	0x40008000
 8006600:	40013800 	.word	0x40013800
 8006604:	40021000 	.word	0x40021000
 8006608:	40004400 	.word	0x40004400
 800660c:	40004800 	.word	0x40004800
 8006610:	40004c00 	.word	0x40004c00
 8006614:	40005000 	.word	0x40005000
 8006618:	2310      	movs	r3, #16
 800661a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a9f      	ldr	r2, [pc, #636]	@ (80068a0 <UART_SetConfig+0x568>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d17a      	bne.n	800671e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006628:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800662c:	2b08      	cmp	r3, #8
 800662e:	d824      	bhi.n	800667a <UART_SetConfig+0x342>
 8006630:	a201      	add	r2, pc, #4	@ (adr r2, 8006638 <UART_SetConfig+0x300>)
 8006632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006636:	bf00      	nop
 8006638:	0800665d 	.word	0x0800665d
 800663c:	0800667b 	.word	0x0800667b
 8006640:	08006665 	.word	0x08006665
 8006644:	0800667b 	.word	0x0800667b
 8006648:	0800666b 	.word	0x0800666b
 800664c:	0800667b 	.word	0x0800667b
 8006650:	0800667b 	.word	0x0800667b
 8006654:	0800667b 	.word	0x0800667b
 8006658:	08006673 	.word	0x08006673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800665c:	f7fe fcb0 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 8006660:	61f8      	str	r0, [r7, #28]
        break;
 8006662:	e010      	b.n	8006686 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006664:	4b8f      	ldr	r3, [pc, #572]	@ (80068a4 <UART_SetConfig+0x56c>)
 8006666:	61fb      	str	r3, [r7, #28]
        break;
 8006668:	e00d      	b.n	8006686 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800666a:	f7fe fc11 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 800666e:	61f8      	str	r0, [r7, #28]
        break;
 8006670:	e009      	b.n	8006686 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006672:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006676:	61fb      	str	r3, [r7, #28]
        break;
 8006678:	e005      	b.n	8006686 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800667a:	2300      	movs	r3, #0
 800667c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006684:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 80fb 	beq.w	8006884 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	4613      	mov	r3, r2
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	4413      	add	r3, r2
 8006698:	69fa      	ldr	r2, [r7, #28]
 800669a:	429a      	cmp	r2, r3
 800669c:	d305      	bcc.n	80066aa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066a4:	69fa      	ldr	r2, [r7, #28]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d903      	bls.n	80066b2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80066b0:	e0e8      	b.n	8006884 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	2200      	movs	r2, #0
 80066b6:	461c      	mov	r4, r3
 80066b8:	4615      	mov	r5, r2
 80066ba:	f04f 0200 	mov.w	r2, #0
 80066be:	f04f 0300 	mov.w	r3, #0
 80066c2:	022b      	lsls	r3, r5, #8
 80066c4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80066c8:	0222      	lsls	r2, r4, #8
 80066ca:	68f9      	ldr	r1, [r7, #12]
 80066cc:	6849      	ldr	r1, [r1, #4]
 80066ce:	0849      	lsrs	r1, r1, #1
 80066d0:	2000      	movs	r0, #0
 80066d2:	4688      	mov	r8, r1
 80066d4:	4681      	mov	r9, r0
 80066d6:	eb12 0a08 	adds.w	sl, r2, r8
 80066da:	eb43 0b09 	adc.w	fp, r3, r9
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	603b      	str	r3, [r7, #0]
 80066e6:	607a      	str	r2, [r7, #4]
 80066e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066ec:	4650      	mov	r0, sl
 80066ee:	4659      	mov	r1, fp
 80066f0:	f7fa f9b4 	bl	8000a5c <__aeabi_uldivmod>
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	4613      	mov	r3, r2
 80066fa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006702:	d308      	bcc.n	8006716 <UART_SetConfig+0x3de>
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800670a:	d204      	bcs.n	8006716 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	60da      	str	r2, [r3, #12]
 8006714:	e0b6      	b.n	8006884 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800671c:	e0b2      	b.n	8006884 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006726:	d15e      	bne.n	80067e6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006728:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800672c:	2b08      	cmp	r3, #8
 800672e:	d828      	bhi.n	8006782 <UART_SetConfig+0x44a>
 8006730:	a201      	add	r2, pc, #4	@ (adr r2, 8006738 <UART_SetConfig+0x400>)
 8006732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006736:	bf00      	nop
 8006738:	0800675d 	.word	0x0800675d
 800673c:	08006765 	.word	0x08006765
 8006740:	0800676d 	.word	0x0800676d
 8006744:	08006783 	.word	0x08006783
 8006748:	08006773 	.word	0x08006773
 800674c:	08006783 	.word	0x08006783
 8006750:	08006783 	.word	0x08006783
 8006754:	08006783 	.word	0x08006783
 8006758:	0800677b 	.word	0x0800677b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800675c:	f7fe fc30 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 8006760:	61f8      	str	r0, [r7, #28]
        break;
 8006762:	e014      	b.n	800678e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006764:	f7fe fc42 	bl	8004fec <HAL_RCC_GetPCLK2Freq>
 8006768:	61f8      	str	r0, [r7, #28]
        break;
 800676a:	e010      	b.n	800678e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800676c:	4b4d      	ldr	r3, [pc, #308]	@ (80068a4 <UART_SetConfig+0x56c>)
 800676e:	61fb      	str	r3, [r7, #28]
        break;
 8006770:	e00d      	b.n	800678e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006772:	f7fe fb8d 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 8006776:	61f8      	str	r0, [r7, #28]
        break;
 8006778:	e009      	b.n	800678e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800677a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800677e:	61fb      	str	r3, [r7, #28]
        break;
 8006780:	e005      	b.n	800678e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006782:	2300      	movs	r3, #0
 8006784:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800678c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d077      	beq.n	8006884 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	005a      	lsls	r2, r3, #1
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	085b      	lsrs	r3, r3, #1
 800679e:	441a      	add	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	2b0f      	cmp	r3, #15
 80067ae:	d916      	bls.n	80067de <UART_SetConfig+0x4a6>
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067b6:	d212      	bcs.n	80067de <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	f023 030f 	bic.w	r3, r3, #15
 80067c0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	085b      	lsrs	r3, r3, #1
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	f003 0307 	and.w	r3, r3, #7
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	8afb      	ldrh	r3, [r7, #22]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	8afa      	ldrh	r2, [r7, #22]
 80067da:	60da      	str	r2, [r3, #12]
 80067dc:	e052      	b.n	8006884 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80067e4:	e04e      	b.n	8006884 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80067ea:	2b08      	cmp	r3, #8
 80067ec:	d827      	bhi.n	800683e <UART_SetConfig+0x506>
 80067ee:	a201      	add	r2, pc, #4	@ (adr r2, 80067f4 <UART_SetConfig+0x4bc>)
 80067f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f4:	08006819 	.word	0x08006819
 80067f8:	08006821 	.word	0x08006821
 80067fc:	08006829 	.word	0x08006829
 8006800:	0800683f 	.word	0x0800683f
 8006804:	0800682f 	.word	0x0800682f
 8006808:	0800683f 	.word	0x0800683f
 800680c:	0800683f 	.word	0x0800683f
 8006810:	0800683f 	.word	0x0800683f
 8006814:	08006837 	.word	0x08006837
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006818:	f7fe fbd2 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 800681c:	61f8      	str	r0, [r7, #28]
        break;
 800681e:	e014      	b.n	800684a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006820:	f7fe fbe4 	bl	8004fec <HAL_RCC_GetPCLK2Freq>
 8006824:	61f8      	str	r0, [r7, #28]
        break;
 8006826:	e010      	b.n	800684a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006828:	4b1e      	ldr	r3, [pc, #120]	@ (80068a4 <UART_SetConfig+0x56c>)
 800682a:	61fb      	str	r3, [r7, #28]
        break;
 800682c:	e00d      	b.n	800684a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800682e:	f7fe fb2f 	bl	8004e90 <HAL_RCC_GetSysClockFreq>
 8006832:	61f8      	str	r0, [r7, #28]
        break;
 8006834:	e009      	b.n	800684a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006836:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800683a:	61fb      	str	r3, [r7, #28]
        break;
 800683c:	e005      	b.n	800684a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006848:	bf00      	nop
    }

    if (pclk != 0U)
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d019      	beq.n	8006884 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	085a      	lsrs	r2, r3, #1
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	441a      	add	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006862:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	2b0f      	cmp	r3, #15
 8006868:	d909      	bls.n	800687e <UART_SetConfig+0x546>
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006870:	d205      	bcs.n	800687e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	b29a      	uxth	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	60da      	str	r2, [r3, #12]
 800687c:	e002      	b.n	8006884 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006890:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006894:	4618      	mov	r0, r3
 8006896:	3728      	adds	r7, #40	@ 0x28
 8006898:	46bd      	mov	sp, r7
 800689a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800689e:	bf00      	nop
 80068a0:	40008000 	.word	0x40008000
 80068a4:	00f42400 	.word	0x00f42400

080068a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b4:	f003 0308 	and.w	r3, r3, #8
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00a      	beq.n	80068d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00a      	beq.n	80068f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	430a      	orrs	r2, r1
 80068f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f8:	f003 0302 	and.w	r3, r3, #2
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00a      	beq.n	8006916 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800691a:	f003 0304 	and.w	r3, r3, #4
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00a      	beq.n	8006938 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693c:	f003 0310 	and.w	r3, r3, #16
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00a      	beq.n	800695a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800695e:	f003 0320 	and.w	r3, r3, #32
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00a      	beq.n	800697c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	430a      	orrs	r2, r1
 800697a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006984:	2b00      	cmp	r3, #0
 8006986:	d01a      	beq.n	80069be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069a6:	d10a      	bne.n	80069be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00a      	beq.n	80069e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	430a      	orrs	r2, r1
 80069de:	605a      	str	r2, [r3, #4]
  }
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b098      	sub	sp, #96	@ 0x60
 80069f0:	af02      	add	r7, sp, #8
 80069f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069fc:	f7fb fcf0 	bl	80023e0 <HAL_GetTick>
 8006a00:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0308 	and.w	r3, r3, #8
 8006a0c:	2b08      	cmp	r3, #8
 8006a0e:	d12e      	bne.n	8006a6e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f88c 	bl	8006b3c <UART_WaitOnFlagUntilTimeout>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d021      	beq.n	8006a6e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a32:	e853 3f00 	ldrex	r3, [r3]
 8006a36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	461a      	mov	r2, r3
 8006a46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a48:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a4a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a50:	e841 2300 	strex	r3, r2, [r1]
 8006a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1e6      	bne.n	8006a2a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e062      	b.n	8006b34 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0304 	and.w	r3, r3, #4
 8006a78:	2b04      	cmp	r3, #4
 8006a7a:	d149      	bne.n	8006b10 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a80:	9300      	str	r3, [sp, #0]
 8006a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a84:	2200      	movs	r2, #0
 8006a86:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f856 	bl	8006b3c <UART_WaitOnFlagUntilTimeout>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d03c      	beq.n	8006b10 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9e:	e853 3f00 	ldrex	r3, [r3]
 8006aa2:	623b      	str	r3, [r7, #32]
   return(result);
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ab4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ab6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006aba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006abc:	e841 2300 	strex	r3, r2, [r1]
 8006ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e6      	bne.n	8006a96 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3308      	adds	r3, #8
 8006ace:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	e853 3f00 	ldrex	r3, [r3]
 8006ad6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 0301 	bic.w	r3, r3, #1
 8006ade:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3308      	adds	r3, #8
 8006ae6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ae8:	61fa      	str	r2, [r7, #28]
 8006aea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aec:	69b9      	ldr	r1, [r7, #24]
 8006aee:	69fa      	ldr	r2, [r7, #28]
 8006af0:	e841 2300 	strex	r3, r2, [r1]
 8006af4:	617b      	str	r3, [r7, #20]
   return(result);
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1e5      	bne.n	8006ac8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2220      	movs	r2, #32
 8006b00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e011      	b.n	8006b34 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2220      	movs	r2, #32
 8006b14:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3758      	adds	r7, #88	@ 0x58
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	603b      	str	r3, [r7, #0]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b4c:	e04f      	b.n	8006bee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b54:	d04b      	beq.n	8006bee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b56:	f7fb fc43 	bl	80023e0 <HAL_GetTick>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d302      	bcc.n	8006b6c <UART_WaitOnFlagUntilTimeout+0x30>
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e04e      	b.n	8006c0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0304 	and.w	r3, r3, #4
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d037      	beq.n	8006bee <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	2b80      	cmp	r3, #128	@ 0x80
 8006b82:	d034      	beq.n	8006bee <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	2b40      	cmp	r3, #64	@ 0x40
 8006b88:	d031      	beq.n	8006bee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	69db      	ldr	r3, [r3, #28]
 8006b90:	f003 0308 	and.w	r3, r3, #8
 8006b94:	2b08      	cmp	r3, #8
 8006b96:	d110      	bne.n	8006bba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2208      	movs	r2, #8
 8006b9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 f838 	bl	8006c16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2208      	movs	r2, #8
 8006baa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e029      	b.n	8006c0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bc8:	d111      	bne.n	8006bee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006bd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f000 f81e 	bl	8006c16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2220      	movs	r2, #32
 8006bde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e00f      	b.n	8006c0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	69da      	ldr	r2, [r3, #28]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	bf0c      	ite	eq
 8006bfe:	2301      	moveq	r3, #1
 8006c00:	2300      	movne	r3, #0
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	461a      	mov	r2, r3
 8006c06:	79fb      	ldrb	r3, [r7, #7]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d0a0      	beq.n	8006b4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c16:	b480      	push	{r7}
 8006c18:	b095      	sub	sp, #84	@ 0x54
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c26:	e853 3f00 	ldrex	r3, [r3]
 8006c2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c3e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c44:	e841 2300 	strex	r3, r2, [r1]
 8006c48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1e6      	bne.n	8006c1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3308      	adds	r3, #8
 8006c56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c58:	6a3b      	ldr	r3, [r7, #32]
 8006c5a:	e853 3f00 	ldrex	r3, [r3]
 8006c5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	f023 0301 	bic.w	r3, r3, #1
 8006c66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3308      	adds	r3, #8
 8006c6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c78:	e841 2300 	strex	r3, r2, [r1]
 8006c7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e5      	bne.n	8006c50 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d118      	bne.n	8006cbe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	e853 3f00 	ldrex	r3, [r3]
 8006c98:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	f023 0310 	bic.w	r3, r3, #16
 8006ca0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006caa:	61bb      	str	r3, [r7, #24]
 8006cac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cae:	6979      	ldr	r1, [r7, #20]
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	e841 2300 	strex	r3, r2, [r1]
 8006cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1e6      	bne.n	8006c8c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006cd2:	bf00      	nop
 8006cd4:	3754      	adds	r7, #84	@ 0x54
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b083      	sub	sp, #12
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
 8006ce6:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	881b      	ldrh	r3, [r3, #0]
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	7992      	ldrb	r2, [r2, #6]
 8006cf0:	08d2      	lsrs	r2, r2, #3
 8006cf2:	b2d2      	uxtb	r2, r2
 8006cf4:	fb13 f302 	smulbb	r3, r3, r2
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	889b      	ldrh	r3, [r3, #4]
 8006d02:	461a      	mov	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	885b      	ldrh	r3, [r3, #2]
 8006d08:	fb02 f303 	mul.w	r3, r2, r3
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	683a      	ldr	r2, [r7, #0]
 8006d16:	60da      	str	r2, [r3, #12]
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 8006d24:	b490      	push	{r4, r7}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	4608      	mov	r0, r1
 8006d2e:	1d39      	adds	r1, r7, #4
 8006d30:	e881 000c 	stmia.w	r1, {r2, r3}
 8006d34:	4623      	mov	r3, r4
 8006d36:	81fb      	strh	r3, [r7, #14]
 8006d38:	4603      	mov	r3, r0
 8006d3a:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 8006d40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006d44:	88ba      	ldrh	r2, [r7, #4]
 8006d46:	4293      	cmp	r3, r2
 8006d48:	da04      	bge.n	8006d54 <code+0x30>
        code |= LEFT;
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	7dfb      	ldrb	r3, [r7, #23]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	75fb      	strb	r3, [r7, #23]
 8006d52:	e008      	b.n	8006d66 <code+0x42>
    } else if (x0 > window.x1) {
 8006d54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006d58:	893a      	ldrh	r2, [r7, #8]
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	dd03      	ble.n	8006d66 <code+0x42>
        code |= RIGHT;
 8006d5e:	2202      	movs	r2, #2
 8006d60:	7dfb      	ldrb	r3, [r7, #23]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8006d66:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006d6a:	88fa      	ldrh	r2, [r7, #6]
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	da04      	bge.n	8006d7a <code+0x56>
        code |= BOTTOM;
 8006d70:	2204      	movs	r2, #4
 8006d72:	7dfb      	ldrb	r3, [r7, #23]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	75fb      	strb	r3, [r7, #23]
 8006d78:	e008      	b.n	8006d8c <code+0x68>
    } else if (y0 > window.y1) {
 8006d7a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006d7e:	897a      	ldrh	r2, [r7, #10]
 8006d80:	4293      	cmp	r3, r2
 8006d82:	dd03      	ble.n	8006d8c <code+0x68>
        code |= TOP;
 8006d84:	2208      	movs	r2, #8
 8006d86:	7dfb      	ldrb	r3, [r7, #23]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8006d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bc90      	pop	{r4, r7}
 8006d96:	4770      	bx	lr

08006d98 <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b088      	sub	sp, #32
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]
 8006da4:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006db2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006db6:	cb0c      	ldmia	r3, {r2, r3}
 8006db8:	f7ff ffb4 	bl	8006d24 <code>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006dcc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006dd0:	cb0c      	ldmia	r3, {r2, r3}
 8006dd2:	f7ff ffa7 	bl	8006d24 <code>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8006dde:	7ffa      	ldrb	r2, [r7, #31]
 8006de0:	7fbb      	ldrb	r3, [r7, #30]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d102      	bne.n	8006df0 <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8006dea:	2301      	movs	r3, #1
 8006dec:	777b      	strb	r3, [r7, #29]
            break;
 8006dee:	e0e9      	b.n	8006fc4 <clip_line+0x22c>
        } else if (code0 & code1) {
 8006df0:	7ffa      	ldrb	r2, [r7, #31]
 8006df2:	7fbb      	ldrb	r3, [r7, #30]
 8006df4:	4013      	ands	r3, r2
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f040 80e2 	bne.w	8006fc2 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8006e02:	2300      	movs	r3, #0
 8006e04:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8006e06:	7ffb      	ldrb	r3, [r7, #31]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <clip_line+0x78>
 8006e0c:	7ffb      	ldrb	r3, [r7, #31]
 8006e0e:	e000      	b.n	8006e12 <clip_line+0x7a>
 8006e10:	7fbb      	ldrb	r3, [r7, #30]
 8006e12:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8006e14:	2208      	movs	r2, #8
 8006e16:	7dfb      	ldrb	r3, [r7, #23]
 8006e18:	4013      	ands	r3, r2
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d024      	beq.n	8006e6a <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e2e:	4619      	mov	r1, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e36:	1acb      	subs	r3, r1, r3
 8006e38:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8006e3a:	4608      	mov	r0, r1
 8006e3c:	68b9      	ldr	r1, [r7, #8]
 8006e3e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006e42:	1a41      	subs	r1, r0, r1
 8006e44:	fb03 f101 	mul.w	r1, r3, r1
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e4e:	4618      	mov	r0, r3
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e56:	1ac3      	subs	r3, r0, r3
 8006e58:	fb91 f3f3 	sdiv	r3, r1, r3
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	4413      	add	r3, r2
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8006e64:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006e66:	833b      	strh	r3, [r7, #24]
 8006e68:	e07f      	b.n	8006f6a <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8006e6a:	2204      	movs	r2, #4
 8006e6c:	7dfb      	ldrb	r3, [r7, #23]
 8006e6e:	4013      	ands	r3, r2
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d024      	beq.n	8006ec0 <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e84:	4619      	mov	r1, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e8c:	1acb      	subs	r3, r1, r3
 8006e8e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006e90:	4608      	mov	r0, r1
 8006e92:	68b9      	ldr	r1, [r7, #8]
 8006e94:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006e98:	1a41      	subs	r1, r0, r1
 8006e9a:	fb03 f101 	mul.w	r1, r3, r1
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006eac:	1ac3      	subs	r3, r0, r3
 8006eae:	fb91 f3f3 	sdiv	r3, r1, r3
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	4413      	add	r3, r2
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8006eba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006ebc:	833b      	strh	r3, [r7, #24]
 8006ebe:	e054      	b.n	8006f6a <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	7dfb      	ldrb	r3, [r7, #23]
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d024      	beq.n	8006f16 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006eda:	4619      	mov	r1, r3
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ee2:	1acb      	subs	r3, r1, r3
 8006ee4:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8006ee6:	4608      	mov	r0, r1
 8006ee8:	68f9      	ldr	r1, [r7, #12]
 8006eea:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006eee:	1a41      	subs	r1, r0, r1
 8006ef0:	fb03 f101 	mul.w	r1, r3, r1
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006efa:	4618      	mov	r0, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f02:	1ac3      	subs	r3, r0, r3
 8006f04:	fb91 f3f3 	sdiv	r3, r1, r3
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	4413      	add	r3, r2
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8006f10:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006f12:	837b      	strh	r3, [r7, #26]
 8006f14:	e029      	b.n	8006f6a <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8006f16:	2201      	movs	r2, #1
 8006f18:	7dfb      	ldrb	r3, [r7, #23]
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d023      	beq.n	8006f6a <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f30:	4619      	mov	r1, r3
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f38:	1acb      	subs	r3, r1, r3
 8006f3a:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8006f3c:	4608      	mov	r0, r1
 8006f3e:	68f9      	ldr	r1, [r7, #12]
 8006f40:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006f44:	1a41      	subs	r1, r0, r1
 8006f46:	fb03 f101 	mul.w	r1, r3, r1
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f50:	4618      	mov	r0, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f58:	1ac3      	subs	r3, r0, r3
 8006f5a:	fb91 f3f3 	sdiv	r3, r1, r3
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	4413      	add	r3, r2
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8006f66:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006f68:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8006f6a:	7dfa      	ldrb	r2, [r7, #23]
 8006f6c:	7ffb      	ldrb	r3, [r7, #31]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d113      	bne.n	8006f9a <clip_line+0x202>
                *x0 = x;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8b7a      	ldrh	r2, [r7, #26]
 8006f76:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	8b3a      	ldrh	r2, [r7, #24]
 8006f7c:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006f8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006f8e:	cb0c      	ldmia	r3, {r2, r3}
 8006f90:	f7ff fec8 	bl	8006d24 <code>
 8006f94:	4603      	mov	r3, r0
 8006f96:	77fb      	strb	r3, [r7, #31]
 8006f98:	e721      	b.n	8006dde <clip_line+0x46>
            } else {
                *x1 = x;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	8b7a      	ldrh	r2, [r7, #26]
 8006f9e:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	8b3a      	ldrh	r2, [r7, #24]
 8006fa4:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006fb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006fb6:	cb0c      	ldmia	r3, {r2, r3}
 8006fb8:	f7ff feb4 	bl	8006d24 <code>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8006fc0:	e70d      	b.n	8006dde <clip_line+0x46>
            break;
 8006fc2:	bf00      	nop
            }
        }
    }

    return accept;
 8006fc4:	7f7b      	ldrb	r3, [r7, #29]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3720      	adds	r7, #32
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b082      	sub	sp, #8
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	3306      	adds	r3, #6
 8006fde:	2208      	movs	r2, #8
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	f001 f972 	bl	80082ca <memcpy>
    meta->width = font[FONTX_WIDTH];
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	330e      	adds	r3, #14
 8006fea:	781a      	ldrb	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	330f      	adds	r3, #15
 8006ff4:	781a      	ldrb	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	3310      	adds	r3, #16
 8006ffe:	781a      	ldrb	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	72da      	strb	r2, [r3, #11]

    return 0;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 800700e:	b580      	push	{r7, lr}
 8007010:	b08e      	sub	sp, #56	@ 0x38
 8007012:	af00      	add	r7, sp, #0
 8007014:	60f8      	str	r0, [r7, #12]
 8007016:	60b9      	str	r1, [r7, #8]
 8007018:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 800701a:	f107 0314 	add.w	r3, r7, #20
 800701e:	6879      	ldr	r1, [r7, #4]
 8007020:	4618      	mov	r0, r3
 8007022:	f7ff ffd4 	bl	8006fce <fontx_meta>
 8007026:	4603      	mov	r3, r0
 8007028:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (0 != status) {
 800702c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007030:	2b00      	cmp	r3, #0
 8007032:	d002      	beq.n	800703a <fontx_glyph+0x2c>
        return status;
 8007034:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007038:	e077      	b.n	800712a <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 800703a:	7f7a      	ldrb	r2, [r7, #29]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 8007040:	7fba      	ldrb	r2, [r7, #30]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8007046:	7f7b      	ldrb	r3, [r7, #29]
 8007048:	3307      	adds	r3, #7
 800704a:	2b00      	cmp	r3, #0
 800704c:	da00      	bge.n	8007050 <fontx_glyph+0x42>
 800704e:	3307      	adds	r3, #7
 8007050:	10db      	asrs	r3, r3, #3
 8007052:	b2da      	uxtb	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	78da      	ldrb	r2, [r3, #3]
 800705c:	7fbb      	ldrb	r3, [r7, #30]
 800705e:	fb12 f303 	smulbb	r3, r2, r3
 8007062:	b2da      	uxtb	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 8007068:	7ffb      	ldrb	r3, [r7, #31]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10f      	bne.n	800708e <fontx_glyph+0x80>
        if (code < 0x100) {
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2bff      	cmp	r3, #255	@ 0xff
 8007072:	d859      	bhi.n	8007128 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	789b      	ldrb	r3, [r3, #2]
 8007078:	461a      	mov	r2, r3
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	fb02 f303 	mul.w	r3, r2, r3
 8007080:	3311      	adds	r3, #17
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	441a      	add	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 800708a:	2300      	movs	r3, #0
 800708c:	e04d      	b.n	800712a <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	3312      	adds	r3, #18
 8007092:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nc = 0;
 8007094:	2300      	movs	r3, #0
 8007096:	637b      	str	r3, [r7, #52]	@ 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	3311      	adds	r3, #17
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	633b      	str	r3, [r7, #48]	@ 0x30
        while (bc--) {
 80070a0:	e03d      	b.n	800711e <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 80070a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	461a      	mov	r2, r3
 80070a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070aa:	3301      	adds	r3, #1
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	021b      	lsls	r3, r3, #8
 80070b0:	4413      	add	r3, r2
 80070b2:	627b      	str	r3, [r7, #36]	@ 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 80070b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b6:	3302      	adds	r3, #2
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070be:	3303      	adds	r3, #3
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	021b      	lsls	r3, r3, #8
 80070c4:	4413      	add	r3, r2
 80070c6:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d31c      	bcc.n	800710a <fontx_glyph+0xfc>
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d818      	bhi.n	800710a <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070e0:	4413      	add	r3, r2
 80070e2:	637b      	str	r3, [r7, #52]	@ 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	3311      	adds	r3, #17
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	461a      	mov	r2, r3
                    nc * glyph->size
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	789b      	ldrb	r3, [r3, #2]
 80070f2:	4619      	mov	r1, r3
 80070f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070f6:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 80070fa:	4413      	add	r3, r2
 80070fc:	3312      	adds	r3, #18
                glyph->buffer = &font[
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	441a      	add	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	e00f      	b.n	800712a <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 800710a:	6a3a      	ldr	r2, [r7, #32]
 800710c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710e:	1ad2      	subs	r2, r2, r3
 8007110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007112:	4413      	add	r3, r2
 8007114:	3301      	adds	r3, #1
 8007116:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Next code block_table. */
            block_table += 4;
 8007118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800711a:	3304      	adds	r3, #4
 800711c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (bc--) {
 800711e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007120:	1e5a      	subs	r2, r3, #1
 8007122:	633a      	str	r2, [r7, #48]	@ 0x30
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1bc      	bne.n	80070a2 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8007128:	2301      	movs	r3, #1
 800712a:	4618      	mov	r0, r3
 800712c:	3738      	adds	r7, #56	@ 0x38
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8007132:	b480      	push	{r7}
 8007134:	b083      	sub	sp, #12
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
 800713a:	6039      	str	r1, [r7, #0]
    if (a > b) {
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	429a      	cmp	r2, r3
 8007142:	dd01      	ble.n	8007148 <min+0x16>
        return b;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	e000      	b.n	800714a <min+0x18>
    };
    return a;
 8007148:	687b      	ldr	r3, [r7, #4]
}
 800714a:	4618      	mov	r0, r3
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <max>:

static inline int max(int a, int b) {
 8007156:	b480      	push	{r7}
 8007158:	b083      	sub	sp, #12
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	429a      	cmp	r2, r3
 8007166:	dd01      	ble.n	800716c <max+0x16>
        return a;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	e000      	b.n	800716e <max+0x18>
    }
    return b;
 800716c:	683b      	ldr	r3, [r7, #0]
}
 800716e:	4618      	mov	r0, r3
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
	...

0800717c <hagl_set_clip_window>:
    .y0 = 0,
    .x1 = DISPLAY_WIDTH - 1,
    .y1 = DISPLAY_HEIGHT - 1,
};

void hagl_set_clip_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 800717c:	b490      	push	{r4, r7}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	4604      	mov	r4, r0
 8007184:	4608      	mov	r0, r1
 8007186:	4611      	mov	r1, r2
 8007188:	461a      	mov	r2, r3
 800718a:	4623      	mov	r3, r4
 800718c:	80fb      	strh	r3, [r7, #6]
 800718e:	4603      	mov	r3, r0
 8007190:	80bb      	strh	r3, [r7, #4]
 8007192:	460b      	mov	r3, r1
 8007194:	807b      	strh	r3, [r7, #2]
 8007196:	4613      	mov	r3, r2
 8007198:	803b      	strh	r3, [r7, #0]
    clip_window.x0 = x0;
 800719a:	4a08      	ldr	r2, [pc, #32]	@ (80071bc <hagl_set_clip_window+0x40>)
 800719c:	88fb      	ldrh	r3, [r7, #6]
 800719e:	8013      	strh	r3, [r2, #0]
    clip_window.y0 = y0;
 80071a0:	4a06      	ldr	r2, [pc, #24]	@ (80071bc <hagl_set_clip_window+0x40>)
 80071a2:	88bb      	ldrh	r3, [r7, #4]
 80071a4:	8053      	strh	r3, [r2, #2]
    clip_window.x1 = x1;
 80071a6:	4a05      	ldr	r2, [pc, #20]	@ (80071bc <hagl_set_clip_window+0x40>)
 80071a8:	887b      	ldrh	r3, [r7, #2]
 80071aa:	8093      	strh	r3, [r2, #4]
    clip_window.y1 = y1;
 80071ac:	4a03      	ldr	r2, [pc, #12]	@ (80071bc <hagl_set_clip_window+0x40>)
 80071ae:	883b      	ldrh	r3, [r7, #0]
 80071b0:	80d3      	strh	r3, [r2, #6]
}
 80071b2:	bf00      	nop
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bc90      	pop	{r4, r7}
 80071ba:	4770      	bx	lr
 80071bc:	20000024 	.word	0x20000024

080071c0 <hagl_put_pixel>:

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	4603      	mov	r3, r0
 80071c8:	80fb      	strh	r3, [r7, #6]
 80071ca:	460b      	mov	r3, r1
 80071cc:	80bb      	strh	r3, [r7, #4]
 80071ce:	4613      	mov	r3, r2
 80071d0:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 80071d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071d6:	4a12      	ldr	r2, [pc, #72]	@ (8007220 <hagl_put_pixel+0x60>)
 80071d8:	8812      	ldrh	r2, [r2, #0]
 80071da:	4293      	cmp	r3, r2
 80071dc:	db1a      	blt.n	8007214 <hagl_put_pixel+0x54>
 80071de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80071e2:	4a0f      	ldr	r2, [pc, #60]	@ (8007220 <hagl_put_pixel+0x60>)
 80071e4:	8852      	ldrh	r2, [r2, #2]
 80071e6:	4293      	cmp	r3, r2
 80071e8:	db14      	blt.n	8007214 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80071ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071ee:	4a0c      	ldr	r2, [pc, #48]	@ (8007220 <hagl_put_pixel+0x60>)
 80071f0:	8892      	ldrh	r2, [r2, #4]
 80071f2:	4293      	cmp	r3, r2
 80071f4:	dc10      	bgt.n	8007218 <hagl_put_pixel+0x58>
 80071f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80071fa:	4a09      	ldr	r2, [pc, #36]	@ (8007220 <hagl_put_pixel+0x60>)
 80071fc:	88d2      	ldrh	r2, [r2, #6]
 80071fe:	4293      	cmp	r3, r2
 8007200:	dc0a      	bgt.n	8007218 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8007202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007206:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800720a:	887a      	ldrh	r2, [r7, #2]
 800720c:	4618      	mov	r0, r3
 800720e:	f7fa f83d 	bl	800128c <lcd_put_pixel>
 8007212:	e002      	b.n	800721a <hagl_put_pixel+0x5a>
        return;
 8007214:	bf00      	nop
 8007216:	e000      	b.n	800721a <hagl_put_pixel+0x5a>
        return;
 8007218:	bf00      	nop
}
 800721a:	3708      	adds	r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	20000024 	.word	0x20000024

08007224 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8007224:	b590      	push	{r4, r7, lr}
 8007226:	b085      	sub	sp, #20
 8007228:	af02      	add	r7, sp, #8
 800722a:	4604      	mov	r4, r0
 800722c:	4608      	mov	r0, r1
 800722e:	4611      	mov	r1, r2
 8007230:	461a      	mov	r2, r3
 8007232:	4623      	mov	r3, r4
 8007234:	80fb      	strh	r3, [r7, #6]
 8007236:	4603      	mov	r3, r0
 8007238:	80bb      	strh	r3, [r7, #4]
 800723a:	460b      	mov	r3, r1
 800723c:	807b      	strh	r3, [r7, #2]
 800723e:	4613      	mov	r3, r2
 8007240:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8007242:	88fa      	ldrh	r2, [r7, #6]
 8007244:	887b      	ldrh	r3, [r7, #2]
 8007246:	4413      	add	r3, r2
 8007248:	b29b      	uxth	r3, r3
 800724a:	b21a      	sxth	r2, r3
 800724c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8007250:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007254:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007258:	883b      	ldrh	r3, [r7, #0]
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	4623      	mov	r3, r4
 800725e:	f000 f827 	bl	80072b0 <hagl_draw_line>
#endif
}
 8007262:	bf00      	nop
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	bd90      	pop	{r4, r7, pc}

0800726a <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 800726a:	b590      	push	{r4, r7, lr}
 800726c:	b085      	sub	sp, #20
 800726e:	af02      	add	r7, sp, #8
 8007270:	4604      	mov	r4, r0
 8007272:	4608      	mov	r0, r1
 8007274:	4611      	mov	r1, r2
 8007276:	461a      	mov	r2, r3
 8007278:	4623      	mov	r3, r4
 800727a:	80fb      	strh	r3, [r7, #6]
 800727c:	4603      	mov	r3, r0
 800727e:	80bb      	strh	r3, [r7, #4]
 8007280:	460b      	mov	r3, r1
 8007282:	807b      	strh	r3, [r7, #2]
 8007284:	4613      	mov	r3, r2
 8007286:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 8007288:	88ba      	ldrh	r2, [r7, #4]
 800728a:	887b      	ldrh	r3, [r7, #2]
 800728c:	4413      	add	r3, r2
 800728e:	b29b      	uxth	r3, r3
 8007290:	b21c      	sxth	r4, r3
 8007292:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007296:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800729a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800729e:	883b      	ldrh	r3, [r7, #0]
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	4623      	mov	r3, r4
 80072a4:	f000 f804 	bl	80072b0 <hagl_draw_line>
#endif
}
 80072a8:	bf00      	nop
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd90      	pop	{r4, r7, pc}

080072b0 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 80072b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072b2:	b089      	sub	sp, #36	@ 0x24
 80072b4:	af02      	add	r7, sp, #8
 80072b6:	4604      	mov	r4, r0
 80072b8:	4608      	mov	r0, r1
 80072ba:	4611      	mov	r1, r2
 80072bc:	461a      	mov	r2, r3
 80072be:	4623      	mov	r3, r4
 80072c0:	80fb      	strh	r3, [r7, #6]
 80072c2:	4603      	mov	r3, r0
 80072c4:	80bb      	strh	r3, [r7, #4]
 80072c6:	460b      	mov	r3, r1
 80072c8:	807b      	strh	r3, [r7, #2]
 80072ca:	4613      	mov	r3, r2
 80072cc:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 80072ce:	463b      	mov	r3, r7
 80072d0:	1cba      	adds	r2, r7, #2
 80072d2:	1d3d      	adds	r5, r7, #4
 80072d4:	1dbc      	adds	r4, r7, #6
 80072d6:	494a      	ldr	r1, [pc, #296]	@ (8007400 <hagl_draw_line+0x150>)
 80072d8:	466e      	mov	r6, sp
 80072da:	c903      	ldmia	r1, {r0, r1}
 80072dc:	e886 0003 	stmia.w	r6, {r0, r1}
 80072e0:	4629      	mov	r1, r5
 80072e2:	4620      	mov	r0, r4
 80072e4:	f7ff fd58 	bl	8006d98 <clip_line>
 80072e8:	4603      	mov	r3, r0
 80072ea:	f083 0301 	eor.w	r3, r3, #1
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d17e      	bne.n	80073f2 <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 80072f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80072f8:	461a      	mov	r2, r3
 80072fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	2b00      	cmp	r3, #0
 8007302:	bfb8      	it	lt
 8007304:	425b      	neglt	r3, r3
 8007306:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8007308:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800730c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007310:	429a      	cmp	r2, r3
 8007312:	da01      	bge.n	8007318 <hagl_draw_line+0x68>
 8007314:	2301      	movs	r3, #1
 8007316:	e001      	b.n	800731c <hagl_draw_line+0x6c>
 8007318:	f04f 33ff 	mov.w	r3, #4294967295
 800731c:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 800731e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007322:	461a      	mov	r2, r3
 8007324:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	2b00      	cmp	r3, #0
 800732c:	bfb8      	it	lt
 800732e:	425b      	neglt	r3, r3
 8007330:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 8007332:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007336:	f9b7 3000 	ldrsh.w	r3, [r7]
 800733a:	429a      	cmp	r2, r3
 800733c:	da01      	bge.n	8007342 <hagl_draw_line+0x92>
 800733e:	2301      	movs	r3, #1
 8007340:	e001      	b.n	8007346 <hagl_draw_line+0x96>
 8007342:	f04f 33ff 	mov.w	r3, #4294967295
 8007346:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8007348:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800734c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007350:	429a      	cmp	r2, r3
 8007352:	dd06      	ble.n	8007362 <hagl_draw_line+0xb2>
 8007354:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007358:	0fda      	lsrs	r2, r3, #31
 800735a:	4413      	add	r3, r2
 800735c:	105b      	asrs	r3, r3, #1
 800735e:	b21b      	sxth	r3, r3
 8007360:	e006      	b.n	8007370 <hagl_draw_line+0xc0>
 8007362:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007366:	0fda      	lsrs	r2, r3, #31
 8007368:	4413      	add	r3, r2
 800736a:	105b      	asrs	r3, r3, #1
 800736c:	425b      	negs	r3, r3
 800736e:	b21b      	sxth	r3, r3
 8007370:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 8007372:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007376:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800737a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800737c:	4618      	mov	r0, r3
 800737e:	f7ff ff1f 	bl	80071c0 <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 8007382:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007386:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800738a:	429a      	cmp	r2, r3
 800738c:	d105      	bne.n	800739a <hagl_draw_line+0xea>
 800738e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007392:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007396:	429a      	cmp	r2, r3
 8007398:	d02d      	beq.n	80073f6 <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 800739a:	8afb      	ldrh	r3, [r7, #22]
 800739c:	005b      	lsls	r3, r3, #1
 800739e:	b29b      	uxth	r3, r3
 80073a0:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 80073a2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80073a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80073aa:	425b      	negs	r3, r3
 80073ac:	429a      	cmp	r2, r3
 80073ae:	dd0c      	ble.n	80073ca <hagl_draw_line+0x11a>
            err -= dy;
 80073b0:	8afa      	ldrh	r2, [r7, #22]
 80073b2:	8a3b      	ldrh	r3, [r7, #16]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 80073ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073be:	b29a      	uxth	r2, r3
 80073c0:	8a7b      	ldrh	r3, [r7, #18]
 80073c2:	4413      	add	r3, r2
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	b21b      	sxth	r3, r3
 80073c8:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 80073ca:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80073ce:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	dacd      	bge.n	8007372 <hagl_draw_line+0xc2>
            err += dx;
 80073d6:	8afa      	ldrh	r2, [r7, #22]
 80073d8:	8abb      	ldrh	r3, [r7, #20]
 80073da:	4413      	add	r3, r2
 80073dc:	b29b      	uxth	r3, r3
 80073de:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 80073e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	89fb      	ldrh	r3, [r7, #14]
 80073e8:	4413      	add	r3, r2
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	b21b      	sxth	r3, r3
 80073ee:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 80073f0:	e7bf      	b.n	8007372 <hagl_draw_line+0xc2>
        return;
 80073f2:	bf00      	nop
 80073f4:	e000      	b.n	80073f8 <hagl_draw_line+0x148>
            break;
 80073f6:	bf00      	nop
        }
    }
}
 80073f8:	371c      	adds	r7, #28
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073fe:	bf00      	nop
 8007400:	20000024 	.word	0x20000024

08007404 <hagl_draw_rectangle>:

/*
 * Draw a rectangle with given color.
 */
void hagl_draw_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8007404:	b590      	push	{r4, r7, lr}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	4604      	mov	r4, r0
 800740c:	4608      	mov	r0, r1
 800740e:	4611      	mov	r1, r2
 8007410:	461a      	mov	r2, r3
 8007412:	4623      	mov	r3, r4
 8007414:	80fb      	strh	r3, [r7, #6]
 8007416:	4603      	mov	r3, r0
 8007418:	80bb      	strh	r3, [r7, #4]
 800741a:	460b      	mov	r3, r1
 800741c:	807b      	strh	r3, [r7, #2]
 800741e:	4613      	mov	r3, r2
 8007420:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8007422:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007426:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800742a:	429a      	cmp	r2, r3
 800742c:	dd0e      	ble.n	800744c <hagl_draw_rectangle+0x48>
        x0 = x0 + x1;
 800742e:	88fa      	ldrh	r2, [r7, #6]
 8007430:	887b      	ldrh	r3, [r7, #2]
 8007432:	4413      	add	r3, r2
 8007434:	b29b      	uxth	r3, r3
 8007436:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8007438:	88fa      	ldrh	r2, [r7, #6]
 800743a:	887b      	ldrh	r3, [r7, #2]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	b29b      	uxth	r3, r3
 8007440:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8007442:	88fa      	ldrh	r2, [r7, #6]
 8007444:	887b      	ldrh	r3, [r7, #2]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	b29b      	uxth	r3, r3
 800744a:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 800744c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007450:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007454:	429a      	cmp	r2, r3
 8007456:	dd0e      	ble.n	8007476 <hagl_draw_rectangle+0x72>
        y0 = y0 + y1;
 8007458:	88ba      	ldrh	r2, [r7, #4]
 800745a:	883b      	ldrh	r3, [r7, #0]
 800745c:	4413      	add	r3, r2
 800745e:	b29b      	uxth	r3, r3
 8007460:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8007462:	88ba      	ldrh	r2, [r7, #4]
 8007464:	883b      	ldrh	r3, [r7, #0]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	b29b      	uxth	r3, r3
 800746a:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 800746c:	88ba      	ldrh	r2, [r7, #4]
 800746e:	883b      	ldrh	r3, [r7, #0]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	b29b      	uxth	r3, r3
 8007474:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8007476:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800747a:	4a24      	ldr	r2, [pc, #144]	@ (800750c <hagl_draw_rectangle+0x108>)
 800747c:	8812      	ldrh	r2, [r2, #0]
 800747e:	4293      	cmp	r3, r2
 8007480:	db3e      	blt.n	8007500 <hagl_draw_rectangle+0xfc>
 8007482:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007486:	4a21      	ldr	r2, [pc, #132]	@ (800750c <hagl_draw_rectangle+0x108>)
 8007488:	8852      	ldrh	r2, [r2, #2]
 800748a:	4293      	cmp	r3, r2
 800748c:	db38      	blt.n	8007500 <hagl_draw_rectangle+0xfc>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800748e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007492:	4a1e      	ldr	r2, [pc, #120]	@ (800750c <hagl_draw_rectangle+0x108>)
 8007494:	8892      	ldrh	r2, [r2, #4]
 8007496:	4293      	cmp	r3, r2
 8007498:	dc34      	bgt.n	8007504 <hagl_draw_rectangle+0x100>
 800749a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800749e:	4a1b      	ldr	r2, [pc, #108]	@ (800750c <hagl_draw_rectangle+0x108>)
 80074a0:	88d2      	ldrh	r2, [r2, #6]
 80074a2:	4293      	cmp	r3, r2
 80074a4:	dc2e      	bgt.n	8007504 <hagl_draw_rectangle+0x100>
        return;
    }

    uint16_t width = x1 - x0 + 1;
 80074a6:	887a      	ldrh	r2, [r7, #2]
 80074a8:	88fb      	ldrh	r3, [r7, #6]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	3301      	adds	r3, #1
 80074b0:	81fb      	strh	r3, [r7, #14]
    uint16_t height = y1 - y0 + 1;
 80074b2:	883a      	ldrh	r2, [r7, #0]
 80074b4:	88bb      	ldrh	r3, [r7, #4]
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	3301      	adds	r3, #1
 80074bc:	81bb      	strh	r3, [r7, #12]

    hagl_draw_hline(x0, y0, width, color);
 80074be:	8c3b      	ldrh	r3, [r7, #32]
 80074c0:	89fa      	ldrh	r2, [r7, #14]
 80074c2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80074c6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80074ca:	f7ff feab 	bl	8007224 <hagl_draw_hline>
    hagl_draw_hline(x0, y1, width, color);
 80074ce:	8c3b      	ldrh	r3, [r7, #32]
 80074d0:	89fa      	ldrh	r2, [r7, #14]
 80074d2:	f9b7 1000 	ldrsh.w	r1, [r7]
 80074d6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80074da:	f7ff fea3 	bl	8007224 <hagl_draw_hline>
    hagl_draw_vline(x0, y0, height, color);
 80074de:	8c3b      	ldrh	r3, [r7, #32]
 80074e0:	89ba      	ldrh	r2, [r7, #12]
 80074e2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80074e6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80074ea:	f7ff febe 	bl	800726a <hagl_draw_vline>
    hagl_draw_vline(x1, y0, height, color);
 80074ee:	8c3b      	ldrh	r3, [r7, #32]
 80074f0:	89ba      	ldrh	r2, [r7, #12]
 80074f2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80074f6:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80074fa:	f7ff feb6 	bl	800726a <hagl_draw_vline>
 80074fe:	e002      	b.n	8007506 <hagl_draw_rectangle+0x102>
        return;
 8007500:	bf00      	nop
 8007502:	e000      	b.n	8007506 <hagl_draw_rectangle+0x102>
        return;
 8007504:	bf00      	nop
}
 8007506:	3714      	adds	r7, #20
 8007508:	46bd      	mov	sp, r7
 800750a:	bd90      	pop	{r4, r7, pc}
 800750c:	20000024 	.word	0x20000024

08007510 <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8007510:	b590      	push	{r4, r7, lr}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	4604      	mov	r4, r0
 8007518:	4608      	mov	r0, r1
 800751a:	4611      	mov	r1, r2
 800751c:	461a      	mov	r2, r3
 800751e:	4623      	mov	r3, r4
 8007520:	80fb      	strh	r3, [r7, #6]
 8007522:	4603      	mov	r3, r0
 8007524:	80bb      	strh	r3, [r7, #4]
 8007526:	460b      	mov	r3, r1
 8007528:	807b      	strh	r3, [r7, #2]
 800752a:	4613      	mov	r3, r2
 800752c:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800752e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007532:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007536:	429a      	cmp	r2, r3
 8007538:	dd0e      	ble.n	8007558 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 800753a:	88fa      	ldrh	r2, [r7, #6]
 800753c:	887b      	ldrh	r3, [r7, #2]
 800753e:	4413      	add	r3, r2
 8007540:	b29b      	uxth	r3, r3
 8007542:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8007544:	88fa      	ldrh	r2, [r7, #6]
 8007546:	887b      	ldrh	r3, [r7, #2]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	b29b      	uxth	r3, r3
 800754c:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800754e:	88fa      	ldrh	r2, [r7, #6]
 8007550:	887b      	ldrh	r3, [r7, #2]
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	b29b      	uxth	r3, r3
 8007556:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8007558:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800755c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007560:	429a      	cmp	r2, r3
 8007562:	dd0e      	ble.n	8007582 <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 8007564:	88ba      	ldrh	r2, [r7, #4]
 8007566:	883b      	ldrh	r3, [r7, #0]
 8007568:	4413      	add	r3, r2
 800756a:	b29b      	uxth	r3, r3
 800756c:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800756e:	88ba      	ldrh	r2, [r7, #4]
 8007570:	883b      	ldrh	r3, [r7, #0]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	b29b      	uxth	r3, r3
 8007576:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8007578:	88ba      	ldrh	r2, [r7, #4]
 800757a:	883b      	ldrh	r3, [r7, #0]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	b29b      	uxth	r3, r3
 8007580:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8007582:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007586:	4a33      	ldr	r2, [pc, #204]	@ (8007654 <hagl_fill_rectangle+0x144>)
 8007588:	8812      	ldrh	r2, [r2, #0]
 800758a:	4293      	cmp	r3, r2
 800758c:	db5b      	blt.n	8007646 <hagl_fill_rectangle+0x136>
 800758e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007592:	4a30      	ldr	r2, [pc, #192]	@ (8007654 <hagl_fill_rectangle+0x144>)
 8007594:	8852      	ldrh	r2, [r2, #2]
 8007596:	4293      	cmp	r3, r2
 8007598:	db55      	blt.n	8007646 <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800759a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800759e:	4a2d      	ldr	r2, [pc, #180]	@ (8007654 <hagl_fill_rectangle+0x144>)
 80075a0:	8892      	ldrh	r2, [r2, #4]
 80075a2:	4293      	cmp	r3, r2
 80075a4:	dc51      	bgt.n	800764a <hagl_fill_rectangle+0x13a>
 80075a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80075aa:	4a2a      	ldr	r2, [pc, #168]	@ (8007654 <hagl_fill_rectangle+0x144>)
 80075ac:	88d2      	ldrh	r2, [r2, #6]
 80075ae:	4293      	cmp	r3, r2
 80075b0:	dc4b      	bgt.n	800764a <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 80075b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075b6:	4a27      	ldr	r2, [pc, #156]	@ (8007654 <hagl_fill_rectangle+0x144>)
 80075b8:	8812      	ldrh	r2, [r2, #0]
 80075ba:	4611      	mov	r1, r2
 80075bc:	4618      	mov	r0, r3
 80075be:	f7ff fdca 	bl	8007156 <max>
 80075c2:	4603      	mov	r3, r0
 80075c4:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 80075c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80075ca:	4a22      	ldr	r2, [pc, #136]	@ (8007654 <hagl_fill_rectangle+0x144>)
 80075cc:	8852      	ldrh	r2, [r2, #2]
 80075ce:	4611      	mov	r1, r2
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff fdc0 	bl	8007156 <max>
 80075d6:	4603      	mov	r3, r0
 80075d8:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 80075da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80075de:	4a1d      	ldr	r2, [pc, #116]	@ (8007654 <hagl_fill_rectangle+0x144>)
 80075e0:	8892      	ldrh	r2, [r2, #4]
 80075e2:	4611      	mov	r1, r2
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7ff fda4 	bl	8007132 <min>
 80075ea:	4603      	mov	r3, r0
 80075ec:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 80075ee:	f9b7 3000 	ldrsh.w	r3, [r7]
 80075f2:	4a18      	ldr	r2, [pc, #96]	@ (8007654 <hagl_fill_rectangle+0x144>)
 80075f4:	88d2      	ldrh	r2, [r2, #6]
 80075f6:	4611      	mov	r1, r2
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7ff fd9a 	bl	8007132 <min>
 80075fe:	4603      	mov	r3, r0
 8007600:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 8007602:	887a      	ldrh	r2, [r7, #2]
 8007604:	88fb      	ldrh	r3, [r7, #6]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	b29b      	uxth	r3, r3
 800760a:	3301      	adds	r3, #1
 800760c:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 800760e:	883a      	ldrh	r2, [r7, #0]
 8007610:	88bb      	ldrh	r3, [r7, #4]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	b29b      	uxth	r3, r3
 8007616:	3301      	adds	r3, #1
 8007618:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 800761a:	2300      	movs	r3, #0
 800761c:	81fb      	strh	r3, [r7, #14]
 800761e:	e00d      	b.n	800763c <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 8007620:	88ba      	ldrh	r2, [r7, #4]
 8007622:	89fb      	ldrh	r3, [r7, #14]
 8007624:	4413      	add	r3, r2
 8007626:	b29b      	uxth	r3, r3
 8007628:	b219      	sxth	r1, r3
 800762a:	8c3b      	ldrh	r3, [r7, #32]
 800762c:	89ba      	ldrh	r2, [r7, #12]
 800762e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007632:	f7ff fdf7 	bl	8007224 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 8007636:	89fb      	ldrh	r3, [r7, #14]
 8007638:	3301      	adds	r3, #1
 800763a:	81fb      	strh	r3, [r7, #14]
 800763c:	89fa      	ldrh	r2, [r7, #14]
 800763e:	897b      	ldrh	r3, [r7, #10]
 8007640:	429a      	cmp	r2, r3
 8007642:	d3ed      	bcc.n	8007620 <hagl_fill_rectangle+0x110>
 8007644:	e002      	b.n	800764c <hagl_fill_rectangle+0x13c>
        return;
 8007646:	bf00      	nop
 8007648:	e000      	b.n	800764c <hagl_fill_rectangle+0x13c>
        return;
 800764a:	bf00      	nop
#endif
    }
}
 800764c:	3714      	adds	r7, #20
 800764e:	46bd      	mov	sp, r7
 8007650:	bd90      	pop	{r4, r7, pc}
 8007652:	bf00      	nop
 8007654:	20000024 	.word	0x20000024

08007658 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8007658:	b590      	push	{r4, r7, lr}
 800765a:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8007666:	f844 0c24 	str.w	r0, [r4, #-36]
 800766a:	460c      	mov	r4, r1
 800766c:	4610      	mov	r0, r2
 800766e:	4619      	mov	r1, r3
 8007670:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007674:	4622      	mov	r2, r4
 8007676:	f823 2c26 	strh.w	r2, [r3, #-38]
 800767a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800767e:	4602      	mov	r2, r0
 8007680:	f823 2c28 	strh.w	r2, [r3, #-40]
 8007684:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007688:	460a      	mov	r2, r1
 800768a:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 800768e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007692:	4619      	mov	r1, r3
 8007694:	f107 0310 	add.w	r3, r7, #16
 8007698:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800769c:	6812      	ldr	r2, [r2, #0]
 800769e:	f851 1c24 	ldr.w	r1, [r1, #-36]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7ff fcb3 	bl	800700e <fontx_glyph>
 80076a8:	4603      	mov	r3, r0
 80076aa:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80076ae:	f102 0209 	add.w	r2, r2, #9
 80076b2:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 80076b4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80076b8:	f103 0309 	add.w	r3, r3, #9
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d001      	beq.n	80076c6 <hagl_put_char+0x6e>
        return 0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	e0c0      	b.n	8007848 <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 80076c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80076ca:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80076ce:	461a      	mov	r2, r3
 80076d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80076d4:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 80076d8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80076dc:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 80076e0:	461a      	mov	r2, r3
 80076e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80076e6:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 80076ea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80076ee:	2210      	movs	r2, #16
 80076f0:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 80076f4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80076f8:	3a08      	subs	r2, #8
 80076fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80076fe:	3b18      	subs	r3, #24
 8007700:	4611      	mov	r1, r2
 8007702:	4618      	mov	r0, r3
 8007704:	f7ff faeb 	bl	8006cde <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 8007708:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800770c:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8007710:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007714:	f102 020c 	add.w	r2, r2, #12
 8007718:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 800771a:	2300      	movs	r3, #0
 800771c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007720:	f102 020b 	add.w	r2, r2, #11
 8007724:	7013      	strb	r3, [r2, #0]
 8007726:	e071      	b.n	800780c <hagl_put_char+0x1b4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8007728:	2300      	movs	r3, #0
 800772a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800772e:	f102 020a 	add.w	r2, r2, #10
 8007732:	7013      	strb	r3, [r2, #0]
 8007734:	e047      	b.n	80077c6 <hagl_put_char+0x16e>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 8007736:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800773a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	b25a      	sxtb	r2, r3
 8007742:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007746:	f103 030a 	add.w	r3, r3, #10
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	f003 0307 	and.w	r3, r3, #7
 8007750:	2180      	movs	r1, #128	@ 0x80
 8007752:	fa41 f303 	asr.w	r3, r1, r3
 8007756:	b25b      	sxtb	r3, r3
 8007758:	4013      	ands	r3, r2
 800775a:	b25b      	sxtb	r3, r3
 800775c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007760:	f102 0208 	add.w	r2, r2, #8
 8007764:	7013      	strb	r3, [r2, #0]
            if (set) {
 8007766:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800776a:	f103 0308 	add.w	r3, r3, #8
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d010      	beq.n	8007796 <hagl_put_char+0x13e>
                *(ptr++) = color;
 8007774:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007778:	f103 030c 	add.w	r3, r3, #12
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	1c9a      	adds	r2, r3, #2
 8007780:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 8007784:	f101 010c 	add.w	r1, r1, #12
 8007788:	600a      	str	r2, [r1, #0]
 800778a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800778e:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 8007792:	801a      	strh	r2, [r3, #0]
 8007794:	e00c      	b.n	80077b0 <hagl_put_char+0x158>
            } else {
                *(ptr++) = 0x0000;
 8007796:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800779a:	f103 030c 	add.w	r3, r3, #12
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	1c9a      	adds	r2, r3, #2
 80077a2:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 80077a6:	f101 010c 	add.w	r1, r1, #12
 80077aa:	600a      	str	r2, [r1, #0]
 80077ac:	2200      	movs	r2, #0
 80077ae:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 80077b0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80077b4:	f103 030a 	add.w	r3, r3, #10
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	3301      	adds	r3, #1
 80077bc:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80077c0:	f102 020a 	add.w	r2, r2, #10
 80077c4:	7013      	strb	r3, [r2, #0]
 80077c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80077ca:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80077ce:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80077d2:	f102 020a 	add.w	r2, r2, #10
 80077d6:	7812      	ldrb	r2, [r2, #0]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d3ac      	bcc.n	8007736 <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 80077dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80077e0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80077e4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80077e8:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 80077ec:	4413      	add	r3, r2
 80077ee:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80077f2:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 80077f6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80077fa:	f103 030b 	add.w	r3, r3, #11
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	3301      	adds	r3, #1
 8007802:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007806:	f102 020b 	add.w	r2, r2, #11
 800780a:	7013      	strb	r3, [r2, #0]
 800780c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007810:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8007814:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007818:	f102 020b 	add.w	r2, r2, #11
 800781c:	7812      	ldrb	r2, [r2, #0]
 800781e:	429a      	cmp	r2, r3
 8007820:	d382      	bcc.n	8007728 <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 8007822:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007826:	3b18      	subs	r3, #24
 8007828:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800782c:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 8007830:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8007834:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 8007838:	461a      	mov	r2, r3
 800783a:	f000 f85a 	bl	80078f2 <hagl_blit>

    return bitmap.width;
 800783e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007842:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007846:	b2db      	uxtb	r3, r3
}
 8007848:	4618      	mov	r0, r3
 800784a:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 800784e:	3714      	adds	r7, #20
 8007850:	46bd      	mov	sp, r7
 8007852:	bd90      	pop	{r4, r7, pc}

08007854 <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b08c      	sub	sp, #48	@ 0x30
 8007858:	af02      	add	r7, sp, #8
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	4608      	mov	r0, r1
 800785e:	4611      	mov	r1, r2
 8007860:	461a      	mov	r2, r3
 8007862:	4603      	mov	r3, r0
 8007864:	817b      	strh	r3, [r7, #10]
 8007866:	460b      	mov	r3, r1
 8007868:	813b      	strh	r3, [r7, #8]
 800786a:	4613      	mov	r3, r2
 800786c:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 800786e:	897b      	ldrh	r3, [r7, #10]
 8007870:	84fb      	strh	r3, [r7, #38]	@ 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8007872:	f107 0314 	add.w	r3, r7, #20
 8007876:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007878:	4618      	mov	r0, r3
 800787a:	f7ff fba8 	bl	8006fce <fontx_meta>
 800787e:	4603      	mov	r3, r0
 8007880:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (0 != status) {
 8007884:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007888:	2b00      	cmp	r3, #0
 800788a:	d001      	beq.n	8007890 <hagl_put_text+0x3c>
        return 0;
 800788c:	2300      	movs	r3, #0
 800788e:	e02c      	b.n	80078ea <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	1d1a      	adds	r2, r3, #4
 8007894:	60fa      	str	r2, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 800789a:	6a3b      	ldr	r3, [r7, #32]
 800789c:	2b0d      	cmp	r3, #13
 800789e:	d002      	beq.n	80078a6 <hagl_put_text+0x52>
 80078a0:	6a3b      	ldr	r3, [r7, #32]
 80078a2:	2b0a      	cmp	r3, #10
 80078a4:	d108      	bne.n	80078b8 <hagl_put_text+0x64>
            x0 = 0;
 80078a6:	2300      	movs	r3, #0
 80078a8:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 80078aa:	7fbb      	ldrb	r3, [r7, #30]
 80078ac:	461a      	mov	r2, r3
 80078ae:	893b      	ldrh	r3, [r7, #8]
 80078b0:	4413      	add	r3, r2
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	813b      	strh	r3, [r7, #8]
 80078b6:	e010      	b.n	80078da <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 80078b8:	88f8      	ldrh	r0, [r7, #6]
 80078ba:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80078be:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80078c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	4603      	mov	r3, r0
 80078c8:	6a38      	ldr	r0, [r7, #32]
 80078ca:	f7ff fec5 	bl	8007658 <hagl_put_char>
 80078ce:	4603      	mov	r3, r0
 80078d0:	461a      	mov	r2, r3
 80078d2:	897b      	ldrh	r3, [r7, #10]
 80078d4:	4413      	add	r3, r2
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1d6      	bne.n	8007890 <hagl_put_text+0x3c>

    return x0 - original;
 80078e2:	897a      	ldrh	r2, [r7, #10]
 80078e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	b29b      	uxth	r3, r3
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3728      	adds	r7, #40	@ 0x28
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b086      	sub	sp, #24
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	4603      	mov	r3, r0
 80078fa:	603a      	str	r2, [r7, #0]
 80078fc:	80fb      	strh	r3, [r7, #6]
 80078fe:	460b      	mov	r3, r1
 8007900:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 8007908:	2300      	movs	r3, #0
 800790a:	827b      	strh	r3, [r7, #18]
 800790c:	e020      	b.n	8007950 <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 800790e:	2300      	movs	r3, #0
 8007910:	823b      	strh	r3, [r7, #16]
 8007912:	e015      	b.n	8007940 <hagl_blit+0x4e>
            color = *(ptr++);
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	1c9a      	adds	r2, r3, #2
 8007918:	617a      	str	r2, [r7, #20]
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 800791e:	88fa      	ldrh	r2, [r7, #6]
 8007920:	8a3b      	ldrh	r3, [r7, #16]
 8007922:	4413      	add	r3, r2
 8007924:	b29b      	uxth	r3, r3
 8007926:	b218      	sxth	r0, r3
 8007928:	88ba      	ldrh	r2, [r7, #4]
 800792a:	8a7b      	ldrh	r3, [r7, #18]
 800792c:	4413      	add	r3, r2
 800792e:	b29b      	uxth	r3, r3
 8007930:	b21b      	sxth	r3, r3
 8007932:	89fa      	ldrh	r2, [r7, #14]
 8007934:	4619      	mov	r1, r3
 8007936:	f7ff fc43 	bl	80071c0 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 800793a:	8a3b      	ldrh	r3, [r7, #16]
 800793c:	3301      	adds	r3, #1
 800793e:	823b      	strh	r3, [r7, #16]
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	881b      	ldrh	r3, [r3, #0]
 8007944:	8a3a      	ldrh	r2, [r7, #16]
 8007946:	429a      	cmp	r2, r3
 8007948:	d3e4      	bcc.n	8007914 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 800794a:	8a7b      	ldrh	r3, [r7, #18]
 800794c:	3301      	adds	r3, #1
 800794e:	827b      	strh	r3, [r7, #18]
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	885b      	ldrh	r3, [r3, #2]
 8007954:	8a7a      	ldrh	r2, [r7, #18]
 8007956:	429a      	cmp	r2, r3
 8007958:	d3d9      	bcc.n	800790e <hagl_blit+0x1c>
        }
    }
#endif
};
 800795a:	bf00      	nop
 800795c:	bf00      	nop
 800795e:	3718      	adds	r7, #24
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <hagl_clear_clip_window>:
    hagl_fill_rectangle(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1, 0x00);
    hagl_set_clip_window(x0, y0, x1, y1);
#endif
}

void hagl_clear_clip_window() {
 8007964:	b590      	push	{r4, r7, lr}
 8007966:	b083      	sub	sp, #12
 8007968:	af02      	add	r7, sp, #8
    hagl_fill_rectangle(
        clip_window.x0, clip_window.y0, clip_window.x1, clip_window.y1,
 800796a:	4b0a      	ldr	r3, [pc, #40]	@ (8007994 <hagl_clear_clip_window+0x30>)
 800796c:	881b      	ldrh	r3, [r3, #0]
    hagl_fill_rectangle(
 800796e:	b218      	sxth	r0, r3
        clip_window.x0, clip_window.y0, clip_window.x1, clip_window.y1,
 8007970:	4b08      	ldr	r3, [pc, #32]	@ (8007994 <hagl_clear_clip_window+0x30>)
 8007972:	885b      	ldrh	r3, [r3, #2]
    hagl_fill_rectangle(
 8007974:	b219      	sxth	r1, r3
        clip_window.x0, clip_window.y0, clip_window.x1, clip_window.y1,
 8007976:	4b07      	ldr	r3, [pc, #28]	@ (8007994 <hagl_clear_clip_window+0x30>)
 8007978:	889b      	ldrh	r3, [r3, #4]
    hagl_fill_rectangle(
 800797a:	b21a      	sxth	r2, r3
        clip_window.x0, clip_window.y0, clip_window.x1, clip_window.y1,
 800797c:	4b05      	ldr	r3, [pc, #20]	@ (8007994 <hagl_clear_clip_window+0x30>)
 800797e:	88db      	ldrh	r3, [r3, #6]
    hagl_fill_rectangle(
 8007980:	b21b      	sxth	r3, r3
 8007982:	2400      	movs	r4, #0
 8007984:	9400      	str	r4, [sp, #0]
 8007986:	f7ff fdc3 	bl	8007510 <hagl_fill_rectangle>
        0x00
    );
}
 800798a:	bf00      	nop
 800798c:	3704      	adds	r7, #4
 800798e:	46bd      	mov	sp, r7
 8007990:	bd90      	pop	{r4, r7, pc}
 8007992:	bf00      	nop
 8007994:	20000024 	.word	0x20000024

08007998 <hagl_fill_circle>:
        hagl_put_pixel(xc + y, yc - x, color);
        hagl_put_pixel(xc - y, yc - x, color);
    }
}

void hagl_fill_circle(int16_t x0, int16_t y0, int16_t r, color_t color) {
 8007998:	b590      	push	{r4, r7, lr}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	4604      	mov	r4, r0
 80079a0:	4608      	mov	r0, r1
 80079a2:	4611      	mov	r1, r2
 80079a4:	461a      	mov	r2, r3
 80079a6:	4623      	mov	r3, r4
 80079a8:	80fb      	strh	r3, [r7, #6]
 80079aa:	4603      	mov	r3, r0
 80079ac:	80bb      	strh	r3, [r7, #4]
 80079ae:	460b      	mov	r3, r1
 80079b0:	807b      	strh	r3, [r7, #2]
 80079b2:	4613      	mov	r3, r2
 80079b4:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 80079b6:	2300      	movs	r3, #0
 80079b8:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 80079ba:	887b      	ldrh	r3, [r7, #2]
 80079bc:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 80079be:	887b      	ldrh	r3, [r7, #2]
 80079c0:	005b      	lsls	r3, r3, #1
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	f1c3 0303 	rsb	r3, r3, #3
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	817b      	strh	r3, [r7, #10]

    while (y >= x) {
 80079cc:	e067      	b.n	8007a9e <hagl_fill_circle+0x106>
        hagl_draw_hline(x0 - x, y0 + y, x * 2, color);
 80079ce:	88fa      	ldrh	r2, [r7, #6]
 80079d0:	89fb      	ldrh	r3, [r7, #14]
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	b218      	sxth	r0, r3
 80079d8:	88ba      	ldrh	r2, [r7, #4]
 80079da:	89bb      	ldrh	r3, [r7, #12]
 80079dc:	4413      	add	r3, r2
 80079de:	b29b      	uxth	r3, r3
 80079e0:	b219      	sxth	r1, r3
 80079e2:	89fb      	ldrh	r3, [r7, #14]
 80079e4:	005b      	lsls	r3, r3, #1
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	883b      	ldrh	r3, [r7, #0]
 80079ea:	f7ff fc1b 	bl	8007224 <hagl_draw_hline>
        hagl_draw_hline(x0 - x, y0 - y, x * 2, color);
 80079ee:	88fa      	ldrh	r2, [r7, #6]
 80079f0:	89fb      	ldrh	r3, [r7, #14]
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	b218      	sxth	r0, r3
 80079f8:	88ba      	ldrh	r2, [r7, #4]
 80079fa:	89bb      	ldrh	r3, [r7, #12]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	b219      	sxth	r1, r3
 8007a02:	89fb      	ldrh	r3, [r7, #14]
 8007a04:	005b      	lsls	r3, r3, #1
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	883b      	ldrh	r3, [r7, #0]
 8007a0a:	f7ff fc0b 	bl	8007224 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 + x, y * 2, color);
 8007a0e:	88fa      	ldrh	r2, [r7, #6]
 8007a10:	89bb      	ldrh	r3, [r7, #12]
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	b218      	sxth	r0, r3
 8007a18:	88ba      	ldrh	r2, [r7, #4]
 8007a1a:	89fb      	ldrh	r3, [r7, #14]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	b219      	sxth	r1, r3
 8007a22:	89bb      	ldrh	r3, [r7, #12]
 8007a24:	005b      	lsls	r3, r3, #1
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	883b      	ldrh	r3, [r7, #0]
 8007a2a:	f7ff fbfb 	bl	8007224 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 - x, y * 2, color);
 8007a2e:	88fa      	ldrh	r2, [r7, #6]
 8007a30:	89bb      	ldrh	r3, [r7, #12]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	b218      	sxth	r0, r3
 8007a38:	88ba      	ldrh	r2, [r7, #4]
 8007a3a:	89fb      	ldrh	r3, [r7, #14]
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	b219      	sxth	r1, r3
 8007a42:	89bb      	ldrh	r3, [r7, #12]
 8007a44:	005b      	lsls	r3, r3, #1
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	883b      	ldrh	r3, [r7, #0]
 8007a4a:	f7ff fbeb 	bl	8007224 <hagl_draw_hline>
        x++;
 8007a4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	3301      	adds	r3, #1
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 8007a5a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	dd14      	ble.n	8007a8c <hagl_fill_circle+0xf4>
            y--;
 8007a62:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 8007a6e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007a72:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	897b      	ldrh	r3, [r7, #10]
 8007a80:	4413      	add	r3, r2
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	330a      	adds	r3, #10
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	817b      	strh	r3, [r7, #10]
 8007a8a:	e008      	b.n	8007a9e <hagl_fill_circle+0x106>
        } else {
            d = d + 4 * x + 6;
 8007a8c:	89fb      	ldrh	r3, [r7, #14]
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	897b      	ldrh	r3, [r7, #10]
 8007a94:	4413      	add	r3, r2
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	3306      	adds	r3, #6
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	817b      	strh	r3, [r7, #10]
    while (y >= x) {
 8007a9e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007aa2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	da91      	bge.n	80079ce <hagl_fill_circle+0x36>
        }
    }
}
 8007aaa:	bf00      	nop
 8007aac:	bf00      	nop
 8007aae:	3714      	adds	r7, #20
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd90      	pop	{r4, r7, pc}

08007ab4 <hagl_draw_rounded_rectangle>:
void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
    hagl_fill_polygon(3, vertices, color);
}

void hagl_draw_rounded_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t r, color_t color) {
 8007ab4:	b590      	push	{r4, r7, lr}
 8007ab6:	b087      	sub	sp, #28
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	4604      	mov	r4, r0
 8007abc:	4608      	mov	r0, r1
 8007abe:	4611      	mov	r1, r2
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	4623      	mov	r3, r4
 8007ac4:	80fb      	strh	r3, [r7, #6]
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	80bb      	strh	r3, [r7, #4]
 8007aca:	460b      	mov	r3, r1
 8007acc:	807b      	strh	r3, [r7, #2]
 8007ace:	4613      	mov	r3, r2
 8007ad0:	803b      	strh	r3, [r7, #0]

    uint16_t width, height;
    int16_t x, y, d;

    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8007ad2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007ad6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	dd0e      	ble.n	8007afc <hagl_draw_rounded_rectangle+0x48>
        x0 = x0 + x1;
 8007ade:	88fa      	ldrh	r2, [r7, #6]
 8007ae0:	887b      	ldrh	r3, [r7, #2]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8007ae8:	88fa      	ldrh	r2, [r7, #6]
 8007aea:	887b      	ldrh	r3, [r7, #2]
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8007af2:	88fa      	ldrh	r2, [r7, #6]
 8007af4:	887b      	ldrh	r3, [r7, #2]
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8007afc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007b00:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	dd0e      	ble.n	8007b26 <hagl_draw_rounded_rectangle+0x72>
        y0 = y0 + y1;
 8007b08:	88ba      	ldrh	r2, [r7, #4]
 8007b0a:	883b      	ldrh	r3, [r7, #0]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8007b12:	88ba      	ldrh	r2, [r7, #4]
 8007b14:	883b      	ldrh	r3, [r7, #0]
 8007b16:	1ad3      	subs	r3, r2, r3
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8007b1c:	88ba      	ldrh	r2, [r7, #4]
 8007b1e:	883b      	ldrh	r3, [r7, #0]
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8007b26:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b2a:	4a52      	ldr	r2, [pc, #328]	@ (8007c74 <hagl_draw_rounded_rectangle+0x1c0>)
 8007b2c:	8812      	ldrh	r2, [r2, #0]
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	f2c0 8153 	blt.w	8007dda <hagl_draw_rounded_rectangle+0x326>
 8007b34:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007b38:	4a4e      	ldr	r2, [pc, #312]	@ (8007c74 <hagl_draw_rounded_rectangle+0x1c0>)
 8007b3a:	8852      	ldrh	r2, [r2, #2]
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	f2c0 814c 	blt.w	8007dda <hagl_draw_rounded_rectangle+0x326>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8007b42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b46:	4a4b      	ldr	r2, [pc, #300]	@ (8007c74 <hagl_draw_rounded_rectangle+0x1c0>)
 8007b48:	8892      	ldrh	r2, [r2, #4]
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	f300 8147 	bgt.w	8007dde <hagl_draw_rounded_rectangle+0x32a>
 8007b50:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007b54:	4a47      	ldr	r2, [pc, #284]	@ (8007c74 <hagl_draw_rounded_rectangle+0x1c0>)
 8007b56:	88d2      	ldrh	r2, [r2, #6]
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	f300 8140 	bgt.w	8007dde <hagl_draw_rounded_rectangle+0x32a>
        return;
    }

    /* Max radius is half of shortest edge. */
    width = x1 - x0 + 1;
 8007b5e:	887a      	ldrh	r2, [r7, #2]
 8007b60:	88fb      	ldrh	r3, [r7, #6]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	3301      	adds	r3, #1
 8007b68:	823b      	strh	r3, [r7, #16]
    height = y1 - y0 + 1;
 8007b6a:	883a      	ldrh	r2, [r7, #0]
 8007b6c:	88bb      	ldrh	r3, [r7, #4]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	3301      	adds	r3, #1
 8007b74:	81fb      	strh	r3, [r7, #14]
    r = min(r, min(width / 2, height / 2));
 8007b76:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	@ 0x28
 8007b7a:	8a3b      	ldrh	r3, [r7, #16]
 8007b7c:	085b      	lsrs	r3, r3, #1
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	461a      	mov	r2, r3
 8007b82:	89fb      	ldrh	r3, [r7, #14]
 8007b84:	085b      	lsrs	r3, r3, #1
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	4619      	mov	r1, r3
 8007b8a:	4610      	mov	r0, r2
 8007b8c:	f7ff fad1 	bl	8007132 <min>
 8007b90:	4603      	mov	r3, r0
 8007b92:	4619      	mov	r1, r3
 8007b94:	4620      	mov	r0, r4
 8007b96:	f7ff facc 	bl	8007132 <min>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	853b      	strh	r3, [r7, #40]	@ 0x28

    hagl_draw_hline(x0 + r, y0, width - 2 * r, color);
 8007b9e:	88fa      	ldrh	r2, [r7, #6]
 8007ba0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007ba2:	4413      	add	r3, r2
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	b218      	sxth	r0, r3
 8007ba8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007baa:	005b      	lsls	r3, r3, #1
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	8a3a      	ldrh	r2, [r7, #16]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007bb6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007bba:	f7ff fb33 	bl	8007224 <hagl_draw_hline>
    hagl_draw_hline(x0 + r, y1, width - 2 * r, color);
 8007bbe:	88fa      	ldrh	r2, [r7, #6]
 8007bc0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007bc2:	4413      	add	r3, r2
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	b218      	sxth	r0, r3
 8007bc8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007bca:	005b      	lsls	r3, r3, #1
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	8a3a      	ldrh	r2, [r7, #16]
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007bd6:	f9b7 1000 	ldrsh.w	r1, [r7]
 8007bda:	f7ff fb23 	bl	8007224 <hagl_draw_hline>
    hagl_draw_vline(x0, y0 + r, height - 2 * r, color);
 8007bde:	88ba      	ldrh	r2, [r7, #4]
 8007be0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007be2:	4413      	add	r3, r2
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	b219      	sxth	r1, r3
 8007be8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007bea:	005b      	lsls	r3, r3, #1
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	89fa      	ldrh	r2, [r7, #14]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007bf6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007bfa:	f7ff fb36 	bl	800726a <hagl_draw_vline>
    hagl_draw_vline(x1, y0 + r, height - 2 * r, color);
 8007bfe:	88ba      	ldrh	r2, [r7, #4]
 8007c00:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007c02:	4413      	add	r3, r2
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	b219      	sxth	r1, r3
 8007c08:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007c0a:	005b      	lsls	r3, r3, #1
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	89fa      	ldrh	r2, [r7, #14]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007c16:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8007c1a:	f7ff fb26 	bl	800726a <hagl_draw_vline>

    x = 0;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	82fb      	strh	r3, [r7, #22]
    y = r;
 8007c22:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007c24:	82bb      	strh	r3, [r7, #20]
    d = 3 - 2 * r;
 8007c26:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007c28:	005b      	lsls	r3, r3, #1
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	f1c3 0303 	rsb	r3, r3, #3
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	827b      	strh	r3, [r7, #18]

    while (y >= x) {
 8007c34:	e0c9      	b.n	8007dca <hagl_draw_rounded_rectangle+0x316>
        x++;
 8007c36:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	82fb      	strh	r3, [r7, #22]

        if (d > 0) {
 8007c42:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	dd16      	ble.n	8007c78 <hagl_draw_rounded_rectangle+0x1c4>
            y--;
 8007c4a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	3b01      	subs	r3, #1
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	82bb      	strh	r3, [r7, #20]
            d = d + 4 * (x - y) + 10;
 8007c56:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007c5a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	8a7b      	ldrh	r3, [r7, #18]
 8007c68:	4413      	add	r3, r2
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	330a      	adds	r3, #10
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	827b      	strh	r3, [r7, #18]
 8007c72:	e00a      	b.n	8007c8a <hagl_draw_rounded_rectangle+0x1d6>
 8007c74:	20000024 	.word	0x20000024
        } else {
            d = d + 4 * x + 6;
 8007c78:	8afb      	ldrh	r3, [r7, #22]
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	b29a      	uxth	r2, r3
 8007c7e:	8a7b      	ldrh	r3, [r7, #18]
 8007c80:	4413      	add	r3, r2
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	3306      	adds	r3, #6
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	827b      	strh	r3, [r7, #18]
        }

        /* Top right */
        hagl_put_pixel(x1 - r + x, y0 + r - y, color);
 8007c8a:	887a      	ldrh	r2, [r7, #2]
 8007c8c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	8afb      	ldrh	r3, [r7, #22]
 8007c94:	4413      	add	r3, r2
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	b218      	sxth	r0, r3
 8007c9a:	88ba      	ldrh	r2, [r7, #4]
 8007c9c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007c9e:	4413      	add	r3, r2
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	8abb      	ldrh	r3, [r7, #20]
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	b21b      	sxth	r3, r3
 8007caa:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007cac:	4619      	mov	r1, r3
 8007cae:	f7ff fa87 	bl	80071c0 <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y0 + r - x, color);
 8007cb2:	887a      	ldrh	r2, [r7, #2]
 8007cb4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	8abb      	ldrh	r3, [r7, #20]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	b218      	sxth	r0, r3
 8007cc2:	88ba      	ldrh	r2, [r7, #4]
 8007cc4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007cc6:	4413      	add	r3, r2
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	8afb      	ldrh	r3, [r7, #22]
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	b21b      	sxth	r3, r3
 8007cd2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	f7ff fa73 	bl	80071c0 <hagl_put_pixel>

        /* Top left */
        hagl_put_pixel(x0 + r - x, y0 + r - y, color);
 8007cda:	88fa      	ldrh	r2, [r7, #6]
 8007cdc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007cde:	4413      	add	r3, r2
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	8afb      	ldrh	r3, [r7, #22]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	b218      	sxth	r0, r3
 8007cea:	88ba      	ldrh	r2, [r7, #4]
 8007cec:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007cee:	4413      	add	r3, r2
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	8abb      	ldrh	r3, [r7, #20]
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	b21b      	sxth	r3, r3
 8007cfa:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	f7ff fa5f 	bl	80071c0 <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y0 + r - x, color);
 8007d02:	88fa      	ldrh	r2, [r7, #6]
 8007d04:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007d06:	4413      	add	r3, r2
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	8abb      	ldrh	r3, [r7, #20]
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	b218      	sxth	r0, r3
 8007d12:	88ba      	ldrh	r2, [r7, #4]
 8007d14:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007d16:	4413      	add	r3, r2
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	8afb      	ldrh	r3, [r7, #22]
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	b21b      	sxth	r3, r3
 8007d22:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007d24:	4619      	mov	r1, r3
 8007d26:	f7ff fa4b 	bl	80071c0 <hagl_put_pixel>

        /* Bottom right */
        hagl_put_pixel(x1 - r + x, y1 - r + y, color);
 8007d2a:	887a      	ldrh	r2, [r7, #2]
 8007d2c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	8afb      	ldrh	r3, [r7, #22]
 8007d34:	4413      	add	r3, r2
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	b218      	sxth	r0, r3
 8007d3a:	883a      	ldrh	r2, [r7, #0]
 8007d3c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	8abb      	ldrh	r3, [r7, #20]
 8007d44:	4413      	add	r3, r2
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	b21b      	sxth	r3, r3
 8007d4a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	f7ff fa37 	bl	80071c0 <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y1 - r + x, color);
 8007d52:	887a      	ldrh	r2, [r7, #2]
 8007d54:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	8abb      	ldrh	r3, [r7, #20]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	b218      	sxth	r0, r3
 8007d62:	883a      	ldrh	r2, [r7, #0]
 8007d64:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	8afb      	ldrh	r3, [r7, #22]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	b21b      	sxth	r3, r3
 8007d72:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007d74:	4619      	mov	r1, r3
 8007d76:	f7ff fa23 	bl	80071c0 <hagl_put_pixel>

        /* Bottom left */
        hagl_put_pixel(x0 + r - x, y1 - r + y, color);
 8007d7a:	88fa      	ldrh	r2, [r7, #6]
 8007d7c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007d7e:	4413      	add	r3, r2
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	8afb      	ldrh	r3, [r7, #22]
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	b218      	sxth	r0, r3
 8007d8a:	883a      	ldrh	r2, [r7, #0]
 8007d8c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	8abb      	ldrh	r3, [r7, #20]
 8007d94:	4413      	add	r3, r2
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	b21b      	sxth	r3, r3
 8007d9a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	f7ff fa0f 	bl	80071c0 <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y1 - r + x, color);
 8007da2:	88fa      	ldrh	r2, [r7, #6]
 8007da4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007da6:	4413      	add	r3, r2
 8007da8:	b29a      	uxth	r2, r3
 8007daa:	8abb      	ldrh	r3, [r7, #20]
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	b218      	sxth	r0, r3
 8007db2:	883a      	ldrh	r2, [r7, #0]
 8007db4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	8afb      	ldrh	r3, [r7, #22]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	b21b      	sxth	r3, r3
 8007dc2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	f7ff f9fb 	bl	80071c0 <hagl_put_pixel>
    while (y >= x) {
 8007dca:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007dce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	f6bf af2f 	bge.w	8007c36 <hagl_draw_rounded_rectangle+0x182>
 8007dd8:	e002      	b.n	8007de0 <hagl_draw_rounded_rectangle+0x32c>
        return;
 8007dda:	bf00      	nop
 8007ddc:	e000      	b.n	8007de0 <hagl_draw_rounded_rectangle+0x32c>
        return;
 8007dde:	bf00      	nop
    }
};
 8007de0:	371c      	adds	r7, #28
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd90      	pop	{r4, r7, pc}
 8007de6:	bf00      	nop

08007de8 <rgb565>:
#include <stdint.h>

#include "rgb565.h"

uint16_t rgb565(uint8_t r, uint8_t g, uint8_t b)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	4603      	mov	r3, r0
 8007df0:	71fb      	strb	r3, [r7, #7]
 8007df2:	460b      	mov	r3, r1
 8007df4:	71bb      	strb	r3, [r7, #6]
 8007df6:	4613      	mov	r3, r2
 8007df8:	717b      	strb	r3, [r7, #5]
    uint16_t rgb;

    rgb = ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
 8007dfa:	79fb      	ldrb	r3, [r7, #7]
 8007dfc:	021b      	lsls	r3, r3, #8
 8007dfe:	b21b      	sxth	r3, r3
 8007e00:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007e04:	f023 0307 	bic.w	r3, r3, #7
 8007e08:	b21a      	sxth	r2, r3
 8007e0a:	79bb      	ldrb	r3, [r7, #6]
 8007e0c:	00db      	lsls	r3, r3, #3
 8007e0e:	b21b      	sxth	r3, r3
 8007e10:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8007e14:	b21b      	sxth	r3, r3
 8007e16:	4313      	orrs	r3, r2
 8007e18:	b21a      	sxth	r2, r3
 8007e1a:	797b      	ldrb	r3, [r7, #5]
 8007e1c:	08db      	lsrs	r3, r3, #3
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	b21b      	sxth	r3, r3
 8007e22:	4313      	orrs	r3, r2
 8007e24:	b21b      	sxth	r3, r3
 8007e26:	81fb      	strh	r3, [r7, #14]
    rgb = (((rgb) << 8) & 0xFF00) | (((rgb) >> 8) & 0xFF);
 8007e28:	89fb      	ldrh	r3, [r7, #14]
 8007e2a:	021b      	lsls	r3, r3, #8
 8007e2c:	b21a      	sxth	r2, r3
 8007e2e:	89fb      	ldrh	r3, [r7, #14]
 8007e30:	0a1b      	lsrs	r3, r3, #8
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	b21b      	sxth	r3, r3
 8007e36:	4313      	orrs	r3, r2
 8007e38:	b21b      	sxth	r3, r3
 8007e3a:	81fb      	strh	r3, [r7, #14]

    return rgb;
 8007e3c:	89fb      	ldrh	r3, [r7, #14]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr
	...

08007e4c <__sflush_r>:
 8007e4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e54:	0716      	lsls	r6, r2, #28
 8007e56:	4605      	mov	r5, r0
 8007e58:	460c      	mov	r4, r1
 8007e5a:	d454      	bmi.n	8007f06 <__sflush_r+0xba>
 8007e5c:	684b      	ldr	r3, [r1, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	dc02      	bgt.n	8007e68 <__sflush_r+0x1c>
 8007e62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	dd48      	ble.n	8007efa <__sflush_r+0xae>
 8007e68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e6a:	2e00      	cmp	r6, #0
 8007e6c:	d045      	beq.n	8007efa <__sflush_r+0xae>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007e74:	682f      	ldr	r7, [r5, #0]
 8007e76:	6a21      	ldr	r1, [r4, #32]
 8007e78:	602b      	str	r3, [r5, #0]
 8007e7a:	d030      	beq.n	8007ede <__sflush_r+0x92>
 8007e7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007e7e:	89a3      	ldrh	r3, [r4, #12]
 8007e80:	0759      	lsls	r1, r3, #29
 8007e82:	d505      	bpl.n	8007e90 <__sflush_r+0x44>
 8007e84:	6863      	ldr	r3, [r4, #4]
 8007e86:	1ad2      	subs	r2, r2, r3
 8007e88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007e8a:	b10b      	cbz	r3, 8007e90 <__sflush_r+0x44>
 8007e8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007e8e:	1ad2      	subs	r2, r2, r3
 8007e90:	2300      	movs	r3, #0
 8007e92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e94:	6a21      	ldr	r1, [r4, #32]
 8007e96:	4628      	mov	r0, r5
 8007e98:	47b0      	blx	r6
 8007e9a:	1c43      	adds	r3, r0, #1
 8007e9c:	89a3      	ldrh	r3, [r4, #12]
 8007e9e:	d106      	bne.n	8007eae <__sflush_r+0x62>
 8007ea0:	6829      	ldr	r1, [r5, #0]
 8007ea2:	291d      	cmp	r1, #29
 8007ea4:	d82b      	bhi.n	8007efe <__sflush_r+0xb2>
 8007ea6:	4a2a      	ldr	r2, [pc, #168]	@ (8007f50 <__sflush_r+0x104>)
 8007ea8:	410a      	asrs	r2, r1
 8007eaa:	07d6      	lsls	r6, r2, #31
 8007eac:	d427      	bmi.n	8007efe <__sflush_r+0xb2>
 8007eae:	2200      	movs	r2, #0
 8007eb0:	6062      	str	r2, [r4, #4]
 8007eb2:	04d9      	lsls	r1, r3, #19
 8007eb4:	6922      	ldr	r2, [r4, #16]
 8007eb6:	6022      	str	r2, [r4, #0]
 8007eb8:	d504      	bpl.n	8007ec4 <__sflush_r+0x78>
 8007eba:	1c42      	adds	r2, r0, #1
 8007ebc:	d101      	bne.n	8007ec2 <__sflush_r+0x76>
 8007ebe:	682b      	ldr	r3, [r5, #0]
 8007ec0:	b903      	cbnz	r3, 8007ec4 <__sflush_r+0x78>
 8007ec2:	6560      	str	r0, [r4, #84]	@ 0x54
 8007ec4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ec6:	602f      	str	r7, [r5, #0]
 8007ec8:	b1b9      	cbz	r1, 8007efa <__sflush_r+0xae>
 8007eca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ece:	4299      	cmp	r1, r3
 8007ed0:	d002      	beq.n	8007ed8 <__sflush_r+0x8c>
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	f000 fa08 	bl	80082e8 <_free_r>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	6363      	str	r3, [r4, #52]	@ 0x34
 8007edc:	e00d      	b.n	8007efa <__sflush_r+0xae>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	47b0      	blx	r6
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	1c50      	adds	r0, r2, #1
 8007ee8:	d1c9      	bne.n	8007e7e <__sflush_r+0x32>
 8007eea:	682b      	ldr	r3, [r5, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d0c6      	beq.n	8007e7e <__sflush_r+0x32>
 8007ef0:	2b1d      	cmp	r3, #29
 8007ef2:	d001      	beq.n	8007ef8 <__sflush_r+0xac>
 8007ef4:	2b16      	cmp	r3, #22
 8007ef6:	d11e      	bne.n	8007f36 <__sflush_r+0xea>
 8007ef8:	602f      	str	r7, [r5, #0]
 8007efa:	2000      	movs	r0, #0
 8007efc:	e022      	b.n	8007f44 <__sflush_r+0xf8>
 8007efe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f02:	b21b      	sxth	r3, r3
 8007f04:	e01b      	b.n	8007f3e <__sflush_r+0xf2>
 8007f06:	690f      	ldr	r7, [r1, #16]
 8007f08:	2f00      	cmp	r7, #0
 8007f0a:	d0f6      	beq.n	8007efa <__sflush_r+0xae>
 8007f0c:	0793      	lsls	r3, r2, #30
 8007f0e:	680e      	ldr	r6, [r1, #0]
 8007f10:	bf08      	it	eq
 8007f12:	694b      	ldreq	r3, [r1, #20]
 8007f14:	600f      	str	r7, [r1, #0]
 8007f16:	bf18      	it	ne
 8007f18:	2300      	movne	r3, #0
 8007f1a:	eba6 0807 	sub.w	r8, r6, r7
 8007f1e:	608b      	str	r3, [r1, #8]
 8007f20:	f1b8 0f00 	cmp.w	r8, #0
 8007f24:	dde9      	ble.n	8007efa <__sflush_r+0xae>
 8007f26:	6a21      	ldr	r1, [r4, #32]
 8007f28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007f2a:	4643      	mov	r3, r8
 8007f2c:	463a      	mov	r2, r7
 8007f2e:	4628      	mov	r0, r5
 8007f30:	47b0      	blx	r6
 8007f32:	2800      	cmp	r0, #0
 8007f34:	dc08      	bgt.n	8007f48 <__sflush_r+0xfc>
 8007f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f3e:	81a3      	strh	r3, [r4, #12]
 8007f40:	f04f 30ff 	mov.w	r0, #4294967295
 8007f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f48:	4407      	add	r7, r0
 8007f4a:	eba8 0800 	sub.w	r8, r8, r0
 8007f4e:	e7e7      	b.n	8007f20 <__sflush_r+0xd4>
 8007f50:	dfbffffe 	.word	0xdfbffffe

08007f54 <_fflush_r>:
 8007f54:	b538      	push	{r3, r4, r5, lr}
 8007f56:	690b      	ldr	r3, [r1, #16]
 8007f58:	4605      	mov	r5, r0
 8007f5a:	460c      	mov	r4, r1
 8007f5c:	b913      	cbnz	r3, 8007f64 <_fflush_r+0x10>
 8007f5e:	2500      	movs	r5, #0
 8007f60:	4628      	mov	r0, r5
 8007f62:	bd38      	pop	{r3, r4, r5, pc}
 8007f64:	b118      	cbz	r0, 8007f6e <_fflush_r+0x1a>
 8007f66:	6a03      	ldr	r3, [r0, #32]
 8007f68:	b90b      	cbnz	r3, 8007f6e <_fflush_r+0x1a>
 8007f6a:	f000 f8a7 	bl	80080bc <__sinit>
 8007f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d0f3      	beq.n	8007f5e <_fflush_r+0xa>
 8007f76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007f78:	07d0      	lsls	r0, r2, #31
 8007f7a:	d404      	bmi.n	8007f86 <_fflush_r+0x32>
 8007f7c:	0599      	lsls	r1, r3, #22
 8007f7e:	d402      	bmi.n	8007f86 <_fflush_r+0x32>
 8007f80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f82:	f000 f9a0 	bl	80082c6 <__retarget_lock_acquire_recursive>
 8007f86:	4628      	mov	r0, r5
 8007f88:	4621      	mov	r1, r4
 8007f8a:	f7ff ff5f 	bl	8007e4c <__sflush_r>
 8007f8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f90:	07da      	lsls	r2, r3, #31
 8007f92:	4605      	mov	r5, r0
 8007f94:	d4e4      	bmi.n	8007f60 <_fflush_r+0xc>
 8007f96:	89a3      	ldrh	r3, [r4, #12]
 8007f98:	059b      	lsls	r3, r3, #22
 8007f9a:	d4e1      	bmi.n	8007f60 <_fflush_r+0xc>
 8007f9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f9e:	f000 f993 	bl	80082c8 <__retarget_lock_release_recursive>
 8007fa2:	e7dd      	b.n	8007f60 <_fflush_r+0xc>

08007fa4 <std>:
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	b510      	push	{r4, lr}
 8007fa8:	4604      	mov	r4, r0
 8007faa:	e9c0 3300 	strd	r3, r3, [r0]
 8007fae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fb2:	6083      	str	r3, [r0, #8]
 8007fb4:	8181      	strh	r1, [r0, #12]
 8007fb6:	6643      	str	r3, [r0, #100]	@ 0x64
 8007fb8:	81c2      	strh	r2, [r0, #14]
 8007fba:	6183      	str	r3, [r0, #24]
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	2208      	movs	r2, #8
 8007fc0:	305c      	adds	r0, #92	@ 0x5c
 8007fc2:	f000 f906 	bl	80081d2 <memset>
 8007fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8007ffc <std+0x58>)
 8007fc8:	6263      	str	r3, [r4, #36]	@ 0x24
 8007fca:	4b0d      	ldr	r3, [pc, #52]	@ (8008000 <std+0x5c>)
 8007fcc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007fce:	4b0d      	ldr	r3, [pc, #52]	@ (8008004 <std+0x60>)
 8007fd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8008008 <std+0x64>)
 8007fd4:	6323      	str	r3, [r4, #48]	@ 0x30
 8007fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800800c <std+0x68>)
 8007fd8:	6224      	str	r4, [r4, #32]
 8007fda:	429c      	cmp	r4, r3
 8007fdc:	d006      	beq.n	8007fec <std+0x48>
 8007fde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007fe2:	4294      	cmp	r4, r2
 8007fe4:	d002      	beq.n	8007fec <std+0x48>
 8007fe6:	33d0      	adds	r3, #208	@ 0xd0
 8007fe8:	429c      	cmp	r4, r3
 8007fea:	d105      	bne.n	8007ff8 <std+0x54>
 8007fec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ff4:	f000 b966 	b.w	80082c4 <__retarget_lock_init_recursive>
 8007ff8:	bd10      	pop	{r4, pc}
 8007ffa:	bf00      	nop
 8007ffc:	0800814d 	.word	0x0800814d
 8008000:	0800816f 	.word	0x0800816f
 8008004:	080081a7 	.word	0x080081a7
 8008008:	080081cb 	.word	0x080081cb
 800800c:	2000a258 	.word	0x2000a258

08008010 <stdio_exit_handler>:
 8008010:	4a02      	ldr	r2, [pc, #8]	@ (800801c <stdio_exit_handler+0xc>)
 8008012:	4903      	ldr	r1, [pc, #12]	@ (8008020 <stdio_exit_handler+0x10>)
 8008014:	4803      	ldr	r0, [pc, #12]	@ (8008024 <stdio_exit_handler+0x14>)
 8008016:	f000 b869 	b.w	80080ec <_fwalk_sglue>
 800801a:	bf00      	nop
 800801c:	2000002c 	.word	0x2000002c
 8008020:	08007f55 	.word	0x08007f55
 8008024:	2000003c 	.word	0x2000003c

08008028 <cleanup_stdio>:
 8008028:	6841      	ldr	r1, [r0, #4]
 800802a:	4b0c      	ldr	r3, [pc, #48]	@ (800805c <cleanup_stdio+0x34>)
 800802c:	4299      	cmp	r1, r3
 800802e:	b510      	push	{r4, lr}
 8008030:	4604      	mov	r4, r0
 8008032:	d001      	beq.n	8008038 <cleanup_stdio+0x10>
 8008034:	f7ff ff8e 	bl	8007f54 <_fflush_r>
 8008038:	68a1      	ldr	r1, [r4, #8]
 800803a:	4b09      	ldr	r3, [pc, #36]	@ (8008060 <cleanup_stdio+0x38>)
 800803c:	4299      	cmp	r1, r3
 800803e:	d002      	beq.n	8008046 <cleanup_stdio+0x1e>
 8008040:	4620      	mov	r0, r4
 8008042:	f7ff ff87 	bl	8007f54 <_fflush_r>
 8008046:	68e1      	ldr	r1, [r4, #12]
 8008048:	4b06      	ldr	r3, [pc, #24]	@ (8008064 <cleanup_stdio+0x3c>)
 800804a:	4299      	cmp	r1, r3
 800804c:	d004      	beq.n	8008058 <cleanup_stdio+0x30>
 800804e:	4620      	mov	r0, r4
 8008050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008054:	f7ff bf7e 	b.w	8007f54 <_fflush_r>
 8008058:	bd10      	pop	{r4, pc}
 800805a:	bf00      	nop
 800805c:	2000a258 	.word	0x2000a258
 8008060:	2000a2c0 	.word	0x2000a2c0
 8008064:	2000a328 	.word	0x2000a328

08008068 <global_stdio_init.part.0>:
 8008068:	b510      	push	{r4, lr}
 800806a:	4b0b      	ldr	r3, [pc, #44]	@ (8008098 <global_stdio_init.part.0+0x30>)
 800806c:	4c0b      	ldr	r4, [pc, #44]	@ (800809c <global_stdio_init.part.0+0x34>)
 800806e:	4a0c      	ldr	r2, [pc, #48]	@ (80080a0 <global_stdio_init.part.0+0x38>)
 8008070:	601a      	str	r2, [r3, #0]
 8008072:	4620      	mov	r0, r4
 8008074:	2200      	movs	r2, #0
 8008076:	2104      	movs	r1, #4
 8008078:	f7ff ff94 	bl	8007fa4 <std>
 800807c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008080:	2201      	movs	r2, #1
 8008082:	2109      	movs	r1, #9
 8008084:	f7ff ff8e 	bl	8007fa4 <std>
 8008088:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800808c:	2202      	movs	r2, #2
 800808e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008092:	2112      	movs	r1, #18
 8008094:	f7ff bf86 	b.w	8007fa4 <std>
 8008098:	2000a390 	.word	0x2000a390
 800809c:	2000a258 	.word	0x2000a258
 80080a0:	08008011 	.word	0x08008011

080080a4 <__sfp_lock_acquire>:
 80080a4:	4801      	ldr	r0, [pc, #4]	@ (80080ac <__sfp_lock_acquire+0x8>)
 80080a6:	f000 b90e 	b.w	80082c6 <__retarget_lock_acquire_recursive>
 80080aa:	bf00      	nop
 80080ac:	2000a399 	.word	0x2000a399

080080b0 <__sfp_lock_release>:
 80080b0:	4801      	ldr	r0, [pc, #4]	@ (80080b8 <__sfp_lock_release+0x8>)
 80080b2:	f000 b909 	b.w	80082c8 <__retarget_lock_release_recursive>
 80080b6:	bf00      	nop
 80080b8:	2000a399 	.word	0x2000a399

080080bc <__sinit>:
 80080bc:	b510      	push	{r4, lr}
 80080be:	4604      	mov	r4, r0
 80080c0:	f7ff fff0 	bl	80080a4 <__sfp_lock_acquire>
 80080c4:	6a23      	ldr	r3, [r4, #32]
 80080c6:	b11b      	cbz	r3, 80080d0 <__sinit+0x14>
 80080c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080cc:	f7ff bff0 	b.w	80080b0 <__sfp_lock_release>
 80080d0:	4b04      	ldr	r3, [pc, #16]	@ (80080e4 <__sinit+0x28>)
 80080d2:	6223      	str	r3, [r4, #32]
 80080d4:	4b04      	ldr	r3, [pc, #16]	@ (80080e8 <__sinit+0x2c>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1f5      	bne.n	80080c8 <__sinit+0xc>
 80080dc:	f7ff ffc4 	bl	8008068 <global_stdio_init.part.0>
 80080e0:	e7f2      	b.n	80080c8 <__sinit+0xc>
 80080e2:	bf00      	nop
 80080e4:	08008029 	.word	0x08008029
 80080e8:	2000a390 	.word	0x2000a390

080080ec <_fwalk_sglue>:
 80080ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080f0:	4607      	mov	r7, r0
 80080f2:	4688      	mov	r8, r1
 80080f4:	4614      	mov	r4, r2
 80080f6:	2600      	movs	r6, #0
 80080f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080fc:	f1b9 0901 	subs.w	r9, r9, #1
 8008100:	d505      	bpl.n	800810e <_fwalk_sglue+0x22>
 8008102:	6824      	ldr	r4, [r4, #0]
 8008104:	2c00      	cmp	r4, #0
 8008106:	d1f7      	bne.n	80080f8 <_fwalk_sglue+0xc>
 8008108:	4630      	mov	r0, r6
 800810a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800810e:	89ab      	ldrh	r3, [r5, #12]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d907      	bls.n	8008124 <_fwalk_sglue+0x38>
 8008114:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008118:	3301      	adds	r3, #1
 800811a:	d003      	beq.n	8008124 <_fwalk_sglue+0x38>
 800811c:	4629      	mov	r1, r5
 800811e:	4638      	mov	r0, r7
 8008120:	47c0      	blx	r8
 8008122:	4306      	orrs	r6, r0
 8008124:	3568      	adds	r5, #104	@ 0x68
 8008126:	e7e9      	b.n	80080fc <_fwalk_sglue+0x10>

08008128 <iprintf>:
 8008128:	b40f      	push	{r0, r1, r2, r3}
 800812a:	b507      	push	{r0, r1, r2, lr}
 800812c:	4906      	ldr	r1, [pc, #24]	@ (8008148 <iprintf+0x20>)
 800812e:	ab04      	add	r3, sp, #16
 8008130:	6808      	ldr	r0, [r1, #0]
 8008132:	f853 2b04 	ldr.w	r2, [r3], #4
 8008136:	6881      	ldr	r1, [r0, #8]
 8008138:	9301      	str	r3, [sp, #4]
 800813a:	f000 f9f7 	bl	800852c <_vfiprintf_r>
 800813e:	b003      	add	sp, #12
 8008140:	f85d eb04 	ldr.w	lr, [sp], #4
 8008144:	b004      	add	sp, #16
 8008146:	4770      	bx	lr
 8008148:	20000038 	.word	0x20000038

0800814c <__sread>:
 800814c:	b510      	push	{r4, lr}
 800814e:	460c      	mov	r4, r1
 8008150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008154:	f000 f868 	bl	8008228 <_read_r>
 8008158:	2800      	cmp	r0, #0
 800815a:	bfab      	itete	ge
 800815c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800815e:	89a3      	ldrhlt	r3, [r4, #12]
 8008160:	181b      	addge	r3, r3, r0
 8008162:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008166:	bfac      	ite	ge
 8008168:	6563      	strge	r3, [r4, #84]	@ 0x54
 800816a:	81a3      	strhlt	r3, [r4, #12]
 800816c:	bd10      	pop	{r4, pc}

0800816e <__swrite>:
 800816e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008172:	461f      	mov	r7, r3
 8008174:	898b      	ldrh	r3, [r1, #12]
 8008176:	05db      	lsls	r3, r3, #23
 8008178:	4605      	mov	r5, r0
 800817a:	460c      	mov	r4, r1
 800817c:	4616      	mov	r6, r2
 800817e:	d505      	bpl.n	800818c <__swrite+0x1e>
 8008180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008184:	2302      	movs	r3, #2
 8008186:	2200      	movs	r2, #0
 8008188:	f000 f83c 	bl	8008204 <_lseek_r>
 800818c:	89a3      	ldrh	r3, [r4, #12]
 800818e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008192:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008196:	81a3      	strh	r3, [r4, #12]
 8008198:	4632      	mov	r2, r6
 800819a:	463b      	mov	r3, r7
 800819c:	4628      	mov	r0, r5
 800819e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081a2:	f000 b853 	b.w	800824c <_write_r>

080081a6 <__sseek>:
 80081a6:	b510      	push	{r4, lr}
 80081a8:	460c      	mov	r4, r1
 80081aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ae:	f000 f829 	bl	8008204 <_lseek_r>
 80081b2:	1c43      	adds	r3, r0, #1
 80081b4:	89a3      	ldrh	r3, [r4, #12]
 80081b6:	bf15      	itete	ne
 80081b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80081ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80081be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80081c2:	81a3      	strheq	r3, [r4, #12]
 80081c4:	bf18      	it	ne
 80081c6:	81a3      	strhne	r3, [r4, #12]
 80081c8:	bd10      	pop	{r4, pc}

080081ca <__sclose>:
 80081ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ce:	f000 b809 	b.w	80081e4 <_close_r>

080081d2 <memset>:
 80081d2:	4402      	add	r2, r0
 80081d4:	4603      	mov	r3, r0
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d100      	bne.n	80081dc <memset+0xa>
 80081da:	4770      	bx	lr
 80081dc:	f803 1b01 	strb.w	r1, [r3], #1
 80081e0:	e7f9      	b.n	80081d6 <memset+0x4>
	...

080081e4 <_close_r>:
 80081e4:	b538      	push	{r3, r4, r5, lr}
 80081e6:	4d06      	ldr	r5, [pc, #24]	@ (8008200 <_close_r+0x1c>)
 80081e8:	2300      	movs	r3, #0
 80081ea:	4604      	mov	r4, r0
 80081ec:	4608      	mov	r0, r1
 80081ee:	602b      	str	r3, [r5, #0]
 80081f0:	f7f9 ff5b 	bl	80020aa <_close>
 80081f4:	1c43      	adds	r3, r0, #1
 80081f6:	d102      	bne.n	80081fe <_close_r+0x1a>
 80081f8:	682b      	ldr	r3, [r5, #0]
 80081fa:	b103      	cbz	r3, 80081fe <_close_r+0x1a>
 80081fc:	6023      	str	r3, [r4, #0]
 80081fe:	bd38      	pop	{r3, r4, r5, pc}
 8008200:	2000a394 	.word	0x2000a394

08008204 <_lseek_r>:
 8008204:	b538      	push	{r3, r4, r5, lr}
 8008206:	4d07      	ldr	r5, [pc, #28]	@ (8008224 <_lseek_r+0x20>)
 8008208:	4604      	mov	r4, r0
 800820a:	4608      	mov	r0, r1
 800820c:	4611      	mov	r1, r2
 800820e:	2200      	movs	r2, #0
 8008210:	602a      	str	r2, [r5, #0]
 8008212:	461a      	mov	r2, r3
 8008214:	f7f9 ff70 	bl	80020f8 <_lseek>
 8008218:	1c43      	adds	r3, r0, #1
 800821a:	d102      	bne.n	8008222 <_lseek_r+0x1e>
 800821c:	682b      	ldr	r3, [r5, #0]
 800821e:	b103      	cbz	r3, 8008222 <_lseek_r+0x1e>
 8008220:	6023      	str	r3, [r4, #0]
 8008222:	bd38      	pop	{r3, r4, r5, pc}
 8008224:	2000a394 	.word	0x2000a394

08008228 <_read_r>:
 8008228:	b538      	push	{r3, r4, r5, lr}
 800822a:	4d07      	ldr	r5, [pc, #28]	@ (8008248 <_read_r+0x20>)
 800822c:	4604      	mov	r4, r0
 800822e:	4608      	mov	r0, r1
 8008230:	4611      	mov	r1, r2
 8008232:	2200      	movs	r2, #0
 8008234:	602a      	str	r2, [r5, #0]
 8008236:	461a      	mov	r2, r3
 8008238:	f7f9 fefe 	bl	8002038 <_read>
 800823c:	1c43      	adds	r3, r0, #1
 800823e:	d102      	bne.n	8008246 <_read_r+0x1e>
 8008240:	682b      	ldr	r3, [r5, #0]
 8008242:	b103      	cbz	r3, 8008246 <_read_r+0x1e>
 8008244:	6023      	str	r3, [r4, #0]
 8008246:	bd38      	pop	{r3, r4, r5, pc}
 8008248:	2000a394 	.word	0x2000a394

0800824c <_write_r>:
 800824c:	b538      	push	{r3, r4, r5, lr}
 800824e:	4d07      	ldr	r5, [pc, #28]	@ (800826c <_write_r+0x20>)
 8008250:	4604      	mov	r4, r0
 8008252:	4608      	mov	r0, r1
 8008254:	4611      	mov	r1, r2
 8008256:	2200      	movs	r2, #0
 8008258:	602a      	str	r2, [r5, #0]
 800825a:	461a      	mov	r2, r3
 800825c:	f7f9 ff09 	bl	8002072 <_write>
 8008260:	1c43      	adds	r3, r0, #1
 8008262:	d102      	bne.n	800826a <_write_r+0x1e>
 8008264:	682b      	ldr	r3, [r5, #0]
 8008266:	b103      	cbz	r3, 800826a <_write_r+0x1e>
 8008268:	6023      	str	r3, [r4, #0]
 800826a:	bd38      	pop	{r3, r4, r5, pc}
 800826c:	2000a394 	.word	0x2000a394

08008270 <__errno>:
 8008270:	4b01      	ldr	r3, [pc, #4]	@ (8008278 <__errno+0x8>)
 8008272:	6818      	ldr	r0, [r3, #0]
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	20000038 	.word	0x20000038

0800827c <__libc_init_array>:
 800827c:	b570      	push	{r4, r5, r6, lr}
 800827e:	4d0d      	ldr	r5, [pc, #52]	@ (80082b4 <__libc_init_array+0x38>)
 8008280:	4c0d      	ldr	r4, [pc, #52]	@ (80082b8 <__libc_init_array+0x3c>)
 8008282:	1b64      	subs	r4, r4, r5
 8008284:	10a4      	asrs	r4, r4, #2
 8008286:	2600      	movs	r6, #0
 8008288:	42a6      	cmp	r6, r4
 800828a:	d109      	bne.n	80082a0 <__libc_init_array+0x24>
 800828c:	4d0b      	ldr	r5, [pc, #44]	@ (80082bc <__libc_init_array+0x40>)
 800828e:	4c0c      	ldr	r4, [pc, #48]	@ (80082c0 <__libc_init_array+0x44>)
 8008290:	f000 fd1a 	bl	8008cc8 <_init>
 8008294:	1b64      	subs	r4, r4, r5
 8008296:	10a4      	asrs	r4, r4, #2
 8008298:	2600      	movs	r6, #0
 800829a:	42a6      	cmp	r6, r4
 800829c:	d105      	bne.n	80082aa <__libc_init_array+0x2e>
 800829e:	bd70      	pop	{r4, r5, r6, pc}
 80082a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80082a4:	4798      	blx	r3
 80082a6:	3601      	adds	r6, #1
 80082a8:	e7ee      	b.n	8008288 <__libc_init_array+0xc>
 80082aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80082ae:	4798      	blx	r3
 80082b0:	3601      	adds	r6, #1
 80082b2:	e7f2      	b.n	800829a <__libc_init_array+0x1e>
 80082b4:	0800be6c 	.word	0x0800be6c
 80082b8:	0800be6c 	.word	0x0800be6c
 80082bc:	0800be6c 	.word	0x0800be6c
 80082c0:	0800be70 	.word	0x0800be70

080082c4 <__retarget_lock_init_recursive>:
 80082c4:	4770      	bx	lr

080082c6 <__retarget_lock_acquire_recursive>:
 80082c6:	4770      	bx	lr

080082c8 <__retarget_lock_release_recursive>:
 80082c8:	4770      	bx	lr

080082ca <memcpy>:
 80082ca:	440a      	add	r2, r1
 80082cc:	4291      	cmp	r1, r2
 80082ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80082d2:	d100      	bne.n	80082d6 <memcpy+0xc>
 80082d4:	4770      	bx	lr
 80082d6:	b510      	push	{r4, lr}
 80082d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082e0:	4291      	cmp	r1, r2
 80082e2:	d1f9      	bne.n	80082d8 <memcpy+0xe>
 80082e4:	bd10      	pop	{r4, pc}
	...

080082e8 <_free_r>:
 80082e8:	b538      	push	{r3, r4, r5, lr}
 80082ea:	4605      	mov	r5, r0
 80082ec:	2900      	cmp	r1, #0
 80082ee:	d041      	beq.n	8008374 <_free_r+0x8c>
 80082f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082f4:	1f0c      	subs	r4, r1, #4
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	bfb8      	it	lt
 80082fa:	18e4      	addlt	r4, r4, r3
 80082fc:	f000 f8e0 	bl	80084c0 <__malloc_lock>
 8008300:	4a1d      	ldr	r2, [pc, #116]	@ (8008378 <_free_r+0x90>)
 8008302:	6813      	ldr	r3, [r2, #0]
 8008304:	b933      	cbnz	r3, 8008314 <_free_r+0x2c>
 8008306:	6063      	str	r3, [r4, #4]
 8008308:	6014      	str	r4, [r2, #0]
 800830a:	4628      	mov	r0, r5
 800830c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008310:	f000 b8dc 	b.w	80084cc <__malloc_unlock>
 8008314:	42a3      	cmp	r3, r4
 8008316:	d908      	bls.n	800832a <_free_r+0x42>
 8008318:	6820      	ldr	r0, [r4, #0]
 800831a:	1821      	adds	r1, r4, r0
 800831c:	428b      	cmp	r3, r1
 800831e:	bf01      	itttt	eq
 8008320:	6819      	ldreq	r1, [r3, #0]
 8008322:	685b      	ldreq	r3, [r3, #4]
 8008324:	1809      	addeq	r1, r1, r0
 8008326:	6021      	streq	r1, [r4, #0]
 8008328:	e7ed      	b.n	8008306 <_free_r+0x1e>
 800832a:	461a      	mov	r2, r3
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	b10b      	cbz	r3, 8008334 <_free_r+0x4c>
 8008330:	42a3      	cmp	r3, r4
 8008332:	d9fa      	bls.n	800832a <_free_r+0x42>
 8008334:	6811      	ldr	r1, [r2, #0]
 8008336:	1850      	adds	r0, r2, r1
 8008338:	42a0      	cmp	r0, r4
 800833a:	d10b      	bne.n	8008354 <_free_r+0x6c>
 800833c:	6820      	ldr	r0, [r4, #0]
 800833e:	4401      	add	r1, r0
 8008340:	1850      	adds	r0, r2, r1
 8008342:	4283      	cmp	r3, r0
 8008344:	6011      	str	r1, [r2, #0]
 8008346:	d1e0      	bne.n	800830a <_free_r+0x22>
 8008348:	6818      	ldr	r0, [r3, #0]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	6053      	str	r3, [r2, #4]
 800834e:	4408      	add	r0, r1
 8008350:	6010      	str	r0, [r2, #0]
 8008352:	e7da      	b.n	800830a <_free_r+0x22>
 8008354:	d902      	bls.n	800835c <_free_r+0x74>
 8008356:	230c      	movs	r3, #12
 8008358:	602b      	str	r3, [r5, #0]
 800835a:	e7d6      	b.n	800830a <_free_r+0x22>
 800835c:	6820      	ldr	r0, [r4, #0]
 800835e:	1821      	adds	r1, r4, r0
 8008360:	428b      	cmp	r3, r1
 8008362:	bf04      	itt	eq
 8008364:	6819      	ldreq	r1, [r3, #0]
 8008366:	685b      	ldreq	r3, [r3, #4]
 8008368:	6063      	str	r3, [r4, #4]
 800836a:	bf04      	itt	eq
 800836c:	1809      	addeq	r1, r1, r0
 800836e:	6021      	streq	r1, [r4, #0]
 8008370:	6054      	str	r4, [r2, #4]
 8008372:	e7ca      	b.n	800830a <_free_r+0x22>
 8008374:	bd38      	pop	{r3, r4, r5, pc}
 8008376:	bf00      	nop
 8008378:	2000a3a0 	.word	0x2000a3a0

0800837c <sbrk_aligned>:
 800837c:	b570      	push	{r4, r5, r6, lr}
 800837e:	4e0f      	ldr	r6, [pc, #60]	@ (80083bc <sbrk_aligned+0x40>)
 8008380:	460c      	mov	r4, r1
 8008382:	6831      	ldr	r1, [r6, #0]
 8008384:	4605      	mov	r5, r0
 8008386:	b911      	cbnz	r1, 800838e <sbrk_aligned+0x12>
 8008388:	f000 fc8e 	bl	8008ca8 <_sbrk_r>
 800838c:	6030      	str	r0, [r6, #0]
 800838e:	4621      	mov	r1, r4
 8008390:	4628      	mov	r0, r5
 8008392:	f000 fc89 	bl	8008ca8 <_sbrk_r>
 8008396:	1c43      	adds	r3, r0, #1
 8008398:	d103      	bne.n	80083a2 <sbrk_aligned+0x26>
 800839a:	f04f 34ff 	mov.w	r4, #4294967295
 800839e:	4620      	mov	r0, r4
 80083a0:	bd70      	pop	{r4, r5, r6, pc}
 80083a2:	1cc4      	adds	r4, r0, #3
 80083a4:	f024 0403 	bic.w	r4, r4, #3
 80083a8:	42a0      	cmp	r0, r4
 80083aa:	d0f8      	beq.n	800839e <sbrk_aligned+0x22>
 80083ac:	1a21      	subs	r1, r4, r0
 80083ae:	4628      	mov	r0, r5
 80083b0:	f000 fc7a 	bl	8008ca8 <_sbrk_r>
 80083b4:	3001      	adds	r0, #1
 80083b6:	d1f2      	bne.n	800839e <sbrk_aligned+0x22>
 80083b8:	e7ef      	b.n	800839a <sbrk_aligned+0x1e>
 80083ba:	bf00      	nop
 80083bc:	2000a39c 	.word	0x2000a39c

080083c0 <_malloc_r>:
 80083c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083c4:	1ccd      	adds	r5, r1, #3
 80083c6:	f025 0503 	bic.w	r5, r5, #3
 80083ca:	3508      	adds	r5, #8
 80083cc:	2d0c      	cmp	r5, #12
 80083ce:	bf38      	it	cc
 80083d0:	250c      	movcc	r5, #12
 80083d2:	2d00      	cmp	r5, #0
 80083d4:	4606      	mov	r6, r0
 80083d6:	db01      	blt.n	80083dc <_malloc_r+0x1c>
 80083d8:	42a9      	cmp	r1, r5
 80083da:	d904      	bls.n	80083e6 <_malloc_r+0x26>
 80083dc:	230c      	movs	r3, #12
 80083de:	6033      	str	r3, [r6, #0]
 80083e0:	2000      	movs	r0, #0
 80083e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084bc <_malloc_r+0xfc>
 80083ea:	f000 f869 	bl	80084c0 <__malloc_lock>
 80083ee:	f8d8 3000 	ldr.w	r3, [r8]
 80083f2:	461c      	mov	r4, r3
 80083f4:	bb44      	cbnz	r4, 8008448 <_malloc_r+0x88>
 80083f6:	4629      	mov	r1, r5
 80083f8:	4630      	mov	r0, r6
 80083fa:	f7ff ffbf 	bl	800837c <sbrk_aligned>
 80083fe:	1c43      	adds	r3, r0, #1
 8008400:	4604      	mov	r4, r0
 8008402:	d158      	bne.n	80084b6 <_malloc_r+0xf6>
 8008404:	f8d8 4000 	ldr.w	r4, [r8]
 8008408:	4627      	mov	r7, r4
 800840a:	2f00      	cmp	r7, #0
 800840c:	d143      	bne.n	8008496 <_malloc_r+0xd6>
 800840e:	2c00      	cmp	r4, #0
 8008410:	d04b      	beq.n	80084aa <_malloc_r+0xea>
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	4639      	mov	r1, r7
 8008416:	4630      	mov	r0, r6
 8008418:	eb04 0903 	add.w	r9, r4, r3
 800841c:	f000 fc44 	bl	8008ca8 <_sbrk_r>
 8008420:	4581      	cmp	r9, r0
 8008422:	d142      	bne.n	80084aa <_malloc_r+0xea>
 8008424:	6821      	ldr	r1, [r4, #0]
 8008426:	1a6d      	subs	r5, r5, r1
 8008428:	4629      	mov	r1, r5
 800842a:	4630      	mov	r0, r6
 800842c:	f7ff ffa6 	bl	800837c <sbrk_aligned>
 8008430:	3001      	adds	r0, #1
 8008432:	d03a      	beq.n	80084aa <_malloc_r+0xea>
 8008434:	6823      	ldr	r3, [r4, #0]
 8008436:	442b      	add	r3, r5
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	f8d8 3000 	ldr.w	r3, [r8]
 800843e:	685a      	ldr	r2, [r3, #4]
 8008440:	bb62      	cbnz	r2, 800849c <_malloc_r+0xdc>
 8008442:	f8c8 7000 	str.w	r7, [r8]
 8008446:	e00f      	b.n	8008468 <_malloc_r+0xa8>
 8008448:	6822      	ldr	r2, [r4, #0]
 800844a:	1b52      	subs	r2, r2, r5
 800844c:	d420      	bmi.n	8008490 <_malloc_r+0xd0>
 800844e:	2a0b      	cmp	r2, #11
 8008450:	d917      	bls.n	8008482 <_malloc_r+0xc2>
 8008452:	1961      	adds	r1, r4, r5
 8008454:	42a3      	cmp	r3, r4
 8008456:	6025      	str	r5, [r4, #0]
 8008458:	bf18      	it	ne
 800845a:	6059      	strne	r1, [r3, #4]
 800845c:	6863      	ldr	r3, [r4, #4]
 800845e:	bf08      	it	eq
 8008460:	f8c8 1000 	streq.w	r1, [r8]
 8008464:	5162      	str	r2, [r4, r5]
 8008466:	604b      	str	r3, [r1, #4]
 8008468:	4630      	mov	r0, r6
 800846a:	f000 f82f 	bl	80084cc <__malloc_unlock>
 800846e:	f104 000b 	add.w	r0, r4, #11
 8008472:	1d23      	adds	r3, r4, #4
 8008474:	f020 0007 	bic.w	r0, r0, #7
 8008478:	1ac2      	subs	r2, r0, r3
 800847a:	bf1c      	itt	ne
 800847c:	1a1b      	subne	r3, r3, r0
 800847e:	50a3      	strne	r3, [r4, r2]
 8008480:	e7af      	b.n	80083e2 <_malloc_r+0x22>
 8008482:	6862      	ldr	r2, [r4, #4]
 8008484:	42a3      	cmp	r3, r4
 8008486:	bf0c      	ite	eq
 8008488:	f8c8 2000 	streq.w	r2, [r8]
 800848c:	605a      	strne	r2, [r3, #4]
 800848e:	e7eb      	b.n	8008468 <_malloc_r+0xa8>
 8008490:	4623      	mov	r3, r4
 8008492:	6864      	ldr	r4, [r4, #4]
 8008494:	e7ae      	b.n	80083f4 <_malloc_r+0x34>
 8008496:	463c      	mov	r4, r7
 8008498:	687f      	ldr	r7, [r7, #4]
 800849a:	e7b6      	b.n	800840a <_malloc_r+0x4a>
 800849c:	461a      	mov	r2, r3
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	42a3      	cmp	r3, r4
 80084a2:	d1fb      	bne.n	800849c <_malloc_r+0xdc>
 80084a4:	2300      	movs	r3, #0
 80084a6:	6053      	str	r3, [r2, #4]
 80084a8:	e7de      	b.n	8008468 <_malloc_r+0xa8>
 80084aa:	230c      	movs	r3, #12
 80084ac:	6033      	str	r3, [r6, #0]
 80084ae:	4630      	mov	r0, r6
 80084b0:	f000 f80c 	bl	80084cc <__malloc_unlock>
 80084b4:	e794      	b.n	80083e0 <_malloc_r+0x20>
 80084b6:	6005      	str	r5, [r0, #0]
 80084b8:	e7d6      	b.n	8008468 <_malloc_r+0xa8>
 80084ba:	bf00      	nop
 80084bc:	2000a3a0 	.word	0x2000a3a0

080084c0 <__malloc_lock>:
 80084c0:	4801      	ldr	r0, [pc, #4]	@ (80084c8 <__malloc_lock+0x8>)
 80084c2:	f7ff bf00 	b.w	80082c6 <__retarget_lock_acquire_recursive>
 80084c6:	bf00      	nop
 80084c8:	2000a398 	.word	0x2000a398

080084cc <__malloc_unlock>:
 80084cc:	4801      	ldr	r0, [pc, #4]	@ (80084d4 <__malloc_unlock+0x8>)
 80084ce:	f7ff befb 	b.w	80082c8 <__retarget_lock_release_recursive>
 80084d2:	bf00      	nop
 80084d4:	2000a398 	.word	0x2000a398

080084d8 <__sfputc_r>:
 80084d8:	6893      	ldr	r3, [r2, #8]
 80084da:	3b01      	subs	r3, #1
 80084dc:	2b00      	cmp	r3, #0
 80084de:	b410      	push	{r4}
 80084e0:	6093      	str	r3, [r2, #8]
 80084e2:	da08      	bge.n	80084f6 <__sfputc_r+0x1e>
 80084e4:	6994      	ldr	r4, [r2, #24]
 80084e6:	42a3      	cmp	r3, r4
 80084e8:	db01      	blt.n	80084ee <__sfputc_r+0x16>
 80084ea:	290a      	cmp	r1, #10
 80084ec:	d103      	bne.n	80084f6 <__sfputc_r+0x1e>
 80084ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084f2:	f000 bb23 	b.w	8008b3c <__swbuf_r>
 80084f6:	6813      	ldr	r3, [r2, #0]
 80084f8:	1c58      	adds	r0, r3, #1
 80084fa:	6010      	str	r0, [r2, #0]
 80084fc:	7019      	strb	r1, [r3, #0]
 80084fe:	4608      	mov	r0, r1
 8008500:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008504:	4770      	bx	lr

08008506 <__sfputs_r>:
 8008506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008508:	4606      	mov	r6, r0
 800850a:	460f      	mov	r7, r1
 800850c:	4614      	mov	r4, r2
 800850e:	18d5      	adds	r5, r2, r3
 8008510:	42ac      	cmp	r4, r5
 8008512:	d101      	bne.n	8008518 <__sfputs_r+0x12>
 8008514:	2000      	movs	r0, #0
 8008516:	e007      	b.n	8008528 <__sfputs_r+0x22>
 8008518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800851c:	463a      	mov	r2, r7
 800851e:	4630      	mov	r0, r6
 8008520:	f7ff ffda 	bl	80084d8 <__sfputc_r>
 8008524:	1c43      	adds	r3, r0, #1
 8008526:	d1f3      	bne.n	8008510 <__sfputs_r+0xa>
 8008528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800852c <_vfiprintf_r>:
 800852c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008530:	460d      	mov	r5, r1
 8008532:	b09d      	sub	sp, #116	@ 0x74
 8008534:	4614      	mov	r4, r2
 8008536:	4698      	mov	r8, r3
 8008538:	4606      	mov	r6, r0
 800853a:	b118      	cbz	r0, 8008544 <_vfiprintf_r+0x18>
 800853c:	6a03      	ldr	r3, [r0, #32]
 800853e:	b90b      	cbnz	r3, 8008544 <_vfiprintf_r+0x18>
 8008540:	f7ff fdbc 	bl	80080bc <__sinit>
 8008544:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008546:	07d9      	lsls	r1, r3, #31
 8008548:	d405      	bmi.n	8008556 <_vfiprintf_r+0x2a>
 800854a:	89ab      	ldrh	r3, [r5, #12]
 800854c:	059a      	lsls	r2, r3, #22
 800854e:	d402      	bmi.n	8008556 <_vfiprintf_r+0x2a>
 8008550:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008552:	f7ff feb8 	bl	80082c6 <__retarget_lock_acquire_recursive>
 8008556:	89ab      	ldrh	r3, [r5, #12]
 8008558:	071b      	lsls	r3, r3, #28
 800855a:	d501      	bpl.n	8008560 <_vfiprintf_r+0x34>
 800855c:	692b      	ldr	r3, [r5, #16]
 800855e:	b99b      	cbnz	r3, 8008588 <_vfiprintf_r+0x5c>
 8008560:	4629      	mov	r1, r5
 8008562:	4630      	mov	r0, r6
 8008564:	f000 fb28 	bl	8008bb8 <__swsetup_r>
 8008568:	b170      	cbz	r0, 8008588 <_vfiprintf_r+0x5c>
 800856a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800856c:	07dc      	lsls	r4, r3, #31
 800856e:	d504      	bpl.n	800857a <_vfiprintf_r+0x4e>
 8008570:	f04f 30ff 	mov.w	r0, #4294967295
 8008574:	b01d      	add	sp, #116	@ 0x74
 8008576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800857a:	89ab      	ldrh	r3, [r5, #12]
 800857c:	0598      	lsls	r0, r3, #22
 800857e:	d4f7      	bmi.n	8008570 <_vfiprintf_r+0x44>
 8008580:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008582:	f7ff fea1 	bl	80082c8 <__retarget_lock_release_recursive>
 8008586:	e7f3      	b.n	8008570 <_vfiprintf_r+0x44>
 8008588:	2300      	movs	r3, #0
 800858a:	9309      	str	r3, [sp, #36]	@ 0x24
 800858c:	2320      	movs	r3, #32
 800858e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008592:	f8cd 800c 	str.w	r8, [sp, #12]
 8008596:	2330      	movs	r3, #48	@ 0x30
 8008598:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008748 <_vfiprintf_r+0x21c>
 800859c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085a0:	f04f 0901 	mov.w	r9, #1
 80085a4:	4623      	mov	r3, r4
 80085a6:	469a      	mov	sl, r3
 80085a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085ac:	b10a      	cbz	r2, 80085b2 <_vfiprintf_r+0x86>
 80085ae:	2a25      	cmp	r2, #37	@ 0x25
 80085b0:	d1f9      	bne.n	80085a6 <_vfiprintf_r+0x7a>
 80085b2:	ebba 0b04 	subs.w	fp, sl, r4
 80085b6:	d00b      	beq.n	80085d0 <_vfiprintf_r+0xa4>
 80085b8:	465b      	mov	r3, fp
 80085ba:	4622      	mov	r2, r4
 80085bc:	4629      	mov	r1, r5
 80085be:	4630      	mov	r0, r6
 80085c0:	f7ff ffa1 	bl	8008506 <__sfputs_r>
 80085c4:	3001      	adds	r0, #1
 80085c6:	f000 80a7 	beq.w	8008718 <_vfiprintf_r+0x1ec>
 80085ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085cc:	445a      	add	r2, fp
 80085ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80085d0:	f89a 3000 	ldrb.w	r3, [sl]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f000 809f 	beq.w	8008718 <_vfiprintf_r+0x1ec>
 80085da:	2300      	movs	r3, #0
 80085dc:	f04f 32ff 	mov.w	r2, #4294967295
 80085e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085e4:	f10a 0a01 	add.w	sl, sl, #1
 80085e8:	9304      	str	r3, [sp, #16]
 80085ea:	9307      	str	r3, [sp, #28]
 80085ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80085f2:	4654      	mov	r4, sl
 80085f4:	2205      	movs	r2, #5
 80085f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085fa:	4853      	ldr	r0, [pc, #332]	@ (8008748 <_vfiprintf_r+0x21c>)
 80085fc:	f7f7 fde8 	bl	80001d0 <memchr>
 8008600:	9a04      	ldr	r2, [sp, #16]
 8008602:	b9d8      	cbnz	r0, 800863c <_vfiprintf_r+0x110>
 8008604:	06d1      	lsls	r1, r2, #27
 8008606:	bf44      	itt	mi
 8008608:	2320      	movmi	r3, #32
 800860a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800860e:	0713      	lsls	r3, r2, #28
 8008610:	bf44      	itt	mi
 8008612:	232b      	movmi	r3, #43	@ 0x2b
 8008614:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008618:	f89a 3000 	ldrb.w	r3, [sl]
 800861c:	2b2a      	cmp	r3, #42	@ 0x2a
 800861e:	d015      	beq.n	800864c <_vfiprintf_r+0x120>
 8008620:	9a07      	ldr	r2, [sp, #28]
 8008622:	4654      	mov	r4, sl
 8008624:	2000      	movs	r0, #0
 8008626:	f04f 0c0a 	mov.w	ip, #10
 800862a:	4621      	mov	r1, r4
 800862c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008630:	3b30      	subs	r3, #48	@ 0x30
 8008632:	2b09      	cmp	r3, #9
 8008634:	d94b      	bls.n	80086ce <_vfiprintf_r+0x1a2>
 8008636:	b1b0      	cbz	r0, 8008666 <_vfiprintf_r+0x13a>
 8008638:	9207      	str	r2, [sp, #28]
 800863a:	e014      	b.n	8008666 <_vfiprintf_r+0x13a>
 800863c:	eba0 0308 	sub.w	r3, r0, r8
 8008640:	fa09 f303 	lsl.w	r3, r9, r3
 8008644:	4313      	orrs	r3, r2
 8008646:	9304      	str	r3, [sp, #16]
 8008648:	46a2      	mov	sl, r4
 800864a:	e7d2      	b.n	80085f2 <_vfiprintf_r+0xc6>
 800864c:	9b03      	ldr	r3, [sp, #12]
 800864e:	1d19      	adds	r1, r3, #4
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	9103      	str	r1, [sp, #12]
 8008654:	2b00      	cmp	r3, #0
 8008656:	bfbb      	ittet	lt
 8008658:	425b      	neglt	r3, r3
 800865a:	f042 0202 	orrlt.w	r2, r2, #2
 800865e:	9307      	strge	r3, [sp, #28]
 8008660:	9307      	strlt	r3, [sp, #28]
 8008662:	bfb8      	it	lt
 8008664:	9204      	strlt	r2, [sp, #16]
 8008666:	7823      	ldrb	r3, [r4, #0]
 8008668:	2b2e      	cmp	r3, #46	@ 0x2e
 800866a:	d10a      	bne.n	8008682 <_vfiprintf_r+0x156>
 800866c:	7863      	ldrb	r3, [r4, #1]
 800866e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008670:	d132      	bne.n	80086d8 <_vfiprintf_r+0x1ac>
 8008672:	9b03      	ldr	r3, [sp, #12]
 8008674:	1d1a      	adds	r2, r3, #4
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	9203      	str	r2, [sp, #12]
 800867a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800867e:	3402      	adds	r4, #2
 8008680:	9305      	str	r3, [sp, #20]
 8008682:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008758 <_vfiprintf_r+0x22c>
 8008686:	7821      	ldrb	r1, [r4, #0]
 8008688:	2203      	movs	r2, #3
 800868a:	4650      	mov	r0, sl
 800868c:	f7f7 fda0 	bl	80001d0 <memchr>
 8008690:	b138      	cbz	r0, 80086a2 <_vfiprintf_r+0x176>
 8008692:	9b04      	ldr	r3, [sp, #16]
 8008694:	eba0 000a 	sub.w	r0, r0, sl
 8008698:	2240      	movs	r2, #64	@ 0x40
 800869a:	4082      	lsls	r2, r0
 800869c:	4313      	orrs	r3, r2
 800869e:	3401      	adds	r4, #1
 80086a0:	9304      	str	r3, [sp, #16]
 80086a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086a6:	4829      	ldr	r0, [pc, #164]	@ (800874c <_vfiprintf_r+0x220>)
 80086a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086ac:	2206      	movs	r2, #6
 80086ae:	f7f7 fd8f 	bl	80001d0 <memchr>
 80086b2:	2800      	cmp	r0, #0
 80086b4:	d03f      	beq.n	8008736 <_vfiprintf_r+0x20a>
 80086b6:	4b26      	ldr	r3, [pc, #152]	@ (8008750 <_vfiprintf_r+0x224>)
 80086b8:	bb1b      	cbnz	r3, 8008702 <_vfiprintf_r+0x1d6>
 80086ba:	9b03      	ldr	r3, [sp, #12]
 80086bc:	3307      	adds	r3, #7
 80086be:	f023 0307 	bic.w	r3, r3, #7
 80086c2:	3308      	adds	r3, #8
 80086c4:	9303      	str	r3, [sp, #12]
 80086c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086c8:	443b      	add	r3, r7
 80086ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80086cc:	e76a      	b.n	80085a4 <_vfiprintf_r+0x78>
 80086ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80086d2:	460c      	mov	r4, r1
 80086d4:	2001      	movs	r0, #1
 80086d6:	e7a8      	b.n	800862a <_vfiprintf_r+0xfe>
 80086d8:	2300      	movs	r3, #0
 80086da:	3401      	adds	r4, #1
 80086dc:	9305      	str	r3, [sp, #20]
 80086de:	4619      	mov	r1, r3
 80086e0:	f04f 0c0a 	mov.w	ip, #10
 80086e4:	4620      	mov	r0, r4
 80086e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086ea:	3a30      	subs	r2, #48	@ 0x30
 80086ec:	2a09      	cmp	r2, #9
 80086ee:	d903      	bls.n	80086f8 <_vfiprintf_r+0x1cc>
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d0c6      	beq.n	8008682 <_vfiprintf_r+0x156>
 80086f4:	9105      	str	r1, [sp, #20]
 80086f6:	e7c4      	b.n	8008682 <_vfiprintf_r+0x156>
 80086f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80086fc:	4604      	mov	r4, r0
 80086fe:	2301      	movs	r3, #1
 8008700:	e7f0      	b.n	80086e4 <_vfiprintf_r+0x1b8>
 8008702:	ab03      	add	r3, sp, #12
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	462a      	mov	r2, r5
 8008708:	4b12      	ldr	r3, [pc, #72]	@ (8008754 <_vfiprintf_r+0x228>)
 800870a:	a904      	add	r1, sp, #16
 800870c:	4630      	mov	r0, r6
 800870e:	f3af 8000 	nop.w
 8008712:	4607      	mov	r7, r0
 8008714:	1c78      	adds	r0, r7, #1
 8008716:	d1d6      	bne.n	80086c6 <_vfiprintf_r+0x19a>
 8008718:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800871a:	07d9      	lsls	r1, r3, #31
 800871c:	d405      	bmi.n	800872a <_vfiprintf_r+0x1fe>
 800871e:	89ab      	ldrh	r3, [r5, #12]
 8008720:	059a      	lsls	r2, r3, #22
 8008722:	d402      	bmi.n	800872a <_vfiprintf_r+0x1fe>
 8008724:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008726:	f7ff fdcf 	bl	80082c8 <__retarget_lock_release_recursive>
 800872a:	89ab      	ldrh	r3, [r5, #12]
 800872c:	065b      	lsls	r3, r3, #25
 800872e:	f53f af1f 	bmi.w	8008570 <_vfiprintf_r+0x44>
 8008732:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008734:	e71e      	b.n	8008574 <_vfiprintf_r+0x48>
 8008736:	ab03      	add	r3, sp, #12
 8008738:	9300      	str	r3, [sp, #0]
 800873a:	462a      	mov	r2, r5
 800873c:	4b05      	ldr	r3, [pc, #20]	@ (8008754 <_vfiprintf_r+0x228>)
 800873e:	a904      	add	r1, sp, #16
 8008740:	4630      	mov	r0, r6
 8008742:	f000 f879 	bl	8008838 <_printf_i>
 8008746:	e7e4      	b.n	8008712 <_vfiprintf_r+0x1e6>
 8008748:	0800be30 	.word	0x0800be30
 800874c:	0800be3a 	.word	0x0800be3a
 8008750:	00000000 	.word	0x00000000
 8008754:	08008507 	.word	0x08008507
 8008758:	0800be36 	.word	0x0800be36

0800875c <_printf_common>:
 800875c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008760:	4616      	mov	r6, r2
 8008762:	4698      	mov	r8, r3
 8008764:	688a      	ldr	r2, [r1, #8]
 8008766:	690b      	ldr	r3, [r1, #16]
 8008768:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800876c:	4293      	cmp	r3, r2
 800876e:	bfb8      	it	lt
 8008770:	4613      	movlt	r3, r2
 8008772:	6033      	str	r3, [r6, #0]
 8008774:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008778:	4607      	mov	r7, r0
 800877a:	460c      	mov	r4, r1
 800877c:	b10a      	cbz	r2, 8008782 <_printf_common+0x26>
 800877e:	3301      	adds	r3, #1
 8008780:	6033      	str	r3, [r6, #0]
 8008782:	6823      	ldr	r3, [r4, #0]
 8008784:	0699      	lsls	r1, r3, #26
 8008786:	bf42      	ittt	mi
 8008788:	6833      	ldrmi	r3, [r6, #0]
 800878a:	3302      	addmi	r3, #2
 800878c:	6033      	strmi	r3, [r6, #0]
 800878e:	6825      	ldr	r5, [r4, #0]
 8008790:	f015 0506 	ands.w	r5, r5, #6
 8008794:	d106      	bne.n	80087a4 <_printf_common+0x48>
 8008796:	f104 0a19 	add.w	sl, r4, #25
 800879a:	68e3      	ldr	r3, [r4, #12]
 800879c:	6832      	ldr	r2, [r6, #0]
 800879e:	1a9b      	subs	r3, r3, r2
 80087a0:	42ab      	cmp	r3, r5
 80087a2:	dc26      	bgt.n	80087f2 <_printf_common+0x96>
 80087a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087a8:	6822      	ldr	r2, [r4, #0]
 80087aa:	3b00      	subs	r3, #0
 80087ac:	bf18      	it	ne
 80087ae:	2301      	movne	r3, #1
 80087b0:	0692      	lsls	r2, r2, #26
 80087b2:	d42b      	bmi.n	800880c <_printf_common+0xb0>
 80087b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087b8:	4641      	mov	r1, r8
 80087ba:	4638      	mov	r0, r7
 80087bc:	47c8      	blx	r9
 80087be:	3001      	adds	r0, #1
 80087c0:	d01e      	beq.n	8008800 <_printf_common+0xa4>
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	6922      	ldr	r2, [r4, #16]
 80087c6:	f003 0306 	and.w	r3, r3, #6
 80087ca:	2b04      	cmp	r3, #4
 80087cc:	bf02      	ittt	eq
 80087ce:	68e5      	ldreq	r5, [r4, #12]
 80087d0:	6833      	ldreq	r3, [r6, #0]
 80087d2:	1aed      	subeq	r5, r5, r3
 80087d4:	68a3      	ldr	r3, [r4, #8]
 80087d6:	bf0c      	ite	eq
 80087d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087dc:	2500      	movne	r5, #0
 80087de:	4293      	cmp	r3, r2
 80087e0:	bfc4      	itt	gt
 80087e2:	1a9b      	subgt	r3, r3, r2
 80087e4:	18ed      	addgt	r5, r5, r3
 80087e6:	2600      	movs	r6, #0
 80087e8:	341a      	adds	r4, #26
 80087ea:	42b5      	cmp	r5, r6
 80087ec:	d11a      	bne.n	8008824 <_printf_common+0xc8>
 80087ee:	2000      	movs	r0, #0
 80087f0:	e008      	b.n	8008804 <_printf_common+0xa8>
 80087f2:	2301      	movs	r3, #1
 80087f4:	4652      	mov	r2, sl
 80087f6:	4641      	mov	r1, r8
 80087f8:	4638      	mov	r0, r7
 80087fa:	47c8      	blx	r9
 80087fc:	3001      	adds	r0, #1
 80087fe:	d103      	bne.n	8008808 <_printf_common+0xac>
 8008800:	f04f 30ff 	mov.w	r0, #4294967295
 8008804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008808:	3501      	adds	r5, #1
 800880a:	e7c6      	b.n	800879a <_printf_common+0x3e>
 800880c:	18e1      	adds	r1, r4, r3
 800880e:	1c5a      	adds	r2, r3, #1
 8008810:	2030      	movs	r0, #48	@ 0x30
 8008812:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008816:	4422      	add	r2, r4
 8008818:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800881c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008820:	3302      	adds	r3, #2
 8008822:	e7c7      	b.n	80087b4 <_printf_common+0x58>
 8008824:	2301      	movs	r3, #1
 8008826:	4622      	mov	r2, r4
 8008828:	4641      	mov	r1, r8
 800882a:	4638      	mov	r0, r7
 800882c:	47c8      	blx	r9
 800882e:	3001      	adds	r0, #1
 8008830:	d0e6      	beq.n	8008800 <_printf_common+0xa4>
 8008832:	3601      	adds	r6, #1
 8008834:	e7d9      	b.n	80087ea <_printf_common+0x8e>
	...

08008838 <_printf_i>:
 8008838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800883c:	7e0f      	ldrb	r7, [r1, #24]
 800883e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008840:	2f78      	cmp	r7, #120	@ 0x78
 8008842:	4691      	mov	r9, r2
 8008844:	4680      	mov	r8, r0
 8008846:	460c      	mov	r4, r1
 8008848:	469a      	mov	sl, r3
 800884a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800884e:	d807      	bhi.n	8008860 <_printf_i+0x28>
 8008850:	2f62      	cmp	r7, #98	@ 0x62
 8008852:	d80a      	bhi.n	800886a <_printf_i+0x32>
 8008854:	2f00      	cmp	r7, #0
 8008856:	f000 80d2 	beq.w	80089fe <_printf_i+0x1c6>
 800885a:	2f58      	cmp	r7, #88	@ 0x58
 800885c:	f000 80b9 	beq.w	80089d2 <_printf_i+0x19a>
 8008860:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008864:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008868:	e03a      	b.n	80088e0 <_printf_i+0xa8>
 800886a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800886e:	2b15      	cmp	r3, #21
 8008870:	d8f6      	bhi.n	8008860 <_printf_i+0x28>
 8008872:	a101      	add	r1, pc, #4	@ (adr r1, 8008878 <_printf_i+0x40>)
 8008874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008878:	080088d1 	.word	0x080088d1
 800887c:	080088e5 	.word	0x080088e5
 8008880:	08008861 	.word	0x08008861
 8008884:	08008861 	.word	0x08008861
 8008888:	08008861 	.word	0x08008861
 800888c:	08008861 	.word	0x08008861
 8008890:	080088e5 	.word	0x080088e5
 8008894:	08008861 	.word	0x08008861
 8008898:	08008861 	.word	0x08008861
 800889c:	08008861 	.word	0x08008861
 80088a0:	08008861 	.word	0x08008861
 80088a4:	080089e5 	.word	0x080089e5
 80088a8:	0800890f 	.word	0x0800890f
 80088ac:	0800899f 	.word	0x0800899f
 80088b0:	08008861 	.word	0x08008861
 80088b4:	08008861 	.word	0x08008861
 80088b8:	08008a07 	.word	0x08008a07
 80088bc:	08008861 	.word	0x08008861
 80088c0:	0800890f 	.word	0x0800890f
 80088c4:	08008861 	.word	0x08008861
 80088c8:	08008861 	.word	0x08008861
 80088cc:	080089a7 	.word	0x080089a7
 80088d0:	6833      	ldr	r3, [r6, #0]
 80088d2:	1d1a      	adds	r2, r3, #4
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	6032      	str	r2, [r6, #0]
 80088d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80088e0:	2301      	movs	r3, #1
 80088e2:	e09d      	b.n	8008a20 <_printf_i+0x1e8>
 80088e4:	6833      	ldr	r3, [r6, #0]
 80088e6:	6820      	ldr	r0, [r4, #0]
 80088e8:	1d19      	adds	r1, r3, #4
 80088ea:	6031      	str	r1, [r6, #0]
 80088ec:	0606      	lsls	r6, r0, #24
 80088ee:	d501      	bpl.n	80088f4 <_printf_i+0xbc>
 80088f0:	681d      	ldr	r5, [r3, #0]
 80088f2:	e003      	b.n	80088fc <_printf_i+0xc4>
 80088f4:	0645      	lsls	r5, r0, #25
 80088f6:	d5fb      	bpl.n	80088f0 <_printf_i+0xb8>
 80088f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80088fc:	2d00      	cmp	r5, #0
 80088fe:	da03      	bge.n	8008908 <_printf_i+0xd0>
 8008900:	232d      	movs	r3, #45	@ 0x2d
 8008902:	426d      	negs	r5, r5
 8008904:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008908:	4859      	ldr	r0, [pc, #356]	@ (8008a70 <_printf_i+0x238>)
 800890a:	230a      	movs	r3, #10
 800890c:	e011      	b.n	8008932 <_printf_i+0xfa>
 800890e:	6821      	ldr	r1, [r4, #0]
 8008910:	6833      	ldr	r3, [r6, #0]
 8008912:	0608      	lsls	r0, r1, #24
 8008914:	f853 5b04 	ldr.w	r5, [r3], #4
 8008918:	d402      	bmi.n	8008920 <_printf_i+0xe8>
 800891a:	0649      	lsls	r1, r1, #25
 800891c:	bf48      	it	mi
 800891e:	b2ad      	uxthmi	r5, r5
 8008920:	2f6f      	cmp	r7, #111	@ 0x6f
 8008922:	4853      	ldr	r0, [pc, #332]	@ (8008a70 <_printf_i+0x238>)
 8008924:	6033      	str	r3, [r6, #0]
 8008926:	bf14      	ite	ne
 8008928:	230a      	movne	r3, #10
 800892a:	2308      	moveq	r3, #8
 800892c:	2100      	movs	r1, #0
 800892e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008932:	6866      	ldr	r6, [r4, #4]
 8008934:	60a6      	str	r6, [r4, #8]
 8008936:	2e00      	cmp	r6, #0
 8008938:	bfa2      	ittt	ge
 800893a:	6821      	ldrge	r1, [r4, #0]
 800893c:	f021 0104 	bicge.w	r1, r1, #4
 8008940:	6021      	strge	r1, [r4, #0]
 8008942:	b90d      	cbnz	r5, 8008948 <_printf_i+0x110>
 8008944:	2e00      	cmp	r6, #0
 8008946:	d04b      	beq.n	80089e0 <_printf_i+0x1a8>
 8008948:	4616      	mov	r6, r2
 800894a:	fbb5 f1f3 	udiv	r1, r5, r3
 800894e:	fb03 5711 	mls	r7, r3, r1, r5
 8008952:	5dc7      	ldrb	r7, [r0, r7]
 8008954:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008958:	462f      	mov	r7, r5
 800895a:	42bb      	cmp	r3, r7
 800895c:	460d      	mov	r5, r1
 800895e:	d9f4      	bls.n	800894a <_printf_i+0x112>
 8008960:	2b08      	cmp	r3, #8
 8008962:	d10b      	bne.n	800897c <_printf_i+0x144>
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	07df      	lsls	r7, r3, #31
 8008968:	d508      	bpl.n	800897c <_printf_i+0x144>
 800896a:	6923      	ldr	r3, [r4, #16]
 800896c:	6861      	ldr	r1, [r4, #4]
 800896e:	4299      	cmp	r1, r3
 8008970:	bfde      	ittt	le
 8008972:	2330      	movle	r3, #48	@ 0x30
 8008974:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008978:	f106 36ff 	addle.w	r6, r6, #4294967295
 800897c:	1b92      	subs	r2, r2, r6
 800897e:	6122      	str	r2, [r4, #16]
 8008980:	f8cd a000 	str.w	sl, [sp]
 8008984:	464b      	mov	r3, r9
 8008986:	aa03      	add	r2, sp, #12
 8008988:	4621      	mov	r1, r4
 800898a:	4640      	mov	r0, r8
 800898c:	f7ff fee6 	bl	800875c <_printf_common>
 8008990:	3001      	adds	r0, #1
 8008992:	d14a      	bne.n	8008a2a <_printf_i+0x1f2>
 8008994:	f04f 30ff 	mov.w	r0, #4294967295
 8008998:	b004      	add	sp, #16
 800899a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	f043 0320 	orr.w	r3, r3, #32
 80089a4:	6023      	str	r3, [r4, #0]
 80089a6:	4833      	ldr	r0, [pc, #204]	@ (8008a74 <_printf_i+0x23c>)
 80089a8:	2778      	movs	r7, #120	@ 0x78
 80089aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089ae:	6823      	ldr	r3, [r4, #0]
 80089b0:	6831      	ldr	r1, [r6, #0]
 80089b2:	061f      	lsls	r7, r3, #24
 80089b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80089b8:	d402      	bmi.n	80089c0 <_printf_i+0x188>
 80089ba:	065f      	lsls	r7, r3, #25
 80089bc:	bf48      	it	mi
 80089be:	b2ad      	uxthmi	r5, r5
 80089c0:	6031      	str	r1, [r6, #0]
 80089c2:	07d9      	lsls	r1, r3, #31
 80089c4:	bf44      	itt	mi
 80089c6:	f043 0320 	orrmi.w	r3, r3, #32
 80089ca:	6023      	strmi	r3, [r4, #0]
 80089cc:	b11d      	cbz	r5, 80089d6 <_printf_i+0x19e>
 80089ce:	2310      	movs	r3, #16
 80089d0:	e7ac      	b.n	800892c <_printf_i+0xf4>
 80089d2:	4827      	ldr	r0, [pc, #156]	@ (8008a70 <_printf_i+0x238>)
 80089d4:	e7e9      	b.n	80089aa <_printf_i+0x172>
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	f023 0320 	bic.w	r3, r3, #32
 80089dc:	6023      	str	r3, [r4, #0]
 80089de:	e7f6      	b.n	80089ce <_printf_i+0x196>
 80089e0:	4616      	mov	r6, r2
 80089e2:	e7bd      	b.n	8008960 <_printf_i+0x128>
 80089e4:	6833      	ldr	r3, [r6, #0]
 80089e6:	6825      	ldr	r5, [r4, #0]
 80089e8:	6961      	ldr	r1, [r4, #20]
 80089ea:	1d18      	adds	r0, r3, #4
 80089ec:	6030      	str	r0, [r6, #0]
 80089ee:	062e      	lsls	r6, r5, #24
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	d501      	bpl.n	80089f8 <_printf_i+0x1c0>
 80089f4:	6019      	str	r1, [r3, #0]
 80089f6:	e002      	b.n	80089fe <_printf_i+0x1c6>
 80089f8:	0668      	lsls	r0, r5, #25
 80089fa:	d5fb      	bpl.n	80089f4 <_printf_i+0x1bc>
 80089fc:	8019      	strh	r1, [r3, #0]
 80089fe:	2300      	movs	r3, #0
 8008a00:	6123      	str	r3, [r4, #16]
 8008a02:	4616      	mov	r6, r2
 8008a04:	e7bc      	b.n	8008980 <_printf_i+0x148>
 8008a06:	6833      	ldr	r3, [r6, #0]
 8008a08:	1d1a      	adds	r2, r3, #4
 8008a0a:	6032      	str	r2, [r6, #0]
 8008a0c:	681e      	ldr	r6, [r3, #0]
 8008a0e:	6862      	ldr	r2, [r4, #4]
 8008a10:	2100      	movs	r1, #0
 8008a12:	4630      	mov	r0, r6
 8008a14:	f7f7 fbdc 	bl	80001d0 <memchr>
 8008a18:	b108      	cbz	r0, 8008a1e <_printf_i+0x1e6>
 8008a1a:	1b80      	subs	r0, r0, r6
 8008a1c:	6060      	str	r0, [r4, #4]
 8008a1e:	6863      	ldr	r3, [r4, #4]
 8008a20:	6123      	str	r3, [r4, #16]
 8008a22:	2300      	movs	r3, #0
 8008a24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a28:	e7aa      	b.n	8008980 <_printf_i+0x148>
 8008a2a:	6923      	ldr	r3, [r4, #16]
 8008a2c:	4632      	mov	r2, r6
 8008a2e:	4649      	mov	r1, r9
 8008a30:	4640      	mov	r0, r8
 8008a32:	47d0      	blx	sl
 8008a34:	3001      	adds	r0, #1
 8008a36:	d0ad      	beq.n	8008994 <_printf_i+0x15c>
 8008a38:	6823      	ldr	r3, [r4, #0]
 8008a3a:	079b      	lsls	r3, r3, #30
 8008a3c:	d413      	bmi.n	8008a66 <_printf_i+0x22e>
 8008a3e:	68e0      	ldr	r0, [r4, #12]
 8008a40:	9b03      	ldr	r3, [sp, #12]
 8008a42:	4298      	cmp	r0, r3
 8008a44:	bfb8      	it	lt
 8008a46:	4618      	movlt	r0, r3
 8008a48:	e7a6      	b.n	8008998 <_printf_i+0x160>
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	4632      	mov	r2, r6
 8008a4e:	4649      	mov	r1, r9
 8008a50:	4640      	mov	r0, r8
 8008a52:	47d0      	blx	sl
 8008a54:	3001      	adds	r0, #1
 8008a56:	d09d      	beq.n	8008994 <_printf_i+0x15c>
 8008a58:	3501      	adds	r5, #1
 8008a5a:	68e3      	ldr	r3, [r4, #12]
 8008a5c:	9903      	ldr	r1, [sp, #12]
 8008a5e:	1a5b      	subs	r3, r3, r1
 8008a60:	42ab      	cmp	r3, r5
 8008a62:	dcf2      	bgt.n	8008a4a <_printf_i+0x212>
 8008a64:	e7eb      	b.n	8008a3e <_printf_i+0x206>
 8008a66:	2500      	movs	r5, #0
 8008a68:	f104 0619 	add.w	r6, r4, #25
 8008a6c:	e7f5      	b.n	8008a5a <_printf_i+0x222>
 8008a6e:	bf00      	nop
 8008a70:	0800be41 	.word	0x0800be41
 8008a74:	0800be52 	.word	0x0800be52

08008a78 <__swhatbuf_r>:
 8008a78:	b570      	push	{r4, r5, r6, lr}
 8008a7a:	460c      	mov	r4, r1
 8008a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a80:	2900      	cmp	r1, #0
 8008a82:	b096      	sub	sp, #88	@ 0x58
 8008a84:	4615      	mov	r5, r2
 8008a86:	461e      	mov	r6, r3
 8008a88:	da0d      	bge.n	8008aa6 <__swhatbuf_r+0x2e>
 8008a8a:	89a3      	ldrh	r3, [r4, #12]
 8008a8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008a90:	f04f 0100 	mov.w	r1, #0
 8008a94:	bf14      	ite	ne
 8008a96:	2340      	movne	r3, #64	@ 0x40
 8008a98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008a9c:	2000      	movs	r0, #0
 8008a9e:	6031      	str	r1, [r6, #0]
 8008aa0:	602b      	str	r3, [r5, #0]
 8008aa2:	b016      	add	sp, #88	@ 0x58
 8008aa4:	bd70      	pop	{r4, r5, r6, pc}
 8008aa6:	466a      	mov	r2, sp
 8008aa8:	f000 f8dc 	bl	8008c64 <_fstat_r>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	dbec      	blt.n	8008a8a <__swhatbuf_r+0x12>
 8008ab0:	9901      	ldr	r1, [sp, #4]
 8008ab2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008ab6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008aba:	4259      	negs	r1, r3
 8008abc:	4159      	adcs	r1, r3
 8008abe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ac2:	e7eb      	b.n	8008a9c <__swhatbuf_r+0x24>

08008ac4 <__smakebuf_r>:
 8008ac4:	898b      	ldrh	r3, [r1, #12]
 8008ac6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ac8:	079d      	lsls	r5, r3, #30
 8008aca:	4606      	mov	r6, r0
 8008acc:	460c      	mov	r4, r1
 8008ace:	d507      	bpl.n	8008ae0 <__smakebuf_r+0x1c>
 8008ad0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008ad4:	6023      	str	r3, [r4, #0]
 8008ad6:	6123      	str	r3, [r4, #16]
 8008ad8:	2301      	movs	r3, #1
 8008ada:	6163      	str	r3, [r4, #20]
 8008adc:	b003      	add	sp, #12
 8008ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ae0:	ab01      	add	r3, sp, #4
 8008ae2:	466a      	mov	r2, sp
 8008ae4:	f7ff ffc8 	bl	8008a78 <__swhatbuf_r>
 8008ae8:	9f00      	ldr	r7, [sp, #0]
 8008aea:	4605      	mov	r5, r0
 8008aec:	4639      	mov	r1, r7
 8008aee:	4630      	mov	r0, r6
 8008af0:	f7ff fc66 	bl	80083c0 <_malloc_r>
 8008af4:	b948      	cbnz	r0, 8008b0a <__smakebuf_r+0x46>
 8008af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008afa:	059a      	lsls	r2, r3, #22
 8008afc:	d4ee      	bmi.n	8008adc <__smakebuf_r+0x18>
 8008afe:	f023 0303 	bic.w	r3, r3, #3
 8008b02:	f043 0302 	orr.w	r3, r3, #2
 8008b06:	81a3      	strh	r3, [r4, #12]
 8008b08:	e7e2      	b.n	8008ad0 <__smakebuf_r+0xc>
 8008b0a:	89a3      	ldrh	r3, [r4, #12]
 8008b0c:	6020      	str	r0, [r4, #0]
 8008b0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b12:	81a3      	strh	r3, [r4, #12]
 8008b14:	9b01      	ldr	r3, [sp, #4]
 8008b16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b1a:	b15b      	cbz	r3, 8008b34 <__smakebuf_r+0x70>
 8008b1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b20:	4630      	mov	r0, r6
 8008b22:	f000 f8b1 	bl	8008c88 <_isatty_r>
 8008b26:	b128      	cbz	r0, 8008b34 <__smakebuf_r+0x70>
 8008b28:	89a3      	ldrh	r3, [r4, #12]
 8008b2a:	f023 0303 	bic.w	r3, r3, #3
 8008b2e:	f043 0301 	orr.w	r3, r3, #1
 8008b32:	81a3      	strh	r3, [r4, #12]
 8008b34:	89a3      	ldrh	r3, [r4, #12]
 8008b36:	431d      	orrs	r5, r3
 8008b38:	81a5      	strh	r5, [r4, #12]
 8008b3a:	e7cf      	b.n	8008adc <__smakebuf_r+0x18>

08008b3c <__swbuf_r>:
 8008b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3e:	460e      	mov	r6, r1
 8008b40:	4614      	mov	r4, r2
 8008b42:	4605      	mov	r5, r0
 8008b44:	b118      	cbz	r0, 8008b4e <__swbuf_r+0x12>
 8008b46:	6a03      	ldr	r3, [r0, #32]
 8008b48:	b90b      	cbnz	r3, 8008b4e <__swbuf_r+0x12>
 8008b4a:	f7ff fab7 	bl	80080bc <__sinit>
 8008b4e:	69a3      	ldr	r3, [r4, #24]
 8008b50:	60a3      	str	r3, [r4, #8]
 8008b52:	89a3      	ldrh	r3, [r4, #12]
 8008b54:	071a      	lsls	r2, r3, #28
 8008b56:	d501      	bpl.n	8008b5c <__swbuf_r+0x20>
 8008b58:	6923      	ldr	r3, [r4, #16]
 8008b5a:	b943      	cbnz	r3, 8008b6e <__swbuf_r+0x32>
 8008b5c:	4621      	mov	r1, r4
 8008b5e:	4628      	mov	r0, r5
 8008b60:	f000 f82a 	bl	8008bb8 <__swsetup_r>
 8008b64:	b118      	cbz	r0, 8008b6e <__swbuf_r+0x32>
 8008b66:	f04f 37ff 	mov.w	r7, #4294967295
 8008b6a:	4638      	mov	r0, r7
 8008b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b6e:	6823      	ldr	r3, [r4, #0]
 8008b70:	6922      	ldr	r2, [r4, #16]
 8008b72:	1a98      	subs	r0, r3, r2
 8008b74:	6963      	ldr	r3, [r4, #20]
 8008b76:	b2f6      	uxtb	r6, r6
 8008b78:	4283      	cmp	r3, r0
 8008b7a:	4637      	mov	r7, r6
 8008b7c:	dc05      	bgt.n	8008b8a <__swbuf_r+0x4e>
 8008b7e:	4621      	mov	r1, r4
 8008b80:	4628      	mov	r0, r5
 8008b82:	f7ff f9e7 	bl	8007f54 <_fflush_r>
 8008b86:	2800      	cmp	r0, #0
 8008b88:	d1ed      	bne.n	8008b66 <__swbuf_r+0x2a>
 8008b8a:	68a3      	ldr	r3, [r4, #8]
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	60a3      	str	r3, [r4, #8]
 8008b90:	6823      	ldr	r3, [r4, #0]
 8008b92:	1c5a      	adds	r2, r3, #1
 8008b94:	6022      	str	r2, [r4, #0]
 8008b96:	701e      	strb	r6, [r3, #0]
 8008b98:	6962      	ldr	r2, [r4, #20]
 8008b9a:	1c43      	adds	r3, r0, #1
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d004      	beq.n	8008baa <__swbuf_r+0x6e>
 8008ba0:	89a3      	ldrh	r3, [r4, #12]
 8008ba2:	07db      	lsls	r3, r3, #31
 8008ba4:	d5e1      	bpl.n	8008b6a <__swbuf_r+0x2e>
 8008ba6:	2e0a      	cmp	r6, #10
 8008ba8:	d1df      	bne.n	8008b6a <__swbuf_r+0x2e>
 8008baa:	4621      	mov	r1, r4
 8008bac:	4628      	mov	r0, r5
 8008bae:	f7ff f9d1 	bl	8007f54 <_fflush_r>
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	d0d9      	beq.n	8008b6a <__swbuf_r+0x2e>
 8008bb6:	e7d6      	b.n	8008b66 <__swbuf_r+0x2a>

08008bb8 <__swsetup_r>:
 8008bb8:	b538      	push	{r3, r4, r5, lr}
 8008bba:	4b29      	ldr	r3, [pc, #164]	@ (8008c60 <__swsetup_r+0xa8>)
 8008bbc:	4605      	mov	r5, r0
 8008bbe:	6818      	ldr	r0, [r3, #0]
 8008bc0:	460c      	mov	r4, r1
 8008bc2:	b118      	cbz	r0, 8008bcc <__swsetup_r+0x14>
 8008bc4:	6a03      	ldr	r3, [r0, #32]
 8008bc6:	b90b      	cbnz	r3, 8008bcc <__swsetup_r+0x14>
 8008bc8:	f7ff fa78 	bl	80080bc <__sinit>
 8008bcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bd0:	0719      	lsls	r1, r3, #28
 8008bd2:	d422      	bmi.n	8008c1a <__swsetup_r+0x62>
 8008bd4:	06da      	lsls	r2, r3, #27
 8008bd6:	d407      	bmi.n	8008be8 <__swsetup_r+0x30>
 8008bd8:	2209      	movs	r2, #9
 8008bda:	602a      	str	r2, [r5, #0]
 8008bdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008be0:	81a3      	strh	r3, [r4, #12]
 8008be2:	f04f 30ff 	mov.w	r0, #4294967295
 8008be6:	e033      	b.n	8008c50 <__swsetup_r+0x98>
 8008be8:	0758      	lsls	r0, r3, #29
 8008bea:	d512      	bpl.n	8008c12 <__swsetup_r+0x5a>
 8008bec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008bee:	b141      	cbz	r1, 8008c02 <__swsetup_r+0x4a>
 8008bf0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008bf4:	4299      	cmp	r1, r3
 8008bf6:	d002      	beq.n	8008bfe <__swsetup_r+0x46>
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	f7ff fb75 	bl	80082e8 <_free_r>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c02:	89a3      	ldrh	r3, [r4, #12]
 8008c04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008c08:	81a3      	strh	r3, [r4, #12]
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	6063      	str	r3, [r4, #4]
 8008c0e:	6923      	ldr	r3, [r4, #16]
 8008c10:	6023      	str	r3, [r4, #0]
 8008c12:	89a3      	ldrh	r3, [r4, #12]
 8008c14:	f043 0308 	orr.w	r3, r3, #8
 8008c18:	81a3      	strh	r3, [r4, #12]
 8008c1a:	6923      	ldr	r3, [r4, #16]
 8008c1c:	b94b      	cbnz	r3, 8008c32 <__swsetup_r+0x7a>
 8008c1e:	89a3      	ldrh	r3, [r4, #12]
 8008c20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008c24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c28:	d003      	beq.n	8008c32 <__swsetup_r+0x7a>
 8008c2a:	4621      	mov	r1, r4
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	f7ff ff49 	bl	8008ac4 <__smakebuf_r>
 8008c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c36:	f013 0201 	ands.w	r2, r3, #1
 8008c3a:	d00a      	beq.n	8008c52 <__swsetup_r+0x9a>
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	60a2      	str	r2, [r4, #8]
 8008c40:	6962      	ldr	r2, [r4, #20]
 8008c42:	4252      	negs	r2, r2
 8008c44:	61a2      	str	r2, [r4, #24]
 8008c46:	6922      	ldr	r2, [r4, #16]
 8008c48:	b942      	cbnz	r2, 8008c5c <__swsetup_r+0xa4>
 8008c4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008c4e:	d1c5      	bne.n	8008bdc <__swsetup_r+0x24>
 8008c50:	bd38      	pop	{r3, r4, r5, pc}
 8008c52:	0799      	lsls	r1, r3, #30
 8008c54:	bf58      	it	pl
 8008c56:	6962      	ldrpl	r2, [r4, #20]
 8008c58:	60a2      	str	r2, [r4, #8]
 8008c5a:	e7f4      	b.n	8008c46 <__swsetup_r+0x8e>
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	e7f7      	b.n	8008c50 <__swsetup_r+0x98>
 8008c60:	20000038 	.word	0x20000038

08008c64 <_fstat_r>:
 8008c64:	b538      	push	{r3, r4, r5, lr}
 8008c66:	4d07      	ldr	r5, [pc, #28]	@ (8008c84 <_fstat_r+0x20>)
 8008c68:	2300      	movs	r3, #0
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	4608      	mov	r0, r1
 8008c6e:	4611      	mov	r1, r2
 8008c70:	602b      	str	r3, [r5, #0]
 8008c72:	f7f9 fa26 	bl	80020c2 <_fstat>
 8008c76:	1c43      	adds	r3, r0, #1
 8008c78:	d102      	bne.n	8008c80 <_fstat_r+0x1c>
 8008c7a:	682b      	ldr	r3, [r5, #0]
 8008c7c:	b103      	cbz	r3, 8008c80 <_fstat_r+0x1c>
 8008c7e:	6023      	str	r3, [r4, #0]
 8008c80:	bd38      	pop	{r3, r4, r5, pc}
 8008c82:	bf00      	nop
 8008c84:	2000a394 	.word	0x2000a394

08008c88 <_isatty_r>:
 8008c88:	b538      	push	{r3, r4, r5, lr}
 8008c8a:	4d06      	ldr	r5, [pc, #24]	@ (8008ca4 <_isatty_r+0x1c>)
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	4604      	mov	r4, r0
 8008c90:	4608      	mov	r0, r1
 8008c92:	602b      	str	r3, [r5, #0]
 8008c94:	f7f9 fa25 	bl	80020e2 <_isatty>
 8008c98:	1c43      	adds	r3, r0, #1
 8008c9a:	d102      	bne.n	8008ca2 <_isatty_r+0x1a>
 8008c9c:	682b      	ldr	r3, [r5, #0]
 8008c9e:	b103      	cbz	r3, 8008ca2 <_isatty_r+0x1a>
 8008ca0:	6023      	str	r3, [r4, #0]
 8008ca2:	bd38      	pop	{r3, r4, r5, pc}
 8008ca4:	2000a394 	.word	0x2000a394

08008ca8 <_sbrk_r>:
 8008ca8:	b538      	push	{r3, r4, r5, lr}
 8008caa:	4d06      	ldr	r5, [pc, #24]	@ (8008cc4 <_sbrk_r+0x1c>)
 8008cac:	2300      	movs	r3, #0
 8008cae:	4604      	mov	r4, r0
 8008cb0:	4608      	mov	r0, r1
 8008cb2:	602b      	str	r3, [r5, #0]
 8008cb4:	f7f9 fa2e 	bl	8002114 <_sbrk>
 8008cb8:	1c43      	adds	r3, r0, #1
 8008cba:	d102      	bne.n	8008cc2 <_sbrk_r+0x1a>
 8008cbc:	682b      	ldr	r3, [r5, #0]
 8008cbe:	b103      	cbz	r3, 8008cc2 <_sbrk_r+0x1a>
 8008cc0:	6023      	str	r3, [r4, #0]
 8008cc2:	bd38      	pop	{r3, r4, r5, pc}
 8008cc4:	2000a394 	.word	0x2000a394

08008cc8 <_init>:
 8008cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cca:	bf00      	nop
 8008ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cce:	bc08      	pop	{r3}
 8008cd0:	469e      	mov	lr, r3
 8008cd2:	4770      	bx	lr

08008cd4 <_fini>:
 8008cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd6:	bf00      	nop
 8008cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cda:	bc08      	pop	{r3}
 8008cdc:	469e      	mov	lr, r3
 8008cde:	4770      	bx	lr
