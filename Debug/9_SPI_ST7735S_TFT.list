
9_SPI_ST7735S_TFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032fc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030c4  08003484  08003484  00004484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006548  08006548  00008014  2**0
                  CONTENTS
  4 .ARM          00000000  08006548  08006548  00008014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006548  08006548  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006548  08006548  00007548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800654c  0800654c  0000754c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08006550  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a0cc  20000014  08006564  00008014  2**2
                  ALLOC
 10 ._user_heap_stack 00002200  2000a0e0  08006564  000080e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4fb  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028cb  00000000  00000000  0001453f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  00016e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f2  00000000  00000000  00017a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000260e8  00000000  00000000  00018312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc69  00000000  00000000  0003e3fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e68b5  00000000  00000000  0004e063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00134918  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002df0  00000000  00000000  0013495c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0013774c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800346c 	.word	0x0800346c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	0800346c 	.word	0x0800346c

080001c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80001ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000200 <MX_DMA_Init+0x38>)
 80001d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80001d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000200 <MX_DMA_Init+0x38>)
 80001d4:	f043 0301 	orr.w	r3, r3, #1
 80001d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80001da:	4b09      	ldr	r3, [pc, #36]	@ (8000200 <MX_DMA_Init+0x38>)
 80001dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80001de:	f003 0301 	and.w	r3, r3, #1
 80001e2:	607b      	str	r3, [r7, #4]
 80001e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80001e6:	2200      	movs	r2, #0
 80001e8:	2100      	movs	r1, #0
 80001ea:	200f      	movs	r0, #15
 80001ec:	f000 fd29 	bl	8000c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80001f0:	200f      	movs	r0, #15
 80001f2:	f000 fd42 	bl	8000c7a <HAL_NVIC_EnableIRQ>

}
 80001f6:	bf00      	nop
 80001f8:	3708      	adds	r7, #8
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	40021000 	.word	0x40021000

08000204 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b088      	sub	sp, #32
 8000208:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800020a:	f107 030c 	add.w	r3, r7, #12
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]
 8000218:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800021a:	4b21      	ldr	r3, [pc, #132]	@ (80002a0 <MX_GPIO_Init+0x9c>)
 800021c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800021e:	4a20      	ldr	r2, [pc, #128]	@ (80002a0 <MX_GPIO_Init+0x9c>)
 8000220:	f043 0304 	orr.w	r3, r3, #4
 8000224:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000226:	4b1e      	ldr	r3, [pc, #120]	@ (80002a0 <MX_GPIO_Init+0x9c>)
 8000228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800022a:	f003 0304 	and.w	r3, r3, #4
 800022e:	60bb      	str	r3, [r7, #8]
 8000230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000232:	4b1b      	ldr	r3, [pc, #108]	@ (80002a0 <MX_GPIO_Init+0x9c>)
 8000234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000236:	4a1a      	ldr	r2, [pc, #104]	@ (80002a0 <MX_GPIO_Init+0x9c>)
 8000238:	f043 0302 	orr.w	r3, r3, #2
 800023c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800023e:	4b18      	ldr	r3, [pc, #96]	@ (80002a0 <MX_GPIO_Init+0x9c>)
 8000240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000242:	f003 0302 	and.w	r3, r3, #2
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800024a:	4b15      	ldr	r3, [pc, #84]	@ (80002a0 <MX_GPIO_Init+0x9c>)
 800024c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800024e:	4a14      	ldr	r2, [pc, #80]	@ (80002a0 <MX_GPIO_Init+0x9c>)
 8000250:	f043 0301 	orr.w	r3, r3, #1
 8000254:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000256:	4b12      	ldr	r3, [pc, #72]	@ (80002a0 <MX_GPIO_Init+0x9c>)
 8000258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800025a:	f003 0301 	and.w	r3, r3, #1
 800025e:	603b      	str	r3, [r7, #0]
 8000260:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	f640 0104 	movw	r1, #2052	@ 0x804
 8000268:	480e      	ldr	r0, [pc, #56]	@ (80002a4 <MX_GPIO_Init+0xa0>)
 800026a:	f001 f833 	bl	80012d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800026e:	2201      	movs	r2, #1
 8000270:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000274:	480b      	ldr	r0, [pc, #44]	@ (80002a4 <MX_GPIO_Init+0xa0>)
 8000276:	f001 f82d 	bl	80012d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 800027a:	f641 0304 	movw	r3, #6148	@ 0x1804
 800027e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000280:	2301      	movs	r3, #1
 8000282:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000284:	2300      	movs	r3, #0
 8000286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000288:	2300      	movs	r3, #0
 800028a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800028c:	f107 030c 	add.w	r3, r7, #12
 8000290:	4619      	mov	r1, r3
 8000292:	4804      	ldr	r0, [pc, #16]	@ (80002a4 <MX_GPIO_Init+0xa0>)
 8000294:	f000 fe74 	bl	8000f80 <HAL_GPIO_Init>

}
 8000298:	bf00      	nop
 800029a:	3720      	adds	r7, #32
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40021000 	.word	0x40021000
 80002a4:	48000400 	.word	0x48000400

080002a8 <lcd_cmd>:
//dane o kolorach wszystkich pikseli):
static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];

//Funkcja wysylajaca komende do wyswietlacza (static oznacza ze funkcja nie jest widoczna
//w innych plikach, a ta funkcja bedzie uzywana tylko w tym pliku):
static void lcd_cmd(uint8_t cmd) {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	71fb      	strb	r3, [r7, #7]

	//Ustawienie stanu niskiego na linii DC oznacza ze wysylamy komende:
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80002b2:	2200      	movs	r2, #0
 80002b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80002b8:	480c      	ldr	r0, [pc, #48]	@ (80002ec <lcd_cmd+0x44>)
 80002ba:	f001 f80b 	bl	80012d4 <HAL_GPIO_WritePin>
	//Ustawienie stanu niskiego na linii CS oznacza ze rozpoczynamy komunikacje SPI:
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80002be:	2200      	movs	r2, #0
 80002c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002c4:	4809      	ldr	r0, [pc, #36]	@ (80002ec <lcd_cmd+0x44>)
 80002c6:	f001 f805 	bl	80012d4 <HAL_GPIO_WritePin>
	//Wyslanie komendy przekazanej do funkcji:
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 80002ca:	1df9      	adds	r1, r7, #7
 80002cc:	f04f 33ff 	mov.w	r3, #4294967295
 80002d0:	2201      	movs	r2, #1
 80002d2:	4807      	ldr	r0, [pc, #28]	@ (80002f0 <lcd_cmd+0x48>)
 80002d4:	f001 ff05 	bl	80020e2 <HAL_SPI_Transmit>
	//Ustawienie stanu wysokiego na linii CS oznacza ze konczymy komunikacje SPI:
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80002d8:	2201      	movs	r2, #1
 80002da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002de:	4803      	ldr	r0, [pc, #12]	@ (80002ec <lcd_cmd+0x44>)
 80002e0:	f000 fff8 	bl	80012d4 <HAL_GPIO_WritePin>

}
 80002e4:	bf00      	nop
 80002e6:	3708      	adds	r7, #8
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	48000400 	.word	0x48000400
 80002f0:	2000a030 	.word	0x2000a030

080002f4 <lcd_data>:

//Funkcja wysylajaca 8-bitow dane do wyswietlacza:
static void lcd_data(uint8_t data) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	71fb      	strb	r3, [r7, #7]

	//Ustawienie stanu wysokiego na linii DC oznacza ze wysylamy dane:
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000304:	480c      	ldr	r0, [pc, #48]	@ (8000338 <lcd_data+0x44>)
 8000306:	f000 ffe5 	bl	80012d4 <HAL_GPIO_WritePin>
	//Ustawienie stanu niskiego na linii CS oznacza ze rozpoczynamy komunikacje SPI:
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800030a:	2200      	movs	r2, #0
 800030c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000310:	4809      	ldr	r0, [pc, #36]	@ (8000338 <lcd_data+0x44>)
 8000312:	f000 ffdf 	bl	80012d4 <HAL_GPIO_WritePin>
	//Wyslanie danych przekazanych do funkcji:
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8000316:	1df9      	adds	r1, r7, #7
 8000318:	f04f 33ff 	mov.w	r3, #4294967295
 800031c:	2201      	movs	r2, #1
 800031e:	4807      	ldr	r0, [pc, #28]	@ (800033c <lcd_data+0x48>)
 8000320:	f001 fedf 	bl	80020e2 <HAL_SPI_Transmit>
	//Ustawienie stanu wysokiego na linii CS oznacza ze konczymy komunikacje SPI:
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000324:	2201      	movs	r2, #1
 8000326:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800032a:	4803      	ldr	r0, [pc, #12]	@ (8000338 <lcd_data+0x44>)
 800032c:	f000 ffd2 	bl	80012d4 <HAL_GPIO_WritePin>

}
 8000330:	bf00      	nop
 8000332:	3708      	adds	r7, #8
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	48000400 	.word	0x48000400
 800033c:	2000a030 	.word	0x2000a030

08000340 <lcd_data16>:

//Funkcja wysylajaca 16-bitowe dane do wyswietlacza (najpierw wysylany jest bardziej
//znaczacy bajt, z pozniej mniej znaczacy):
static void lcd_data16(uint16_t value) {
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	80fb      	strh	r3, [r7, #6]

	//Wyslanie bardziej znaczacego bajtu:
	lcd_data(value >> 8);
 800034a:	88fb      	ldrh	r3, [r7, #6]
 800034c:	0a1b      	lsrs	r3, r3, #8
 800034e:	b29b      	uxth	r3, r3
 8000350:	b2db      	uxtb	r3, r3
 8000352:	4618      	mov	r0, r3
 8000354:	f7ff ffce 	bl	80002f4 <lcd_data>
	//Wyslanie mniej znaczacego bajtu:
	lcd_data(value);
 8000358:	88fb      	ldrh	r3, [r7, #6]
 800035a:	b2db      	uxtb	r3, r3
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff ffc9 	bl	80002f4 <lcd_data>

}
 8000362:	bf00      	nop
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}

0800036a <lcd_send>:

//Funkcja wysylajaca przekazywana wartosc jako komenda lub jako dane. Funkcja jako argument
//przyjmuje wartosc 16-bitowa. Na 9 bicie znajduje sie bit który oznacza czy wartosc bedzie
//wysylana jako komenda czy jako dane (1 - komenda, 0 - dane):
static void lcd_send(uint16_t value) {
 800036a:	b580      	push	{r7, lr}
 800036c:	b082      	sub	sp, #8
 800036e:	af00      	add	r7, sp, #0
 8000370:	4603      	mov	r3, r0
 8000372:	80fb      	strh	r3, [r7, #6]

	//Sprawdzenie czy wartosc ma byc wyslana jako komenda
	if(value & 0x100) {
 8000374:	88fb      	ldrh	r3, [r7, #6]
 8000376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800037a:	2b00      	cmp	r3, #0
 800037c:	d005      	beq.n	800038a <lcd_send+0x20>
		lcd_cmd(value);
 800037e:	88fb      	ldrh	r3, [r7, #6]
 8000380:	b2db      	uxtb	r3, r3
 8000382:	4618      	mov	r0, r3
 8000384:	f7ff ff90 	bl	80002a8 <lcd_cmd>
	//W przeciwnym razie wartosc jest wysylana jako dane:
	else {
		lcd_data(value);
	}

}
 8000388:	e004      	b.n	8000394 <lcd_send+0x2a>
		lcd_data(value);
 800038a:	88fb      	ldrh	r3, [r7, #6]
 800038c:	b2db      	uxtb	r3, r3
 800038e:	4618      	mov	r0, r3
 8000390:	f7ff ffb0 	bl	80002f4 <lcd_data>
}
 8000394:	bf00      	nop
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}

0800039c <lcd_init>:

//Funkcja realizujaca inicjalizacje wyswietlacza (nie jest oznaczona jako statyczna,
//poniewaz bedzie wywolywana w pliku main.c):
void lcd_init(void) {
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0

	int i;

	//Reset sterownika wyswietlacza:
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80003a2:	2200      	movs	r2, #0
 80003a4:	2104      	movs	r1, #4
 80003a6:	4817      	ldr	r0, [pc, #92]	@ (8000404 <lcd_init+0x68>)
 80003a8:	f000 ff94 	bl	80012d4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80003ac:	2064      	movs	r0, #100	@ 0x64
 80003ae:	f000 fb49 	bl	8000a44 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80003b2:	2201      	movs	r2, #1
 80003b4:	2104      	movs	r1, #4
 80003b6:	4813      	ldr	r0, [pc, #76]	@ (8000404 <lcd_init+0x68>)
 80003b8:	f000 ff8c 	bl	80012d4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80003bc:	2064      	movs	r0, #100	@ 0x64
 80003be:	f000 fb41 	bl	8000a44 <HAL_Delay>

	//Wysylanie danych z tablicy do realizacji poczatkowej inicjalizacji wyswietlacza:
	for(i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80003c2:	2300      	movs	r3, #0
 80003c4:	607b      	str	r3, [r7, #4]
 80003c6:	e009      	b.n	80003dc <lcd_init+0x40>
		lcd_send(init_table[i]);
 80003c8:	4a0f      	ldr	r2, [pc, #60]	@ (8000408 <lcd_init+0x6c>)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003d0:	4618      	mov	r0, r3
 80003d2:	f7ff ffca 	bl	800036a <lcd_send>
	for(i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	3301      	adds	r3, #1
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2b4b      	cmp	r3, #75	@ 0x4b
 80003e0:	d9f2      	bls.n	80003c8 <lcd_init+0x2c>
	}

	HAL_Delay(200);
 80003e2:	20c8      	movs	r0, #200	@ 0xc8
 80003e4:	f000 fb2e 	bl	8000a44 <HAL_Delay>

	//Obudzenie wyswietlacza z trybu uspienia:
	lcd_cmd(ST7735S_SLPOUT);
 80003e8:	2011      	movs	r0, #17
 80003ea:	f7ff ff5d 	bl	80002a8 <lcd_cmd>

	HAL_Delay(120);
 80003ee:	2078      	movs	r0, #120	@ 0x78
 80003f0:	f000 fb28 	bl	8000a44 <HAL_Delay>

	//Wlaczenie wyswietlacza:
	lcd_cmd(ST7735S_DISPON);
 80003f4:	2029      	movs	r0, #41	@ 0x29
 80003f6:	f7ff ff57 	bl	80002a8 <lcd_cmd>
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	48000400 	.word	0x48000400
 8000408:	080034b8 	.word	0x080034b8

0800040c <lcd_set_window>:

//Definicja okna które bedzie rysowane na wyswietlaczu:
static void lcd_set_window(int x, int y, int width, int height)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	60f8      	str	r0, [r7, #12]
 8000414:	60b9      	str	r1, [r7, #8]
 8000416:	607a      	str	r2, [r7, #4]
 8000418:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 800041a:	202a      	movs	r0, #42	@ 0x2a
 800041c:	f7ff ff44 	bl	80002a8 <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	b29b      	uxth	r3, r3
 8000424:	3301      	adds	r3, #1
 8000426:	b29b      	uxth	r3, r3
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff ff89 	bl	8000340 <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	b29a      	uxth	r2, r3
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	b29b      	uxth	r3, r3
 8000436:	4413      	add	r3, r2
 8000438:	b29b      	uxth	r3, r3
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff ff80 	bl	8000340 <lcd_data16>

  lcd_cmd(ST7735S_RASET);
 8000440:	202b      	movs	r0, #43	@ 0x2b
 8000442:	f7ff ff31 	bl	80002a8 <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 8000446:	68bb      	ldr	r3, [r7, #8]
 8000448:	b29b      	uxth	r3, r3
 800044a:	3302      	adds	r3, #2
 800044c:	b29b      	uxth	r3, r3
 800044e:	4618      	mov	r0, r3
 8000450:	f7ff ff76 	bl	8000340 <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	b29a      	uxth	r2, r3
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	b29b      	uxth	r3, r3
 800045c:	4413      	add	r3, r2
 800045e:	b29b      	uxth	r3, r3
 8000460:	3301      	adds	r3, #1
 8000462:	b29b      	uxth	r3, r3
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff ff6b 	bl	8000340 <lcd_data16>
}
 800046a:	bf00      	nop
 800046c:	3710      	adds	r7, #16
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
	...

08000474 <lcd_put_pixel>:
	lcd_fill_box(x, y, 1, 1, color);
}
*/

//Funkcaj gromadzaca dane o kolorze pojedynczych pixeli w buforze:
void lcd_put_pixel(int x, int y, uint16_t color) {
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	4613      	mov	r3, r2
 8000480:	80fb      	strh	r3, [r7, #6]

	frame_buffer[x + y * LCD_WIDTH] = color;
 8000482:	68ba      	ldr	r2, [r7, #8]
 8000484:	4613      	mov	r3, r2
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	4413      	add	r3, r2
 800048a:	015b      	lsls	r3, r3, #5
 800048c:	461a      	mov	r2, r3
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	4413      	add	r3, r2
 8000492:	4905      	ldr	r1, [pc, #20]	@ (80004a8 <lcd_put_pixel+0x34>)
 8000494:	88fa      	ldrh	r2, [r7, #6]
 8000496:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800049a:	bf00      	nop
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	20000030 	.word	0x20000030

080004ac <lcd_copy>:
}
*/


//Funkcja kopiujaca zawartosc bufora do wyswietlacza:
void lcd_copy(void) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0

	//Wyslanie danych o kolorach dla pojedynczych pixeli do wyswietlacza:
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80004b0:	2380      	movs	r3, #128	@ 0x80
 80004b2:	22a0      	movs	r2, #160	@ 0xa0
 80004b4:	2100      	movs	r1, #0
 80004b6:	2000      	movs	r0, #0
 80004b8:	f7ff ffa8 	bl	800040c <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 80004bc:	202c      	movs	r0, #44	@ 0x2c
 80004be:	f7ff fef3 	bl	80002a8 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80004c2:	2201      	movs	r2, #1
 80004c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004c8:	480c      	ldr	r0, [pc, #48]	@ (80004fc <lcd_copy+0x50>)
 80004ca:	f000 ff03 	bl	80012d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80004ce:	2200      	movs	r2, #0
 80004d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004d4:	4809      	ldr	r0, [pc, #36]	@ (80004fc <lcd_copy+0x50>)
 80004d6:	f000 fefd 	bl	80012d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
 80004da:	f04f 33ff 	mov.w	r3, #4294967295
 80004de:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 80004e2:	4907      	ldr	r1, [pc, #28]	@ (8000500 <lcd_copy+0x54>)
 80004e4:	4807      	ldr	r0, [pc, #28]	@ (8000504 <lcd_copy+0x58>)
 80004e6:	f001 fdfc 	bl	80020e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80004ea:	2201      	movs	r2, #1
 80004ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004f0:	4802      	ldr	r0, [pc, #8]	@ (80004fc <lcd_copy+0x50>)
 80004f2:	f000 feef 	bl	80012d4 <HAL_GPIO_WritePin>

}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	48000400 	.word	0x48000400
 8000500:	20000030 	.word	0x20000030
 8000504:	2000a030 	.word	0x2000a030

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800050c:	b085      	sub	sp, #20
 800050e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fa23 	bl	800095a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f852 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f7ff fe74 	bl	8000204 <MX_GPIO_Init>
  MX_DMA_Init();
 800051c:	f7ff fe54 	bl	80001c8 <MX_DMA_Init>
  MX_SPI2_Init();
 8000520:	f000 f8b4 	bl	800068c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  //Inicjalizacja wyswietlacza:
  lcd_init();
 8000524:	f7ff ff3a 	bl	800039c <lcd_init>
      lcd_put_pixel(x, y, __REV16(x / 10 + y * 16));
    }
  }
  */
  //Wykorzystanie biblioteki hagl do rysowania zaokraglonego prostokata oraz do pisania tekstu:
  for (int i = 0; i < 8; i++) {
 8000528:	2300      	movs	r3, #0
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	e032      	b.n	8000594 <main+0x8c>
    hagl_draw_rounded_rectangle(2+i, 2+i, 158-i, 126-i, 8-i, rgb565(0, 0, i*16));
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	b29b      	uxth	r3, r3
 8000532:	3302      	adds	r3, #2
 8000534:	b29b      	uxth	r3, r3
 8000536:	b21d      	sxth	r5, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	b29b      	uxth	r3, r3
 800053c:	3302      	adds	r3, #2
 800053e:	b29b      	uxth	r3, r3
 8000540:	b21e      	sxth	r6, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	b29b      	uxth	r3, r3
 8000546:	f1c3 039e 	rsb	r3, r3, #158	@ 0x9e
 800054a:	b29b      	uxth	r3, r3
 800054c:	fa0f f883 	sxth.w	r8, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	b29b      	uxth	r3, r3
 8000554:	f1c3 037e 	rsb	r3, r3, #126	@ 0x7e
 8000558:	b29b      	uxth	r3, r3
 800055a:	fa0f f983 	sxth.w	r9, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	b29b      	uxth	r3, r3
 8000562:	f1c3 0308 	rsb	r3, r3, #8
 8000566:	b29b      	uxth	r3, r3
 8000568:	b21c      	sxth	r4, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	b2db      	uxtb	r3, r3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	b2db      	uxtb	r3, r3
 8000572:	461a      	mov	r2, r3
 8000574:	2100      	movs	r1, #0
 8000576:	2000      	movs	r0, #0
 8000578:	f002 ff0c 	bl	8003394 <rgb565>
 800057c:	4603      	mov	r3, r0
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	9400      	str	r4, [sp, #0]
 8000582:	464b      	mov	r3, r9
 8000584:	4642      	mov	r2, r8
 8000586:	4631      	mov	r1, r6
 8000588:	4628      	mov	r0, r5
 800058a:	f002 fd69 	bl	8003060 <hagl_draw_rounded_rectangle>
  for (int i = 0; i < 8; i++) {
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	3301      	adds	r3, #1
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2b07      	cmp	r3, #7
 8000598:	ddc9      	ble.n	800052e <main+0x26>
  }

  hagl_put_text(L"Hello World!", 40, 55, YELLOW, font6x9);
 800059a:	4b06      	ldr	r3, [pc, #24]	@ (80005b4 <main+0xac>)
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	f24e 03ff 	movw	r3, #57599	@ 0xe0ff
 80005a2:	2237      	movs	r2, #55	@ 0x37
 80005a4:	2128      	movs	r1, #40	@ 0x28
 80005a6:	4804      	ldr	r0, [pc, #16]	@ (80005b8 <main+0xb0>)
 80005a8:	f002 fcd2 	bl	8002f50 <hagl_put_text>

  //Przesylanie danych z bufora na wyswietlacz:
  lcd_copy();
 80005ac:	f7ff ff7e 	bl	80004ac <lcd_copy>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <main+0xa8>
 80005b4:	08003550 	.word	0x08003550
 80005b8:	08003484 	.word	0x08003484

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b096      	sub	sp, #88	@ 0x58
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	2244      	movs	r2, #68	@ 0x44
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 ff13 	bl	80033f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	463b      	mov	r3, r7
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005de:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005e2:	f000 fead 	bl	8001340 <HAL_PWREx_ControlVoltageScaling>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005ec:	f000 f848 	bl	8000680 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005f0:	f000 fe88 	bl	8001304 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005f4:	4b21      	ldr	r3, [pc, #132]	@ (800067c <SystemClock_Config+0xc0>)
 80005f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80005fa:	4a20      	ldr	r2, [pc, #128]	@ (800067c <SystemClock_Config+0xc0>)
 80005fc:	f023 0318 	bic.w	r3, r3, #24
 8000600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000604:	2314      	movs	r3, #20
 8000606:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000614:	2360      	movs	r3, #96	@ 0x60
 8000616:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000618:	2302      	movs	r3, #2
 800061a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800061c:	2301      	movs	r3, #1
 800061e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000620:	2301      	movs	r3, #1
 8000622:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000624:	2328      	movs	r3, #40	@ 0x28
 8000626:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000628:	2307      	movs	r3, #7
 800062a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fed7 	bl	80013ec <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000644:	f000 f81c 	bl	8000680 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064c:	2303      	movs	r3, #3
 800064e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800065c:	463b      	mov	r3, r7
 800065e:	2104      	movs	r1, #4
 8000660:	4618      	mov	r0, r3
 8000662:	f001 fa9f 	bl	8001ba4 <HAL_RCC_ClockConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800066c:	f000 f808 	bl	8000680 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000670:	f001 fc84 	bl	8001f7c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000674:	bf00      	nop
 8000676:	3758      	adds	r7, #88	@ 0x58
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40021000 	.word	0x40021000

08000680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000684:	b672      	cpsid	i
}
 8000686:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <Error_Handler+0x8>

0800068c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000690:	4b1b      	ldr	r3, [pc, #108]	@ (8000700 <MX_SPI2_Init+0x74>)
 8000692:	4a1c      	ldr	r2, [pc, #112]	@ (8000704 <MX_SPI2_Init+0x78>)
 8000694:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000696:	4b1a      	ldr	r3, [pc, #104]	@ (8000700 <MX_SPI2_Init+0x74>)
 8000698:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800069c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800069e:	4b18      	ldr	r3, [pc, #96]	@ (8000700 <MX_SPI2_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a4:	4b16      	ldr	r3, [pc, #88]	@ (8000700 <MX_SPI2_Init+0x74>)
 80006a6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80006aa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ac:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <MX_SPI2_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b2:	4b13      	ldr	r3, [pc, #76]	@ (8000700 <MX_SPI2_Init+0x74>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006b8:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <MX_SPI2_Init+0x74>)
 80006ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006be:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <MX_SPI2_Init+0x74>)
 80006c2:	2210      	movs	r2, #16
 80006c4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <MX_SPI2_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <MX_SPI2_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000700 <MX_SPI2_Init+0x74>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80006d8:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <MX_SPI2_Init+0x74>)
 80006da:	2207      	movs	r2, #7
 80006dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006de:	4b08      	ldr	r3, [pc, #32]	@ (8000700 <MX_SPI2_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80006e4:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <MX_SPI2_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006ea:	4805      	ldr	r0, [pc, #20]	@ (8000700 <MX_SPI2_Init+0x74>)
 80006ec:	f001 fc56 	bl	8001f9c <HAL_SPI_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80006f6:	f7ff ffc3 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	2000a030 	.word	0x2000a030
 8000704:	40003800 	.word	0x40003800

08000708 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	@ 0x28
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a3a      	ldr	r2, [pc, #232]	@ (8000810 <HAL_SPI_MspInit+0x108>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d16d      	bne.n	8000806 <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800072a:	4b3a      	ldr	r3, [pc, #232]	@ (8000814 <HAL_SPI_MspInit+0x10c>)
 800072c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800072e:	4a39      	ldr	r2, [pc, #228]	@ (8000814 <HAL_SPI_MspInit+0x10c>)
 8000730:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000734:	6593      	str	r3, [r2, #88]	@ 0x58
 8000736:	4b37      	ldr	r3, [pc, #220]	@ (8000814 <HAL_SPI_MspInit+0x10c>)
 8000738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800073a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	4b34      	ldr	r3, [pc, #208]	@ (8000814 <HAL_SPI_MspInit+0x10c>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000746:	4a33      	ldr	r2, [pc, #204]	@ (8000814 <HAL_SPI_MspInit+0x10c>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800074e:	4b31      	ldr	r3, [pc, #196]	@ (8000814 <HAL_SPI_MspInit+0x10c>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b2e      	ldr	r3, [pc, #184]	@ (8000814 <HAL_SPI_MspInit+0x10c>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075e:	4a2d      	ldr	r2, [pc, #180]	@ (8000814 <HAL_SPI_MspInit+0x10c>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000766:	4b2b      	ldr	r3, [pc, #172]	@ (8000814 <HAL_SPI_MspInit+0x10c>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000772:	2308      	movs	r3, #8
 8000774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077e:	2303      	movs	r3, #3
 8000780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000782:	2305      	movs	r3, #5
 8000784:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4619      	mov	r1, r3
 800078c:	4822      	ldr	r0, [pc, #136]	@ (8000818 <HAL_SPI_MspInit+0x110>)
 800078e:	f000 fbf7 	bl	8000f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000792:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000798:	2302      	movs	r3, #2
 800079a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a0:	2303      	movs	r3, #3
 80007a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007a4:	2305      	movs	r3, #5
 80007a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	4619      	mov	r1, r3
 80007ae:	481b      	ldr	r0, [pc, #108]	@ (800081c <HAL_SPI_MspInit+0x114>)
 80007b0:	f000 fbe6 	bl	8000f80 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80007b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000820 <HAL_SPI_MspInit+0x118>)
 80007b6:	4a1b      	ldr	r2, [pc, #108]	@ (8000824 <HAL_SPI_MspInit+0x11c>)
 80007b8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 80007ba:	4b19      	ldr	r3, [pc, #100]	@ (8000820 <HAL_SPI_MspInit+0x118>)
 80007bc:	2201      	movs	r2, #1
 80007be:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007c0:	4b17      	ldr	r3, [pc, #92]	@ (8000820 <HAL_SPI_MspInit+0x118>)
 80007c2:	2210      	movs	r2, #16
 80007c4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007c6:	4b16      	ldr	r3, [pc, #88]	@ (8000820 <HAL_SPI_MspInit+0x118>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007cc:	4b14      	ldr	r3, [pc, #80]	@ (8000820 <HAL_SPI_MspInit+0x118>)
 80007ce:	2280      	movs	r2, #128	@ 0x80
 80007d0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007d2:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <HAL_SPI_MspInit+0x118>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007d8:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <HAL_SPI_MspInit+0x118>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80007de:	4b10      	ldr	r3, [pc, #64]	@ (8000820 <HAL_SPI_MspInit+0x118>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80007e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <HAL_SPI_MspInit+0x118>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80007ea:	480d      	ldr	r0, [pc, #52]	@ (8000820 <HAL_SPI_MspInit+0x118>)
 80007ec:	f000 fa60 	bl	8000cb0 <HAL_DMA_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 80007f6:	f7ff ff43 	bl	8000680 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a08      	ldr	r2, [pc, #32]	@ (8000820 <HAL_SPI_MspInit+0x118>)
 80007fe:	655a      	str	r2, [r3, #84]	@ 0x54
 8000800:	4a07      	ldr	r2, [pc, #28]	@ (8000820 <HAL_SPI_MspInit+0x118>)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000806:	bf00      	nop
 8000808:	3728      	adds	r7, #40	@ 0x28
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40003800 	.word	0x40003800
 8000814:	40021000 	.word	0x40021000
 8000818:	48000800 	.word	0x48000800
 800081c:	48000400 	.word	0x48000400
 8000820:	2000a094 	.word	0x2000a094
 8000824:	40020058 	.word	0x40020058

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <HAL_MspInit+0x44>)
 8000830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000832:	4a0e      	ldr	r2, [pc, #56]	@ (800086c <HAL_MspInit+0x44>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6613      	str	r3, [r2, #96]	@ 0x60
 800083a:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <HAL_MspInit+0x44>)
 800083c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	4b09      	ldr	r3, [pc, #36]	@ (800086c <HAL_MspInit+0x44>)
 8000848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800084a:	4a08      	ldr	r2, [pc, #32]	@ (800086c <HAL_MspInit+0x44>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000850:	6593      	str	r3, [r2, #88]	@ 0x58
 8000852:	4b06      	ldr	r3, [pc, #24]	@ (800086c <HAL_MspInit+0x44>)
 8000854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40021000 	.word	0x40021000

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <NMI_Handler+0x4>

08000878 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <HardFault_Handler+0x4>

08000880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <MemManage_Handler+0x4>

08000888 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <BusFault_Handler+0x4>

08000890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <UsageFault_Handler+0x4>

08000898 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c6:	f000 f89d 	bl	8000a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80008d4:	4802      	ldr	r0, [pc, #8]	@ (80008e0 <DMA1_Channel5_IRQHandler+0x10>)
 80008d6:	f000 faa3 	bl	8000e20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	2000a094 	.word	0x2000a094

080008e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <SystemInit+0x20>)
 80008ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ee:	4a05      	ldr	r2, [pc, #20]	@ (8000904 <SystemInit+0x20>)
 80008f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000908:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000940 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800090c:	f7ff ffea 	bl	80008e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000910:	480c      	ldr	r0, [pc, #48]	@ (8000944 <LoopForever+0x6>)
  ldr r1, =_edata
 8000912:	490d      	ldr	r1, [pc, #52]	@ (8000948 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000914:	4a0d      	ldr	r2, [pc, #52]	@ (800094c <LoopForever+0xe>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000918:	e002      	b.n	8000920 <LoopCopyDataInit>

0800091a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800091c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091e:	3304      	adds	r3, #4

08000920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000924:	d3f9      	bcc.n	800091a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000926:	4a0a      	ldr	r2, [pc, #40]	@ (8000950 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000928:	4c0a      	ldr	r4, [pc, #40]	@ (8000954 <LoopForever+0x16>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800092c:	e001      	b.n	8000932 <LoopFillZerobss>

0800092e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000930:	3204      	adds	r2, #4

08000932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000934:	d3fb      	bcc.n	800092e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000936:	f002 fd67 	bl	8003408 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800093a:	f7ff fde5 	bl	8000508 <main>

0800093e <LoopForever>:

LoopForever:
    b LoopForever
 800093e:	e7fe      	b.n	800093e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000940:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000948:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800094c:	08006550 	.word	0x08006550
  ldr r2, =_sbss
 8000950:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000954:	2000a0e0 	.word	0x2000a0e0

08000958 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000958:	e7fe      	b.n	8000958 <ADC1_2_IRQHandler>

0800095a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000960:	2300      	movs	r3, #0
 8000962:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000964:	2003      	movs	r0, #3
 8000966:	f000 f961 	bl	8000c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800096a:	200f      	movs	r0, #15
 800096c:	f000 f80e 	bl	800098c <HAL_InitTick>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d002      	beq.n	800097c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000976:	2301      	movs	r3, #1
 8000978:	71fb      	strb	r3, [r7, #7]
 800097a:	e001      	b.n	8000980 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800097c:	f7ff ff54 	bl	8000828 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000980:	79fb      	ldrb	r3, [r7, #7]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000994:	2300      	movs	r3, #0
 8000996:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000998:	4b17      	ldr	r3, [pc, #92]	@ (80009f8 <HAL_InitTick+0x6c>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d023      	beq.n	80009e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009a0:	4b16      	ldr	r3, [pc, #88]	@ (80009fc <HAL_InitTick+0x70>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <HAL_InitTick+0x6c>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4619      	mov	r1, r3
 80009aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80009b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f96d 	bl	8000c96 <HAL_SYSTICK_Config>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d10f      	bne.n	80009e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b0f      	cmp	r3, #15
 80009c6:	d809      	bhi.n	80009dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c8:	2200      	movs	r2, #0
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295
 80009d0:	f000 f937 	bl	8000c42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009d4:	4a0a      	ldr	r2, [pc, #40]	@ (8000a00 <HAL_InitTick+0x74>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6013      	str	r3, [r2, #0]
 80009da:	e007      	b.n	80009ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	73fb      	strb	r3, [r7, #15]
 80009e0:	e004      	b.n	80009ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	73fb      	strb	r3, [r7, #15]
 80009e6:	e001      	b.n	80009ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000008 	.word	0x20000008
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000004 	.word	0x20000004

08000a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <HAL_IncTick+0x20>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <HAL_IncTick+0x24>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	4a04      	ldr	r2, [pc, #16]	@ (8000a28 <HAL_IncTick+0x24>)
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000008 	.word	0x20000008
 8000a28:	2000a0dc 	.word	0x2000a0dc

08000a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b03      	ldr	r3, [pc, #12]	@ (8000a40 <HAL_GetTick+0x14>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	2000a0dc 	.word	0x2000a0dc

08000a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a4c:	f7ff ffee 	bl	8000a2c <HAL_GetTick>
 8000a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a5c:	d005      	beq.n	8000a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a88 <HAL_Delay+0x44>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	461a      	mov	r2, r3
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4413      	add	r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a6a:	bf00      	nop
 8000a6c:	f7ff ffde 	bl	8000a2c <HAL_GetTick>
 8000a70:	4602      	mov	r2, r0
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d8f7      	bhi.n	8000a6c <HAL_Delay+0x28>
  {
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	bf00      	nop
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000008 	.word	0x20000008

08000a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ab8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000abe:	4a04      	ldr	r2, [pc, #16]	@ (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	60d3      	str	r3, [r2, #12]
}
 8000ac4:	bf00      	nop
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad8:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <__NVIC_GetPriorityGrouping+0x18>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	0a1b      	lsrs	r3, r3, #8
 8000ade:	f003 0307 	and.w	r3, r3, #7
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	db0b      	blt.n	8000b1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	f003 021f 	and.w	r2, r3, #31
 8000b08:	4907      	ldr	r1, [pc, #28]	@ (8000b28 <__NVIC_EnableIRQ+0x38>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	095b      	lsrs	r3, r3, #5
 8000b10:	2001      	movs	r0, #1
 8000b12:	fa00 f202 	lsl.w	r2, r0, r2
 8000b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000e100 	.word	0xe000e100

08000b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	db0a      	blt.n	8000b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	490c      	ldr	r1, [pc, #48]	@ (8000b78 <__NVIC_SetPriority+0x4c>)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	0112      	lsls	r2, r2, #4
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	440b      	add	r3, r1
 8000b50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b54:	e00a      	b.n	8000b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4908      	ldr	r1, [pc, #32]	@ (8000b7c <__NVIC_SetPriority+0x50>)
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	f003 030f 	and.w	r3, r3, #15
 8000b62:	3b04      	subs	r3, #4
 8000b64:	0112      	lsls	r2, r2, #4
 8000b66:	b2d2      	uxtb	r2, r2
 8000b68:	440b      	add	r3, r1
 8000b6a:	761a      	strb	r2, [r3, #24]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000e100 	.word	0xe000e100
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b089      	sub	sp, #36	@ 0x24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	f1c3 0307 	rsb	r3, r3, #7
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	bf28      	it	cs
 8000b9e:	2304      	movcs	r3, #4
 8000ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	2b06      	cmp	r3, #6
 8000ba8:	d902      	bls.n	8000bb0 <NVIC_EncodePriority+0x30>
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3b03      	subs	r3, #3
 8000bae:	e000      	b.n	8000bb2 <NVIC_EncodePriority+0x32>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43da      	mvns	r2, r3
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	43d9      	mvns	r1, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	4313      	orrs	r3, r2
         );
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3724      	adds	r7, #36	@ 0x24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bf8:	d301      	bcc.n	8000bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e00f      	b.n	8000c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000c28 <SysTick_Config+0x40>)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c06:	210f      	movs	r1, #15
 8000c08:	f04f 30ff 	mov.w	r0, #4294967295
 8000c0c:	f7ff ff8e 	bl	8000b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c10:	4b05      	ldr	r3, [pc, #20]	@ (8000c28 <SysTick_Config+0x40>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c16:	4b04      	ldr	r3, [pc, #16]	@ (8000c28 <SysTick_Config+0x40>)
 8000c18:	2207      	movs	r2, #7
 8000c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	e000e010 	.word	0xe000e010

08000c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ff29 	bl	8000a8c <__NVIC_SetPriorityGrouping>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b086      	sub	sp, #24
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	4603      	mov	r3, r0
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	607a      	str	r2, [r7, #4]
 8000c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c54:	f7ff ff3e 	bl	8000ad4 <__NVIC_GetPriorityGrouping>
 8000c58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	68b9      	ldr	r1, [r7, #8]
 8000c5e:	6978      	ldr	r0, [r7, #20]
 8000c60:	f7ff ff8e 	bl	8000b80 <NVIC_EncodePriority>
 8000c64:	4602      	mov	r2, r0
 8000c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6a:	4611      	mov	r1, r2
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff5d 	bl	8000b2c <__NVIC_SetPriority>
}
 8000c72:	bf00      	nop
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	4603      	mov	r3, r0
 8000c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ff31 	bl	8000af0 <__NVIC_EnableIRQ>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff ffa2 	bl	8000be8 <SysTick_Config>
 8000ca4:	4603      	mov	r3, r0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d101      	bne.n	8000cc2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e098      	b.n	8000df4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4b4d      	ldr	r3, [pc, #308]	@ (8000e00 <HAL_DMA_Init+0x150>)
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d80f      	bhi.n	8000cee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	4b4b      	ldr	r3, [pc, #300]	@ (8000e04 <HAL_DMA_Init+0x154>)
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4a4b      	ldr	r2, [pc, #300]	@ (8000e08 <HAL_DMA_Init+0x158>)
 8000cda:	fba2 2303 	umull	r2, r3, r2, r3
 8000cde:	091b      	lsrs	r3, r3, #4
 8000ce0:	009a      	lsls	r2, r3, #2
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a48      	ldr	r2, [pc, #288]	@ (8000e0c <HAL_DMA_Init+0x15c>)
 8000cea:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cec:	e00e      	b.n	8000d0c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4b46      	ldr	r3, [pc, #280]	@ (8000e10 <HAL_DMA_Init+0x160>)
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a43      	ldr	r2, [pc, #268]	@ (8000e08 <HAL_DMA_Init+0x158>)
 8000cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfe:	091b      	lsrs	r3, r3, #4
 8000d00:	009a      	lsls	r2, r3, #2
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a42      	ldr	r2, [pc, #264]	@ (8000e14 <HAL_DMA_Init+0x164>)
 8000d0a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2202      	movs	r2, #2
 8000d10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000d26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000d30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	691b      	ldr	r3, [r3, #16]
 8000d36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6a1b      	ldr	r3, [r3, #32]
 8000d4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d50:	68fa      	ldr	r2, [r7, #12]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000d66:	d039      	beq.n	8000ddc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6c:	4a27      	ldr	r2, [pc, #156]	@ (8000e0c <HAL_DMA_Init+0x15c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d11a      	bne.n	8000da8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000d72:	4b29      	ldr	r3, [pc, #164]	@ (8000e18 <HAL_DMA_Init+0x168>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7a:	f003 031c 	and.w	r3, r3, #28
 8000d7e:	210f      	movs	r1, #15
 8000d80:	fa01 f303 	lsl.w	r3, r1, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	4924      	ldr	r1, [pc, #144]	@ (8000e18 <HAL_DMA_Init+0x168>)
 8000d88:	4013      	ands	r3, r2
 8000d8a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000d8c:	4b22      	ldr	r3, [pc, #136]	@ (8000e18 <HAL_DMA_Init+0x168>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6859      	ldr	r1, [r3, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d98:	f003 031c 	and.w	r3, r3, #28
 8000d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000da0:	491d      	ldr	r1, [pc, #116]	@ (8000e18 <HAL_DMA_Init+0x168>)
 8000da2:	4313      	orrs	r3, r2
 8000da4:	600b      	str	r3, [r1, #0]
 8000da6:	e019      	b.n	8000ddc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000da8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e1c <HAL_DMA_Init+0x16c>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db0:	f003 031c 	and.w	r3, r3, #28
 8000db4:	210f      	movs	r1, #15
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	4917      	ldr	r1, [pc, #92]	@ (8000e1c <HAL_DMA_Init+0x16c>)
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000dc2:	4b16      	ldr	r3, [pc, #88]	@ (8000e1c <HAL_DMA_Init+0x16c>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6859      	ldr	r1, [r3, #4]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dce:	f003 031c 	and.w	r3, r3, #28
 8000dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd6:	4911      	ldr	r1, [pc, #68]	@ (8000e1c <HAL_DMA_Init+0x16c>)
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2201      	movs	r2, #1
 8000de6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	40020407 	.word	0x40020407
 8000e04:	bffdfff8 	.word	0xbffdfff8
 8000e08:	cccccccd 	.word	0xcccccccd
 8000e0c:	40020000 	.word	0x40020000
 8000e10:	bffdfbf8 	.word	0xbffdfbf8
 8000e14:	40020400 	.word	0x40020400
 8000e18:	400200a8 	.word	0x400200a8
 8000e1c:	400204a8 	.word	0x400204a8

08000e20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3c:	f003 031c 	and.w	r3, r3, #28
 8000e40:	2204      	movs	r2, #4
 8000e42:	409a      	lsls	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4013      	ands	r3, r2
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d026      	beq.n	8000e9a <HAL_DMA_IRQHandler+0x7a>
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d021      	beq.n	8000e9a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f003 0320 	and.w	r3, r3, #32
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d107      	bne.n	8000e74 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f022 0204 	bic.w	r2, r2, #4
 8000e72:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e78:	f003 021c 	and.w	r2, r3, #28
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e80:	2104      	movs	r1, #4
 8000e82:	fa01 f202 	lsl.w	r2, r1, r2
 8000e86:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d071      	beq.n	8000f74 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000e98:	e06c      	b.n	8000f74 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9e:	f003 031c 	and.w	r3, r3, #28
 8000ea2:	2202      	movs	r2, #2
 8000ea4:	409a      	lsls	r2, r3
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d02e      	beq.n	8000f0c <HAL_DMA_IRQHandler+0xec>
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d029      	beq.n	8000f0c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0320 	and.w	r3, r3, #32
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10b      	bne.n	8000ede <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f022 020a 	bic.w	r2, r2, #10
 8000ed4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee2:	f003 021c 	and.w	r2, r3, #28
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eea:	2102      	movs	r1, #2
 8000eec:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d038      	beq.n	8000f74 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000f0a:	e033      	b.n	8000f74 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f10:	f003 031c 	and.w	r3, r3, #28
 8000f14:	2208      	movs	r2, #8
 8000f16:	409a      	lsls	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d02a      	beq.n	8000f76 <HAL_DMA_IRQHandler+0x156>
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	f003 0308 	and.w	r3, r3, #8
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d025      	beq.n	8000f76 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f022 020e 	bic.w	r2, r2, #14
 8000f38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3e:	f003 021c 	and.w	r2, r3, #28
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f46:	2101      	movs	r1, #1
 8000f48:	fa01 f202 	lsl.w	r2, r1, r2
 8000f4c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2201      	movs	r2, #1
 8000f52:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d004      	beq.n	8000f76 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
}
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b087      	sub	sp, #28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f8e:	e17f      	b.n	8001290 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	2101      	movs	r1, #1
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 8171 	beq.w	800128a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d005      	beq.n	8000fc0 <HAL_GPIO_Init+0x40>
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d130      	bne.n	8001022 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	091b      	lsrs	r3, r3, #4
 800100c:	f003 0201 	and.w	r2, r3, #1
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	2b03      	cmp	r3, #3
 800102c:	d118      	bne.n	8001060 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001034:	2201      	movs	r2, #1
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	08db      	lsrs	r3, r3, #3
 800104a:	f003 0201 	and.w	r2, r3, #1
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	2b03      	cmp	r3, #3
 800106a:	d017      	beq.n	800109c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	2203      	movs	r2, #3
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4313      	orrs	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d123      	bne.n	80010f0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	08da      	lsrs	r2, r3, #3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3208      	adds	r2, #8
 80010b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	f003 0307 	and.w	r3, r3, #7
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	220f      	movs	r2, #15
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	691a      	ldr	r2, [r3, #16]
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	08da      	lsrs	r2, r3, #3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3208      	adds	r2, #8
 80010ea:	6939      	ldr	r1, [r7, #16]
 80010ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0203 	and.w	r2, r3, #3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800112c:	2b00      	cmp	r3, #0
 800112e:	f000 80ac 	beq.w	800128a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001132:	4b5f      	ldr	r3, [pc, #380]	@ (80012b0 <HAL_GPIO_Init+0x330>)
 8001134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001136:	4a5e      	ldr	r2, [pc, #376]	@ (80012b0 <HAL_GPIO_Init+0x330>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6613      	str	r3, [r2, #96]	@ 0x60
 800113e:	4b5c      	ldr	r3, [pc, #368]	@ (80012b0 <HAL_GPIO_Init+0x330>)
 8001140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800114a:	4a5a      	ldr	r2, [pc, #360]	@ (80012b4 <HAL_GPIO_Init+0x334>)
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	089b      	lsrs	r3, r3, #2
 8001150:	3302      	adds	r3, #2
 8001152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001156:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	220f      	movs	r2, #15
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001174:	d025      	beq.n	80011c2 <HAL_GPIO_Init+0x242>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a4f      	ldr	r2, [pc, #316]	@ (80012b8 <HAL_GPIO_Init+0x338>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d01f      	beq.n	80011be <HAL_GPIO_Init+0x23e>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a4e      	ldr	r2, [pc, #312]	@ (80012bc <HAL_GPIO_Init+0x33c>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d019      	beq.n	80011ba <HAL_GPIO_Init+0x23a>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a4d      	ldr	r2, [pc, #308]	@ (80012c0 <HAL_GPIO_Init+0x340>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d013      	beq.n	80011b6 <HAL_GPIO_Init+0x236>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4c      	ldr	r2, [pc, #304]	@ (80012c4 <HAL_GPIO_Init+0x344>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d00d      	beq.n	80011b2 <HAL_GPIO_Init+0x232>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4b      	ldr	r2, [pc, #300]	@ (80012c8 <HAL_GPIO_Init+0x348>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d007      	beq.n	80011ae <HAL_GPIO_Init+0x22e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4a      	ldr	r2, [pc, #296]	@ (80012cc <HAL_GPIO_Init+0x34c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d101      	bne.n	80011aa <HAL_GPIO_Init+0x22a>
 80011a6:	2306      	movs	r3, #6
 80011a8:	e00c      	b.n	80011c4 <HAL_GPIO_Init+0x244>
 80011aa:	2307      	movs	r3, #7
 80011ac:	e00a      	b.n	80011c4 <HAL_GPIO_Init+0x244>
 80011ae:	2305      	movs	r3, #5
 80011b0:	e008      	b.n	80011c4 <HAL_GPIO_Init+0x244>
 80011b2:	2304      	movs	r3, #4
 80011b4:	e006      	b.n	80011c4 <HAL_GPIO_Init+0x244>
 80011b6:	2303      	movs	r3, #3
 80011b8:	e004      	b.n	80011c4 <HAL_GPIO_Init+0x244>
 80011ba:	2302      	movs	r3, #2
 80011bc:	e002      	b.n	80011c4 <HAL_GPIO_Init+0x244>
 80011be:	2301      	movs	r3, #1
 80011c0:	e000      	b.n	80011c4 <HAL_GPIO_Init+0x244>
 80011c2:	2300      	movs	r3, #0
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	f002 0203 	and.w	r2, r2, #3
 80011ca:	0092      	lsls	r2, r2, #2
 80011cc:	4093      	lsls	r3, r2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011d4:	4937      	ldr	r1, [pc, #220]	@ (80012b4 <HAL_GPIO_Init+0x334>)
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	089b      	lsrs	r3, r3, #2
 80011da:	3302      	adds	r3, #2
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011e2:	4b3b      	ldr	r3, [pc, #236]	@ (80012d0 <HAL_GPIO_Init+0x350>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4313      	orrs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001206:	4a32      	ldr	r2, [pc, #200]	@ (80012d0 <HAL_GPIO_Init+0x350>)
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800120c:	4b30      	ldr	r3, [pc, #192]	@ (80012d0 <HAL_GPIO_Init+0x350>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	43db      	mvns	r3, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001230:	4a27      	ldr	r2, [pc, #156]	@ (80012d0 <HAL_GPIO_Init+0x350>)
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001236:	4b26      	ldr	r3, [pc, #152]	@ (80012d0 <HAL_GPIO_Init+0x350>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	43db      	mvns	r3, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800125a:	4a1d      	ldr	r2, [pc, #116]	@ (80012d0 <HAL_GPIO_Init+0x350>)
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001260:	4b1b      	ldr	r3, [pc, #108]	@ (80012d0 <HAL_GPIO_Init+0x350>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	43db      	mvns	r3, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001284:	4a12      	ldr	r2, [pc, #72]	@ (80012d0 <HAL_GPIO_Init+0x350>)
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	3301      	adds	r3, #1
 800128e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa22 f303 	lsr.w	r3, r2, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	f47f ae78 	bne.w	8000f90 <HAL_GPIO_Init+0x10>
  }
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	371c      	adds	r7, #28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40010000 	.word	0x40010000
 80012b8:	48000400 	.word	0x48000400
 80012bc:	48000800 	.word	0x48000800
 80012c0:	48000c00 	.word	0x48000c00
 80012c4:	48001000 	.word	0x48001000
 80012c8:	48001400 	.word	0x48001400
 80012cc:	48001800 	.word	0x48001800
 80012d0:	40010400 	.word	0x40010400

080012d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	807b      	strh	r3, [r7, #2]
 80012e0:	4613      	mov	r3, r2
 80012e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e4:	787b      	ldrb	r3, [r7, #1]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ea:	887a      	ldrh	r2, [r7, #2]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012f0:	e002      	b.n	80012f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012f2:	887a      	ldrh	r2, [r7, #2]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001308:	4b05      	ldr	r3, [pc, #20]	@ (8001320 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a04      	ldr	r2, [pc, #16]	@ (8001320 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800130e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001312:	6013      	str	r3, [r2, #0]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40007000 	.word	0x40007000

08001324 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001328:	4b04      	ldr	r3, [pc, #16]	@ (800133c <HAL_PWREx_GetVoltageRange+0x18>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40007000 	.word	0x40007000

08001340 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800134e:	d130      	bne.n	80013b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001350:	4b23      	ldr	r3, [pc, #140]	@ (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001358:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800135c:	d038      	beq.n	80013d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800135e:	4b20      	ldr	r3, [pc, #128]	@ (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001366:	4a1e      	ldr	r2, [pc, #120]	@ (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001368:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800136c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800136e:	4b1d      	ldr	r3, [pc, #116]	@ (80013e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2232      	movs	r2, #50	@ 0x32
 8001374:	fb02 f303 	mul.w	r3, r2, r3
 8001378:	4a1b      	ldr	r2, [pc, #108]	@ (80013e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	0c9b      	lsrs	r3, r3, #18
 8001380:	3301      	adds	r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001384:	e002      	b.n	800138c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	3b01      	subs	r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800138c:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001394:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001398:	d102      	bne.n	80013a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1f2      	bne.n	8001386 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013a0:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013ac:	d110      	bne.n	80013d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e00f      	b.n	80013d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013b2:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013be:	d007      	beq.n	80013d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013c0:	4b07      	ldr	r3, [pc, #28]	@ (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013c8:	4a05      	ldr	r2, [pc, #20]	@ (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40007000 	.word	0x40007000
 80013e4:	20000000 	.word	0x20000000
 80013e8:	431bde83 	.word	0x431bde83

080013ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e3ca      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013fe:	4b97      	ldr	r3, [pc, #604]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001408:	4b94      	ldr	r3, [pc, #592]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0310 	and.w	r3, r3, #16
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 80e4 	beq.w	80015e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d007      	beq.n	8001436 <HAL_RCC_OscConfig+0x4a>
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	2b0c      	cmp	r3, #12
 800142a:	f040 808b 	bne.w	8001544 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	2b01      	cmp	r3, #1
 8001432:	f040 8087 	bne.w	8001544 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001436:	4b89      	ldr	r3, [pc, #548]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d005      	beq.n	800144e <HAL_RCC_OscConfig+0x62>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e3a2      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a1a      	ldr	r2, [r3, #32]
 8001452:	4b82      	ldr	r3, [pc, #520]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	2b00      	cmp	r3, #0
 800145c:	d004      	beq.n	8001468 <HAL_RCC_OscConfig+0x7c>
 800145e:	4b7f      	ldr	r3, [pc, #508]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001466:	e005      	b.n	8001474 <HAL_RCC_OscConfig+0x88>
 8001468:	4b7c      	ldr	r3, [pc, #496]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 800146a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800146e:	091b      	lsrs	r3, r3, #4
 8001470:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001474:	4293      	cmp	r3, r2
 8001476:	d223      	bcs.n	80014c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	4618      	mov	r0, r3
 800147e:	f000 fd1d 	bl	8001ebc <RCC_SetFlashLatencyFromMSIRange>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e383      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800148c:	4b73      	ldr	r3, [pc, #460]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a72      	ldr	r2, [pc, #456]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001492:	f043 0308 	orr.w	r3, r3, #8
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	4b70      	ldr	r3, [pc, #448]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	496d      	ldr	r1, [pc, #436]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014aa:	4b6c      	ldr	r3, [pc, #432]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	4968      	ldr	r1, [pc, #416]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	604b      	str	r3, [r1, #4]
 80014be:	e025      	b.n	800150c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014c0:	4b66      	ldr	r3, [pc, #408]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a65      	ldr	r2, [pc, #404]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 80014c6:	f043 0308 	orr.w	r3, r3, #8
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b63      	ldr	r3, [pc, #396]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	4960      	ldr	r1, [pc, #384]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014de:	4b5f      	ldr	r3, [pc, #380]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	021b      	lsls	r3, r3, #8
 80014ec:	495b      	ldr	r1, [pc, #364]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d109      	bne.n	800150c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 fcdd 	bl	8001ebc <RCC_SetFlashLatencyFromMSIRange>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e343      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800150c:	f000 fc4a 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 8001510:	4602      	mov	r2, r0
 8001512:	4b52      	ldr	r3, [pc, #328]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	091b      	lsrs	r3, r3, #4
 8001518:	f003 030f 	and.w	r3, r3, #15
 800151c:	4950      	ldr	r1, [pc, #320]	@ (8001660 <HAL_RCC_OscConfig+0x274>)
 800151e:	5ccb      	ldrb	r3, [r1, r3]
 8001520:	f003 031f 	and.w	r3, r3, #31
 8001524:	fa22 f303 	lsr.w	r3, r2, r3
 8001528:	4a4e      	ldr	r2, [pc, #312]	@ (8001664 <HAL_RCC_OscConfig+0x278>)
 800152a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800152c:	4b4e      	ldr	r3, [pc, #312]	@ (8001668 <HAL_RCC_OscConfig+0x27c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fa2b 	bl	800098c <HAL_InitTick>
 8001536:	4603      	mov	r3, r0
 8001538:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d052      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	e327      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d032      	beq.n	80015b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800154c:	4b43      	ldr	r3, [pc, #268]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a42      	ldr	r2, [pc, #264]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001558:	f7ff fa68 	bl	8000a2c <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001560:	f7ff fa64 	bl	8000a2c <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e310      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001572:	4b3a      	ldr	r3, [pc, #232]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800157e:	4b37      	ldr	r3, [pc, #220]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a36      	ldr	r2, [pc, #216]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001584:	f043 0308 	orr.w	r3, r3, #8
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	4b34      	ldr	r3, [pc, #208]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	4931      	ldr	r1, [pc, #196]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001598:	4313      	orrs	r3, r2
 800159a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800159c:	4b2f      	ldr	r3, [pc, #188]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	492c      	ldr	r1, [pc, #176]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 80015ac:	4313      	orrs	r3, r2
 80015ae:	604b      	str	r3, [r1, #4]
 80015b0:	e01a      	b.n	80015e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015b2:	4b2a      	ldr	r3, [pc, #168]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a29      	ldr	r2, [pc, #164]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015be:	f7ff fa35 	bl	8000a2c <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015c6:	f7ff fa31 	bl	8000a2c <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e2dd      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015d8:	4b20      	ldr	r3, [pc, #128]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1f0      	bne.n	80015c6 <HAL_RCC_OscConfig+0x1da>
 80015e4:	e000      	b.n	80015e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d074      	beq.n	80016de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d005      	beq.n	8001606 <HAL_RCC_OscConfig+0x21a>
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	2b0c      	cmp	r3, #12
 80015fe:	d10e      	bne.n	800161e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	2b03      	cmp	r3, #3
 8001604:	d10b      	bne.n	800161e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001606:	4b15      	ldr	r3, [pc, #84]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d064      	beq.n	80016dc <HAL_RCC_OscConfig+0x2f0>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d160      	bne.n	80016dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e2ba      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001626:	d106      	bne.n	8001636 <HAL_RCC_OscConfig+0x24a>
 8001628:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0b      	ldr	r2, [pc, #44]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 800162e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	e026      	b.n	8001684 <HAL_RCC_OscConfig+0x298>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800163e:	d115      	bne.n	800166c <HAL_RCC_OscConfig+0x280>
 8001640:	4b06      	ldr	r3, [pc, #24]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a05      	ldr	r2, [pc, #20]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001646:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b03      	ldr	r3, [pc, #12]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a02      	ldr	r2, [pc, #8]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001652:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	e014      	b.n	8001684 <HAL_RCC_OscConfig+0x298>
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000
 8001660:	08006508 	.word	0x08006508
 8001664:	20000000 	.word	0x20000000
 8001668:	20000004 	.word	0x20000004
 800166c:	4ba0      	ldr	r3, [pc, #640]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a9f      	ldr	r2, [pc, #636]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001672:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	4b9d      	ldr	r3, [pc, #628]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a9c      	ldr	r2, [pc, #624]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 800167e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001682:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d013      	beq.n	80016b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168c:	f7ff f9ce 	bl	8000a2c <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001694:	f7ff f9ca 	bl	8000a2c <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	@ 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e276      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016a6:	4b92      	ldr	r3, [pc, #584]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0x2a8>
 80016b2:	e014      	b.n	80016de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b4:	f7ff f9ba 	bl	8000a2c <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016bc:	f7ff f9b6 	bl	8000a2c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b64      	cmp	r3, #100	@ 0x64
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e262      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ce:	4b88      	ldr	r3, [pc, #544]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0x2d0>
 80016da:	e000      	b.n	80016de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d060      	beq.n	80017ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d005      	beq.n	80016fc <HAL_RCC_OscConfig+0x310>
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	2b0c      	cmp	r3, #12
 80016f4:	d119      	bne.n	800172a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d116      	bne.n	800172a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016fc:	4b7c      	ldr	r3, [pc, #496]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001704:	2b00      	cmp	r3, #0
 8001706:	d005      	beq.n	8001714 <HAL_RCC_OscConfig+0x328>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e23f      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001714:	4b76      	ldr	r3, [pc, #472]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	061b      	lsls	r3, r3, #24
 8001722:	4973      	ldr	r1, [pc, #460]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001728:	e040      	b.n	80017ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d023      	beq.n	800177a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001732:	4b6f      	ldr	r3, [pc, #444]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a6e      	ldr	r2, [pc, #440]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800173c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173e:	f7ff f975 	bl	8000a2c <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001746:	f7ff f971 	bl	8000a2c <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e21d      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001758:	4b65      	ldr	r3, [pc, #404]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f0      	beq.n	8001746 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001764:	4b62      	ldr	r3, [pc, #392]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	061b      	lsls	r3, r3, #24
 8001772:	495f      	ldr	r1, [pc, #380]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
 8001778:	e018      	b.n	80017ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800177a:	4b5d      	ldr	r3, [pc, #372]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a5c      	ldr	r2, [pc, #368]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001780:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001786:	f7ff f951 	bl	8000a2c <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800178e:	f7ff f94d 	bl	8000a2c <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e1f9      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017a0:	4b53      	ldr	r3, [pc, #332]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1f0      	bne.n	800178e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d03c      	beq.n	8001832 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d01c      	beq.n	80017fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017c0:	4b4b      	ldr	r3, [pc, #300]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 80017c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017c6:	4a4a      	ldr	r2, [pc, #296]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d0:	f7ff f92c 	bl	8000a2c <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d8:	f7ff f928 	bl	8000a2c <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e1d4      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ea:	4b41      	ldr	r3, [pc, #260]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 80017ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0ef      	beq.n	80017d8 <HAL_RCC_OscConfig+0x3ec>
 80017f8:	e01b      	b.n	8001832 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017fa:	4b3d      	ldr	r3, [pc, #244]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 80017fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001800:	4a3b      	ldr	r2, [pc, #236]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001802:	f023 0301 	bic.w	r3, r3, #1
 8001806:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180a:	f7ff f90f 	bl	8000a2c <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001812:	f7ff f90b 	bl	8000a2c <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e1b7      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001824:	4b32      	ldr	r3, [pc, #200]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001826:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1ef      	bne.n	8001812 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 80a6 	beq.w	800198c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001840:	2300      	movs	r3, #0
 8001842:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001844:	4b2a      	ldr	r3, [pc, #168]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001848:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d10d      	bne.n	800186c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001850:	4b27      	ldr	r3, [pc, #156]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001854:	4a26      	ldr	r2, [pc, #152]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800185a:	6593      	str	r3, [r2, #88]	@ 0x58
 800185c:	4b24      	ldr	r3, [pc, #144]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 800185e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001868:	2301      	movs	r3, #1
 800186a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800186c:	4b21      	ldr	r3, [pc, #132]	@ (80018f4 <HAL_RCC_OscConfig+0x508>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001874:	2b00      	cmp	r3, #0
 8001876:	d118      	bne.n	80018aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001878:	4b1e      	ldr	r3, [pc, #120]	@ (80018f4 <HAL_RCC_OscConfig+0x508>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a1d      	ldr	r2, [pc, #116]	@ (80018f4 <HAL_RCC_OscConfig+0x508>)
 800187e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001882:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001884:	f7ff f8d2 	bl	8000a2c <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800188c:	f7ff f8ce 	bl	8000a2c <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e17a      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800189e:	4b15      	ldr	r3, [pc, #84]	@ (80018f4 <HAL_RCC_OscConfig+0x508>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d108      	bne.n	80018c4 <HAL_RCC_OscConfig+0x4d8>
 80018b2:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 80018b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018b8:	4a0d      	ldr	r2, [pc, #52]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018c2:	e029      	b.n	8001918 <HAL_RCC_OscConfig+0x52c>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b05      	cmp	r3, #5
 80018ca:	d115      	bne.n	80018f8 <HAL_RCC_OscConfig+0x50c>
 80018cc:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 80018ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018d2:	4a07      	ldr	r2, [pc, #28]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018dc:	4b04      	ldr	r3, [pc, #16]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 80018de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018e2:	4a03      	ldr	r2, [pc, #12]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018ec:	e014      	b.n	8001918 <HAL_RCC_OscConfig+0x52c>
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40007000 	.word	0x40007000
 80018f8:	4b9c      	ldr	r3, [pc, #624]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 80018fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018fe:	4a9b      	ldr	r2, [pc, #620]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001900:	f023 0301 	bic.w	r3, r3, #1
 8001904:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001908:	4b98      	ldr	r3, [pc, #608]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 800190a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800190e:	4a97      	ldr	r2, [pc, #604]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001910:	f023 0304 	bic.w	r3, r3, #4
 8001914:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d016      	beq.n	800194e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001920:	f7ff f884 	bl	8000a2c <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001926:	e00a      	b.n	800193e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001928:	f7ff f880 	bl	8000a2c <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e12a      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800193e:	4b8b      	ldr	r3, [pc, #556]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0ed      	beq.n	8001928 <HAL_RCC_OscConfig+0x53c>
 800194c:	e015      	b.n	800197a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194e:	f7ff f86d 	bl	8000a2c <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001954:	e00a      	b.n	800196c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001956:	f7ff f869 	bl	8000a2c <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001964:	4293      	cmp	r3, r2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e113      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800196c:	4b7f      	ldr	r3, [pc, #508]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 800196e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1ed      	bne.n	8001956 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800197a:	7ffb      	ldrb	r3, [r7, #31]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d105      	bne.n	800198c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001980:	4b7a      	ldr	r3, [pc, #488]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001984:	4a79      	ldr	r2, [pc, #484]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001986:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800198a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 80fe 	beq.w	8001b92 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800199a:	2b02      	cmp	r3, #2
 800199c:	f040 80d0 	bne.w	8001b40 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019a0:	4b72      	ldr	r3, [pc, #456]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f003 0203 	and.w	r2, r3, #3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d130      	bne.n	8001a16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	3b01      	subs	r3, #1
 80019c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d127      	bne.n	8001a16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d11f      	bne.n	8001a16 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019e0:	2a07      	cmp	r2, #7
 80019e2:	bf14      	ite	ne
 80019e4:	2201      	movne	r2, #1
 80019e6:	2200      	moveq	r2, #0
 80019e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d113      	bne.n	8001a16 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019f8:	085b      	lsrs	r3, r3, #1
 80019fa:	3b01      	subs	r3, #1
 80019fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d109      	bne.n	8001a16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0c:	085b      	lsrs	r3, r3, #1
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d06e      	beq.n	8001af4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	2b0c      	cmp	r3, #12
 8001a1a:	d069      	beq.n	8001af0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a1c:	4b53      	ldr	r3, [pc, #332]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d105      	bne.n	8001a34 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a28:	4b50      	ldr	r3, [pc, #320]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0ad      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a38:	4b4c      	ldr	r3, [pc, #304]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a4b      	ldr	r2, [pc, #300]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001a3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a42:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a44:	f7fe fff2 	bl	8000a2c <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4c:	f7fe ffee 	bl	8000a2c <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e09a      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a5e:	4b43      	ldr	r3, [pc, #268]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f0      	bne.n	8001a4c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a6a:	4b40      	ldr	r3, [pc, #256]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	4b40      	ldr	r3, [pc, #256]	@ (8001b70 <HAL_RCC_OscConfig+0x784>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a7a:	3a01      	subs	r2, #1
 8001a7c:	0112      	lsls	r2, r2, #4
 8001a7e:	4311      	orrs	r1, r2
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a84:	0212      	lsls	r2, r2, #8
 8001a86:	4311      	orrs	r1, r2
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a8c:	0852      	lsrs	r2, r2, #1
 8001a8e:	3a01      	subs	r2, #1
 8001a90:	0552      	lsls	r2, r2, #21
 8001a92:	4311      	orrs	r1, r2
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a98:	0852      	lsrs	r2, r2, #1
 8001a9a:	3a01      	subs	r2, #1
 8001a9c:	0652      	lsls	r2, r2, #25
 8001a9e:	4311      	orrs	r1, r2
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001aa4:	0912      	lsrs	r2, r2, #4
 8001aa6:	0452      	lsls	r2, r2, #17
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	4930      	ldr	r1, [pc, #192]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a2d      	ldr	r2, [pc, #180]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001ab6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001abc:	4b2b      	ldr	r3, [pc, #172]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	4a2a      	ldr	r2, [pc, #168]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001ac2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ac6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ac8:	f7fe ffb0 	bl	8000a2c <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad0:	f7fe ffac 	bl	8000a2c <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e058      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae2:	4b22      	ldr	r3, [pc, #136]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f0      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aee:	e050      	b.n	8001b92 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e04f      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d148      	bne.n	8001b92 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b00:	4b1a      	ldr	r3, [pc, #104]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a19      	ldr	r2, [pc, #100]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001b06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b0c:	4b17      	ldr	r3, [pc, #92]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4a16      	ldr	r2, [pc, #88]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001b12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b18:	f7fe ff88 	bl	8000a2c <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b20:	f7fe ff84 	bl	8000a2c <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e030      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b32:	4b0e      	ldr	r3, [pc, #56]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0x734>
 8001b3e:	e028      	b.n	8001b92 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	2b0c      	cmp	r3, #12
 8001b44:	d023      	beq.n	8001b8e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b46:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a08      	ldr	r2, [pc, #32]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001b4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b52:	f7fe ff6b 	bl	8000a2c <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b58:	e00c      	b.n	8001b74 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5a:	f7fe ff67 	bl	8000a2c <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d905      	bls.n	8001b74 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e013      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b74:	4b09      	ldr	r3, [pc, #36]	@ (8001b9c <HAL_RCC_OscConfig+0x7b0>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1ec      	bne.n	8001b5a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b80:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <HAL_RCC_OscConfig+0x7b0>)
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	4905      	ldr	r1, [pc, #20]	@ (8001b9c <HAL_RCC_OscConfig+0x7b0>)
 8001b86:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <HAL_RCC_OscConfig+0x7b4>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60cb      	str	r3, [r1, #12]
 8001b8c:	e001      	b.n	8001b92 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3720      	adds	r7, #32
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	feeefffc 	.word	0xfeeefffc

08001ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0e7      	b.n	8001d88 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb8:	4b75      	ldr	r3, [pc, #468]	@ (8001d90 <HAL_RCC_ClockConfig+0x1ec>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d910      	bls.n	8001be8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc6:	4b72      	ldr	r3, [pc, #456]	@ (8001d90 <HAL_RCC_ClockConfig+0x1ec>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 0207 	bic.w	r2, r3, #7
 8001bce:	4970      	ldr	r1, [pc, #448]	@ (8001d90 <HAL_RCC_ClockConfig+0x1ec>)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd6:	4b6e      	ldr	r3, [pc, #440]	@ (8001d90 <HAL_RCC_ClockConfig+0x1ec>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0cf      	b.n	8001d88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d010      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	4b66      	ldr	r3, [pc, #408]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d908      	bls.n	8001c16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c04:	4b63      	ldr	r3, [pc, #396]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	4960      	ldr	r1, [pc, #384]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d04c      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d107      	bne.n	8001c3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c2a:	4b5a      	ldr	r3, [pc, #360]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d121      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e0a6      	b.n	8001d88 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d107      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c42:	4b54      	ldr	r3, [pc, #336]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d115      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e09a      	b.n	8001d88 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d107      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c5a:	4b4e      	ldr	r3, [pc, #312]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d109      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e08e      	b.n	8001d88 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c6a:	4b4a      	ldr	r3, [pc, #296]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e086      	b.n	8001d88 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c7a:	4b46      	ldr	r3, [pc, #280]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f023 0203 	bic.w	r2, r3, #3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	4943      	ldr	r1, [pc, #268]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c8c:	f7fe fece 	bl	8000a2c <HAL_GetTick>
 8001c90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c92:	e00a      	b.n	8001caa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c94:	f7fe feca 	bl	8000a2c <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e06e      	b.n	8001d88 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001caa:	4b3a      	ldr	r3, [pc, #232]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 020c 	and.w	r2, r3, #12
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d1eb      	bne.n	8001c94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d010      	beq.n	8001cea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	4b31      	ldr	r3, [pc, #196]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d208      	bcs.n	8001cea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd8:	4b2e      	ldr	r3, [pc, #184]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	492b      	ldr	r1, [pc, #172]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cea:	4b29      	ldr	r3, [pc, #164]	@ (8001d90 <HAL_RCC_ClockConfig+0x1ec>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d210      	bcs.n	8001d1a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf8:	4b25      	ldr	r3, [pc, #148]	@ (8001d90 <HAL_RCC_ClockConfig+0x1ec>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f023 0207 	bic.w	r2, r3, #7
 8001d00:	4923      	ldr	r1, [pc, #140]	@ (8001d90 <HAL_RCC_ClockConfig+0x1ec>)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d08:	4b21      	ldr	r3, [pc, #132]	@ (8001d90 <HAL_RCC_ClockConfig+0x1ec>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d001      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e036      	b.n	8001d88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d008      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d26:	4b1b      	ldr	r3, [pc, #108]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	4918      	ldr	r1, [pc, #96]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d009      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d44:	4b13      	ldr	r3, [pc, #76]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	4910      	ldr	r1, [pc, #64]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d58:	f000 f824 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	091b      	lsrs	r3, r3, #4
 8001d64:	f003 030f 	and.w	r3, r3, #15
 8001d68:	490b      	ldr	r1, [pc, #44]	@ (8001d98 <HAL_RCC_ClockConfig+0x1f4>)
 8001d6a:	5ccb      	ldrb	r3, [r1, r3]
 8001d6c:	f003 031f 	and.w	r3, r3, #31
 8001d70:	fa22 f303 	lsr.w	r3, r2, r3
 8001d74:	4a09      	ldr	r2, [pc, #36]	@ (8001d9c <HAL_RCC_ClockConfig+0x1f8>)
 8001d76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d78:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <HAL_RCC_ClockConfig+0x1fc>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fe05 	bl	800098c <HAL_InitTick>
 8001d82:	4603      	mov	r3, r0
 8001d84:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d86:	7afb      	ldrb	r3, [r7, #11]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40022000 	.word	0x40022000
 8001d94:	40021000 	.word	0x40021000
 8001d98:	08006508 	.word	0x08006508
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	20000004 	.word	0x20000004

08001da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b089      	sub	sp, #36	@ 0x24
 8001da8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
 8001dae:	2300      	movs	r3, #0
 8001db0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001db2:	4b3e      	ldr	r3, [pc, #248]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x108>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dbc:	4b3b      	ldr	r3, [pc, #236]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x108>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d005      	beq.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x34>
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	2b0c      	cmp	r3, #12
 8001dd0:	d121      	bne.n	8001e16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d11e      	bne.n	8001e16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001dd8:	4b34      	ldr	r3, [pc, #208]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x108>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0308 	and.w	r3, r3, #8
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d107      	bne.n	8001df4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001de4:	4b31      	ldr	r3, [pc, #196]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x108>)
 8001de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dea:	0a1b      	lsrs	r3, r3, #8
 8001dec:	f003 030f 	and.w	r3, r3, #15
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	e005      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001df4:	4b2d      	ldr	r3, [pc, #180]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x108>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	091b      	lsrs	r3, r3, #4
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e00:	4a2b      	ldr	r2, [pc, #172]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10d      	bne.n	8001e2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e14:	e00a      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d102      	bne.n	8001e22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e1c:	4b25      	ldr	r3, [pc, #148]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e1e:	61bb      	str	r3, [r7, #24]
 8001e20:	e004      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d101      	bne.n	8001e2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e28:	4b23      	ldr	r3, [pc, #140]	@ (8001eb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	2b0c      	cmp	r3, #12
 8001e30:	d134      	bne.n	8001e9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e32:	4b1e      	ldr	r3, [pc, #120]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x108>)
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d003      	beq.n	8001e4a <HAL_RCC_GetSysClockFreq+0xa6>
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d003      	beq.n	8001e50 <HAL_RCC_GetSysClockFreq+0xac>
 8001e48:	e005      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e4c:	617b      	str	r3, [r7, #20]
      break;
 8001e4e:	e005      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e50:	4b19      	ldr	r3, [pc, #100]	@ (8001eb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e52:	617b      	str	r3, [r7, #20]
      break;
 8001e54:	e002      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	617b      	str	r3, [r7, #20]
      break;
 8001e5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e5c:	4b13      	ldr	r3, [pc, #76]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x108>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	091b      	lsrs	r3, r3, #4
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	3301      	adds	r3, #1
 8001e68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e6a:	4b10      	ldr	r3, [pc, #64]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x108>)
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	0a1b      	lsrs	r3, r3, #8
 8001e70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	fb03 f202 	mul.w	r2, r3, r2
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e82:	4b0a      	ldr	r3, [pc, #40]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x108>)
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	0e5b      	lsrs	r3, r3, #25
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e9c:	69bb      	ldr	r3, [r7, #24]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3724      	adds	r7, #36	@ 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	08006518 	.word	0x08006518
 8001eb4:	00f42400 	.word	0x00f42400
 8001eb8:	007a1200 	.word	0x007a1200

08001ebc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ec8:	4b2a      	ldr	r3, [pc, #168]	@ (8001f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ecc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ed4:	f7ff fa26 	bl	8001324 <HAL_PWREx_GetVoltageRange>
 8001ed8:	6178      	str	r0, [r7, #20]
 8001eda:	e014      	b.n	8001f06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001edc:	4b25      	ldr	r3, [pc, #148]	@ (8001f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee0:	4a24      	ldr	r2, [pc, #144]	@ (8001f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ee2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ee6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ee8:	4b22      	ldr	r3, [pc, #136]	@ (8001f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ef4:	f7ff fa16 	bl	8001324 <HAL_PWREx_GetVoltageRange>
 8001ef8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001efa:	4b1e      	ldr	r3, [pc, #120]	@ (8001f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001efe:	4a1d      	ldr	r2, [pc, #116]	@ (8001f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f04:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f0c:	d10b      	bne.n	8001f26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b80      	cmp	r3, #128	@ 0x80
 8001f12:	d919      	bls.n	8001f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f18:	d902      	bls.n	8001f20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	e013      	b.n	8001f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f20:	2301      	movs	r3, #1
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	e010      	b.n	8001f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b80      	cmp	r3, #128	@ 0x80
 8001f2a:	d902      	bls.n	8001f32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	e00a      	b.n	8001f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b80      	cmp	r3, #128	@ 0x80
 8001f36:	d102      	bne.n	8001f3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f38:	2302      	movs	r3, #2
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	e004      	b.n	8001f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b70      	cmp	r3, #112	@ 0x70
 8001f42:	d101      	bne.n	8001f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f44:	2301      	movs	r3, #1
 8001f46:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f48:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f023 0207 	bic.w	r2, r3, #7
 8001f50:	4909      	ldr	r1, [pc, #36]	@ (8001f78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f58:	4b07      	ldr	r3, [pc, #28]	@ (8001f78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d001      	beq.n	8001f6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40022000 	.word	0x40022000

08001f7c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001f80:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a04      	ldr	r2, [pc, #16]	@ (8001f98 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001f86:	f043 0304 	orr.w	r3, r3, #4
 8001f8a:	6013      	str	r3, [r2, #0]
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40021000 	.word	0x40021000

08001f9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e095      	b.n	80020da <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d108      	bne.n	8001fc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001fbe:	d009      	beq.n	8001fd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	61da      	str	r2, [r3, #28]
 8001fc6:	e005      	b.n	8001fd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d106      	bne.n	8001ff4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7fe fb8a 	bl	8000708 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800200a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002014:	d902      	bls.n	800201c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	e002      	b.n	8002022 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800201c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002020:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800202a:	d007      	beq.n	800203c <HAL_SPI_Init+0xa0>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002034:	d002      	beq.n	800203c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800204c:	431a      	orrs	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	431a      	orrs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002074:	431a      	orrs	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800207e:	ea42 0103 	orr.w	r1, r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002086:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	0c1b      	lsrs	r3, r3, #16
 8002098:	f003 0204 	and.w	r2, r3, #4
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a0:	f003 0310 	and.w	r3, r3, #16
 80020a4:	431a      	orrs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80020b8:	ea42 0103 	orr.w	r1, r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b088      	sub	sp, #32
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	603b      	str	r3, [r7, #0]
 80020ee:	4613      	mov	r3, r2
 80020f0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020f2:	f7fe fc9b 	bl	8000a2c <HAL_GetTick>
 80020f6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80020f8:	88fb      	ldrh	r3, [r7, #6]
 80020fa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b01      	cmp	r3, #1
 8002106:	d001      	beq.n	800210c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002108:	2302      	movs	r3, #2
 800210a:	e15c      	b.n	80023c6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d002      	beq.n	8002118 <HAL_SPI_Transmit+0x36>
 8002112:	88fb      	ldrh	r3, [r7, #6]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e154      	b.n	80023c6 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002122:	2b01      	cmp	r3, #1
 8002124:	d101      	bne.n	800212a <HAL_SPI_Transmit+0x48>
 8002126:	2302      	movs	r3, #2
 8002128:	e14d      	b.n	80023c6 <HAL_SPI_Transmit+0x2e4>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2203      	movs	r2, #3
 8002136:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	88fa      	ldrh	r2, [r7, #6]
 800214a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	88fa      	ldrh	r2, [r7, #6]
 8002150:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800217c:	d10f      	bne.n	800219e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800218c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800219c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021a8:	2b40      	cmp	r3, #64	@ 0x40
 80021aa:	d007      	beq.n	80021bc <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80021c4:	d952      	bls.n	800226c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d002      	beq.n	80021d4 <HAL_SPI_Transmit+0xf2>
 80021ce:	8b7b      	ldrh	r3, [r7, #26]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d145      	bne.n	8002260 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d8:	881a      	ldrh	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e4:	1c9a      	adds	r2, r3, #2
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	3b01      	subs	r3, #1
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80021f8:	e032      	b.n	8002260 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b02      	cmp	r3, #2
 8002206:	d112      	bne.n	800222e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800220c:	881a      	ldrh	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002218:	1c9a      	adds	r2, r3, #2
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002222:	b29b      	uxth	r3, r3
 8002224:	3b01      	subs	r3, #1
 8002226:	b29a      	uxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800222c:	e018      	b.n	8002260 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800222e:	f7fe fbfd 	bl	8000a2c <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d803      	bhi.n	8002246 <HAL_SPI_Transmit+0x164>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002244:	d102      	bne.n	800224c <HAL_SPI_Transmit+0x16a>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d109      	bne.n	8002260 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e0b2      	b.n	80023c6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002264:	b29b      	uxth	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1c7      	bne.n	80021fa <HAL_SPI_Transmit+0x118>
 800226a:	e083      	b.n	8002374 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d002      	beq.n	800227a <HAL_SPI_Transmit+0x198>
 8002274:	8b7b      	ldrh	r3, [r7, #26]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d177      	bne.n	800236a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800227e:	b29b      	uxth	r3, r3
 8002280:	2b01      	cmp	r3, #1
 8002282:	d912      	bls.n	80022aa <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002288:	881a      	ldrh	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002294:	1c9a      	adds	r2, r3, #2
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800229e:	b29b      	uxth	r3, r3
 80022a0:	3b02      	subs	r3, #2
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80022a8:	e05f      	b.n	800236a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	330c      	adds	r3, #12
 80022b4:	7812      	ldrb	r2, [r2, #0]
 80022b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	3b01      	subs	r3, #1
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80022d0:	e04b      	b.n	800236a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d12b      	bne.n	8002338 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d912      	bls.n	8002310 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ee:	881a      	ldrh	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022fa:	1c9a      	adds	r2, r3, #2
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002304:	b29b      	uxth	r3, r3
 8002306:	3b02      	subs	r3, #2
 8002308:	b29a      	uxth	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800230e:	e02c      	b.n	800236a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	330c      	adds	r3, #12
 800231a:	7812      	ldrb	r2, [r2, #0]
 800231c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800232c:	b29b      	uxth	r3, r3
 800232e:	3b01      	subs	r3, #1
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002336:	e018      	b.n	800236a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002338:	f7fe fb78 	bl	8000a2c <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d803      	bhi.n	8002350 <HAL_SPI_Transmit+0x26e>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234e:	d102      	bne.n	8002356 <HAL_SPI_Transmit+0x274>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e02d      	b.n	80023c6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800236e:	b29b      	uxth	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1ae      	bne.n	80022d2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002374:	69fa      	ldr	r2, [r7, #28]
 8002376:	6839      	ldr	r1, [r7, #0]
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 f947 	bl	800260c <SPI_EndRxTxTransaction>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d002      	beq.n	800238a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2220      	movs	r2, #32
 8002388:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10a      	bne.n	80023a8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80023c4:	2300      	movs	r3, #0
  }
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3720      	adds	r7, #32
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	4613      	mov	r3, r2
 80023de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80023e0:	f7fe fb24 	bl	8000a2c <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	4413      	add	r3, r2
 80023ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80023f0:	f7fe fb1c 	bl	8000a2c <HAL_GetTick>
 80023f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80023f6:	4b39      	ldr	r3, [pc, #228]	@ (80024dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	015b      	lsls	r3, r3, #5
 80023fc:	0d1b      	lsrs	r3, r3, #20
 80023fe:	69fa      	ldr	r2, [r7, #28]
 8002400:	fb02 f303 	mul.w	r3, r2, r3
 8002404:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002406:	e054      	b.n	80024b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240e:	d050      	beq.n	80024b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002410:	f7fe fb0c 	bl	8000a2c <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	69fa      	ldr	r2, [r7, #28]
 800241c:	429a      	cmp	r2, r3
 800241e:	d902      	bls.n	8002426 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d13d      	bne.n	80024a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002434:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800243e:	d111      	bne.n	8002464 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002448:	d004      	beq.n	8002454 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002452:	d107      	bne.n	8002464 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002462:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002468:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800246c:	d10f      	bne.n	800248e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800248c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e017      	b.n	80024d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4013      	ands	r3, r2
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	429a      	cmp	r2, r3
 80024c0:	bf0c      	ite	eq
 80024c2:	2301      	moveq	r3, #1
 80024c4:	2300      	movne	r3, #0
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	461a      	mov	r2, r3
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d19b      	bne.n	8002408 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3720      	adds	r7, #32
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000000 	.word	0x20000000

080024e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08a      	sub	sp, #40	@ 0x28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
 80024ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80024f2:	f7fe fa9b 	bl	8000a2c <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fa:	1a9b      	subs	r3, r3, r2
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	4413      	add	r3, r2
 8002500:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002502:	f7fe fa93 	bl	8000a2c <HAL_GetTick>
 8002506:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	330c      	adds	r3, #12
 800250e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002510:	4b3d      	ldr	r3, [pc, #244]	@ (8002608 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	00da      	lsls	r2, r3, #3
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	0d1b      	lsrs	r3, r3, #20
 8002520:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002522:	fb02 f303 	mul.w	r3, r2, r3
 8002526:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002528:	e060      	b.n	80025ec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002530:	d107      	bne.n	8002542 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d104      	bne.n	8002542 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002540:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002548:	d050      	beq.n	80025ec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800254a:	f7fe fa6f 	bl	8000a2c <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002556:	429a      	cmp	r2, r3
 8002558:	d902      	bls.n	8002560 <SPI_WaitFifoStateUntilTimeout+0x80>
 800255a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255c:	2b00      	cmp	r3, #0
 800255e:	d13d      	bne.n	80025dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800256e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002578:	d111      	bne.n	800259e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002582:	d004      	beq.n	800258e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800258c:	d107      	bne.n	800259e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800259c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025a6:	d10f      	bne.n	80025c8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80025c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e010      	b.n	80025fe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	3b01      	subs	r3, #1
 80025ea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	4013      	ands	r3, r2
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d196      	bne.n	800252a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3728      	adds	r7, #40	@ 0x28
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000000 	.word	0x20000000

0800260c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af02      	add	r7, sp, #8
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2200      	movs	r2, #0
 8002620:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f7ff ff5b 	bl	80024e0 <SPI_WaitFifoStateUntilTimeout>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d007      	beq.n	8002640 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002634:	f043 0220 	orr.w	r2, r3, #32
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e027      	b.n	8002690 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2200      	movs	r2, #0
 8002648:	2180      	movs	r1, #128	@ 0x80
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f7ff fec0 	bl	80023d0 <SPI_WaitFlagStateUntilTimeout>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d007      	beq.n	8002666 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800265a:	f043 0220 	orr.w	r2, r3, #32
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e014      	b.n	8002690 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2200      	movs	r2, #0
 800266e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f7ff ff34 	bl	80024e0 <SPI_WaitFifoStateUntilTimeout>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d007      	beq.n	800268e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002682:	f043 0220 	orr.w	r2, r3, #32
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e000      	b.n	8002690 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	7992      	ldrb	r2, [r2, #6]
 80026aa:	08d2      	lsrs	r2, r2, #3
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	fb13 f302 	smulbb	r3, r3, r2
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	889b      	ldrh	r3, [r3, #4]
 80026bc:	461a      	mov	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	885b      	ldrh	r3, [r3, #2]
 80026c2:	fb02 f303 	mul.w	r3, r2, r3
 80026c6:	461a      	mov	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	60da      	str	r2, [r3, #12]
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 80026de:	b490      	push	{r4, r7}
 80026e0:	b086      	sub	sp, #24
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	4604      	mov	r4, r0
 80026e6:	4608      	mov	r0, r1
 80026e8:	1d39      	adds	r1, r7, #4
 80026ea:	e881 000c 	stmia.w	r1, {r2, r3}
 80026ee:	4623      	mov	r3, r4
 80026f0:	81fb      	strh	r3, [r7, #14]
 80026f2:	4603      	mov	r3, r0
 80026f4:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 80026f6:	2300      	movs	r3, #0
 80026f8:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 80026fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026fe:	88ba      	ldrh	r2, [r7, #4]
 8002700:	4293      	cmp	r3, r2
 8002702:	da04      	bge.n	800270e <code+0x30>
        code |= LEFT;
 8002704:	2201      	movs	r2, #1
 8002706:	7dfb      	ldrb	r3, [r7, #23]
 8002708:	4313      	orrs	r3, r2
 800270a:	75fb      	strb	r3, [r7, #23]
 800270c:	e008      	b.n	8002720 <code+0x42>
    } else if (x0 > window.x1) {
 800270e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002712:	893a      	ldrh	r2, [r7, #8]
 8002714:	4293      	cmp	r3, r2
 8002716:	dd03      	ble.n	8002720 <code+0x42>
        code |= RIGHT;
 8002718:	2202      	movs	r2, #2
 800271a:	7dfb      	ldrb	r3, [r7, #23]
 800271c:	4313      	orrs	r3, r2
 800271e:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8002720:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002724:	88fa      	ldrh	r2, [r7, #6]
 8002726:	4293      	cmp	r3, r2
 8002728:	da04      	bge.n	8002734 <code+0x56>
        code |= BOTTOM;
 800272a:	2204      	movs	r2, #4
 800272c:	7dfb      	ldrb	r3, [r7, #23]
 800272e:	4313      	orrs	r3, r2
 8002730:	75fb      	strb	r3, [r7, #23]
 8002732:	e008      	b.n	8002746 <code+0x68>
    } else if (y0 > window.y1) {
 8002734:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002738:	897a      	ldrh	r2, [r7, #10]
 800273a:	4293      	cmp	r3, r2
 800273c:	dd03      	ble.n	8002746 <code+0x68>
        code |= TOP;
 800273e:	2208      	movs	r2, #8
 8002740:	7dfb      	ldrb	r3, [r7, #23]
 8002742:	4313      	orrs	r3, r2
 8002744:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8002746:	7dfb      	ldrb	r3, [r7, #23]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bc90      	pop	{r4, r7}
 8002750:	4770      	bx	lr

08002752 <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b088      	sub	sp, #32
 8002756:	af00      	add	r7, sp, #0
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f9b3 1000 	ldrsh.w	r1, [r3]
 800276c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002770:	cb0c      	ldmia	r3, {r2, r3}
 8002772:	f7ff ffb4 	bl	80026de <code>
 8002776:	4603      	mov	r3, r0
 8002778:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002786:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800278a:	cb0c      	ldmia	r3, {r2, r3}
 800278c:	f7ff ffa7 	bl	80026de <code>
 8002790:	4603      	mov	r3, r0
 8002792:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8002794:	2300      	movs	r3, #0
 8002796:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8002798:	7ffa      	ldrb	r2, [r7, #31]
 800279a:	7fbb      	ldrb	r3, [r7, #30]
 800279c:	4313      	orrs	r3, r2
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d102      	bne.n	80027aa <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 80027a4:	2301      	movs	r3, #1
 80027a6:	777b      	strb	r3, [r7, #29]
            break;
 80027a8:	e0e9      	b.n	800297e <clip_line+0x22c>
        } else if (code0 & code1) {
 80027aa:	7ffa      	ldrb	r2, [r7, #31]
 80027ac:	7fbb      	ldrb	r3, [r7, #30]
 80027ae:	4013      	ands	r3, r2
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f040 80e2 	bne.w	800297c <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 80027c0:	7ffb      	ldrb	r3, [r7, #31]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <clip_line+0x78>
 80027c6:	7ffb      	ldrb	r3, [r7, #31]
 80027c8:	e000      	b.n	80027cc <clip_line+0x7a>
 80027ca:	7fbb      	ldrb	r3, [r7, #30]
 80027cc:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 80027ce:	2208      	movs	r2, #8
 80027d0:	7dfb      	ldrb	r3, [r7, #23]
 80027d2:	4013      	ands	r3, r2
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d024      	beq.n	8002824 <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027e8:	4619      	mov	r1, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027f0:	1acb      	subs	r3, r1, r3
 80027f2:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 80027f4:	4608      	mov	r0, r1
 80027f6:	68b9      	ldr	r1, [r7, #8]
 80027f8:	f9b1 1000 	ldrsh.w	r1, [r1]
 80027fc:	1a41      	subs	r1, r0, r1
 80027fe:	fb03 f101 	mul.w	r1, r3, r1
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002808:	4618      	mov	r0, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002810:	1ac3      	subs	r3, r0, r3
 8002812:	fb91 f3f3 	sdiv	r3, r1, r3
 8002816:	b29b      	uxth	r3, r3
 8002818:	4413      	add	r3, r2
 800281a:	b29b      	uxth	r3, r3
 800281c:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 800281e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002820:	833b      	strh	r3, [r7, #24]
 8002822:	e07f      	b.n	8002924 <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8002824:	2204      	movs	r2, #4
 8002826:	7dfb      	ldrb	r3, [r7, #23]
 8002828:	4013      	ands	r3, r2
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d024      	beq.n	800287a <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002836:	b29a      	uxth	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800283e:	4619      	mov	r1, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002846:	1acb      	subs	r3, r1, r3
 8002848:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800284a:	4608      	mov	r0, r1
 800284c:	68b9      	ldr	r1, [r7, #8]
 800284e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8002852:	1a41      	subs	r1, r0, r1
 8002854:	fb03 f101 	mul.w	r1, r3, r1
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800285e:	4618      	mov	r0, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002866:	1ac3      	subs	r3, r0, r3
 8002868:	fb91 f3f3 	sdiv	r3, r1, r3
 800286c:	b29b      	uxth	r3, r3
 800286e:	4413      	add	r3, r2
 8002870:	b29b      	uxth	r3, r3
 8002872:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8002874:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002876:	833b      	strh	r3, [r7, #24]
 8002878:	e054      	b.n	8002924 <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 800287a:	2202      	movs	r2, #2
 800287c:	7dfb      	ldrb	r3, [r7, #23]
 800287e:	4013      	ands	r3, r2
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d024      	beq.n	80028d0 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	f9b3 3000 	ldrsh.w	r3, [r3]
 800288c:	b29a      	uxth	r2, r3
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002894:	4619      	mov	r1, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f9b3 3000 	ldrsh.w	r3, [r3]
 800289c:	1acb      	subs	r3, r1, r3
 800289e:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 80028a0:	4608      	mov	r0, r1
 80028a2:	68f9      	ldr	r1, [r7, #12]
 80028a4:	f9b1 1000 	ldrsh.w	r1, [r1]
 80028a8:	1a41      	subs	r1, r0, r1
 80028aa:	fb03 f101 	mul.w	r1, r3, r1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028b4:	4618      	mov	r0, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028bc:	1ac3      	subs	r3, r0, r3
 80028be:	fb91 f3f3 	sdiv	r3, r1, r3
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 80028ca:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80028cc:	837b      	strh	r3, [r7, #26]
 80028ce:	e029      	b.n	8002924 <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 80028d0:	2201      	movs	r2, #1
 80028d2:	7dfb      	ldrb	r3, [r7, #23]
 80028d4:	4013      	ands	r3, r2
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d023      	beq.n	8002924 <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ea:	4619      	mov	r1, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028f2:	1acb      	subs	r3, r1, r3
 80028f4:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 80028f6:	4608      	mov	r0, r1
 80028f8:	68f9      	ldr	r1, [r7, #12]
 80028fa:	f9b1 1000 	ldrsh.w	r1, [r1]
 80028fe:	1a41      	subs	r1, r0, r1
 8002900:	fb03 f101 	mul.w	r1, r3, r1
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f9b3 3000 	ldrsh.w	r3, [r3]
 800290a:	4618      	mov	r0, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002912:	1ac3      	subs	r3, r0, r3
 8002914:	fb91 f3f3 	sdiv	r3, r1, r3
 8002918:	b29b      	uxth	r3, r3
 800291a:	4413      	add	r3, r2
 800291c:	b29b      	uxth	r3, r3
 800291e:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8002920:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002922:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8002924:	7dfa      	ldrb	r2, [r7, #23]
 8002926:	7ffb      	ldrb	r3, [r7, #31]
 8002928:	429a      	cmp	r2, r3
 800292a:	d113      	bne.n	8002954 <clip_line+0x202>
                *x0 = x;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8b7a      	ldrh	r2, [r7, #26]
 8002930:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	8b3a      	ldrh	r2, [r7, #24]
 8002936:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002944:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002948:	cb0c      	ldmia	r3, {r2, r3}
 800294a:	f7ff fec8 	bl	80026de <code>
 800294e:	4603      	mov	r3, r0
 8002950:	77fb      	strb	r3, [r7, #31]
 8002952:	e721      	b.n	8002798 <clip_line+0x46>
            } else {
                *x1 = x;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	8b7a      	ldrh	r2, [r7, #26]
 8002958:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	8b3a      	ldrh	r2, [r7, #24]
 800295e:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	f9b3 1000 	ldrsh.w	r1, [r3]
 800296c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002970:	cb0c      	ldmia	r3, {r2, r3}
 8002972:	f7ff feb4 	bl	80026de <code>
 8002976:	4603      	mov	r3, r0
 8002978:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 800297a:	e70d      	b.n	8002798 <clip_line+0x46>
            break;
 800297c:	bf00      	nop
            }
        }
    }

    return accept;
 800297e:	7f7b      	ldrb	r3, [r7, #29]
 8002980:	4618      	mov	r0, r3
 8002982:	3720      	adds	r7, #32
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	3306      	adds	r3, #6
 8002998:	2208      	movs	r2, #8
 800299a:	4619      	mov	r1, r3
 800299c:	f000 fd58 	bl	8003450 <memcpy>
    meta->width = font[FONTX_WIDTH];
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	330e      	adds	r3, #14
 80029a4:	781a      	ldrb	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	330f      	adds	r3, #15
 80029ae:	781a      	ldrb	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	3310      	adds	r3, #16
 80029b8:	781a      	ldrb	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	72da      	strb	r2, [r3, #11]

    return 0;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08e      	sub	sp, #56	@ 0x38
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff ffd4 	bl	8002988 <fontx_meta>
 80029e0:	4603      	mov	r3, r0
 80029e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (0 != status) {
 80029e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <fontx_glyph+0x2c>
        return status;
 80029ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80029f2:	e077      	b.n	8002ae4 <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 80029f4:	7f7a      	ldrb	r2, [r7, #29]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 80029fa:	7fba      	ldrb	r2, [r7, #30]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8002a00:	7f7b      	ldrb	r3, [r7, #29]
 8002a02:	3307      	adds	r3, #7
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	da00      	bge.n	8002a0a <fontx_glyph+0x42>
 8002a08:	3307      	adds	r3, #7
 8002a0a:	10db      	asrs	r3, r3, #3
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	78da      	ldrb	r2, [r3, #3]
 8002a16:	7fbb      	ldrb	r3, [r7, #30]
 8002a18:	fb12 f303 	smulbb	r3, r2, r3
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 8002a22:	7ffb      	ldrb	r3, [r7, #31]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10f      	bne.n	8002a48 <fontx_glyph+0x80>
        if (code < 0x100) {
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2bff      	cmp	r3, #255	@ 0xff
 8002a2c:	d859      	bhi.n	8002ae2 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	789b      	ldrb	r3, [r3, #2]
 8002a32:	461a      	mov	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	fb02 f303 	mul.w	r3, r2, r3
 8002a3a:	3311      	adds	r3, #17
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	441a      	add	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	e04d      	b.n	8002ae4 <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3312      	adds	r3, #18
 8002a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nc = 0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	637b      	str	r3, [r7, #52]	@ 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3311      	adds	r3, #17
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	633b      	str	r3, [r7, #48]	@ 0x30
        while (bc--) {
 8002a5a:	e03d      	b.n	8002ad8 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 8002a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a64:	3301      	adds	r3, #1
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	021b      	lsls	r3, r3, #8
 8002a6a:	4413      	add	r3, r2
 8002a6c:	627b      	str	r3, [r7, #36]	@ 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8002a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a70:	3302      	adds	r3, #2
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	461a      	mov	r2, r3
 8002a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a78:	3303      	adds	r3, #3
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	021b      	lsls	r3, r3, #8
 8002a7e:	4413      	add	r3, r2
 8002a80:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d31c      	bcc.n	8002ac4 <fontx_glyph+0xfc>
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d818      	bhi.n	8002ac4 <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a9a:	4413      	add	r3, r2
 8002a9c:	637b      	str	r3, [r7, #52]	@ 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3311      	adds	r3, #17
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	461a      	mov	r2, r3
                    nc * glyph->size
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	789b      	ldrb	r3, [r3, #2]
 8002aac:	4619      	mov	r1, r3
 8002aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	441a      	add	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	e00f      	b.n	8002ae4 <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8002ac4:	6a3a      	ldr	r2, [r7, #32]
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac8:	1ad2      	subs	r2, r2, r3
 8002aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002acc:	4413      	add	r3, r2
 8002ace:	3301      	adds	r3, #1
 8002ad0:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Next code block_table. */
            block_table += 4;
 8002ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (bc--) {
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ada:	1e5a      	subs	r2, r3, #1
 8002adc:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1bc      	bne.n	8002a5c <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3738      	adds	r7, #56	@ 0x38
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	dd01      	ble.n	8002b02 <min+0x16>
        return b;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	e000      	b.n	8002b04 <min+0x18>
    };
    return a;
 8002b02:	687b      	ldr	r3, [r7, #4]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	80fb      	strh	r3, [r7, #6]
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	80bb      	strh	r3, [r7, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8002b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b26:	4a12      	ldr	r2, [pc, #72]	@ (8002b70 <hagl_put_pixel+0x60>)
 8002b28:	8812      	ldrh	r2, [r2, #0]
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	db1a      	blt.n	8002b64 <hagl_put_pixel+0x54>
 8002b2e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002b32:	4a0f      	ldr	r2, [pc, #60]	@ (8002b70 <hagl_put_pixel+0x60>)
 8002b34:	8852      	ldrh	r2, [r2, #2]
 8002b36:	4293      	cmp	r3, r2
 8002b38:	db14      	blt.n	8002b64 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8002b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b3e:	4a0c      	ldr	r2, [pc, #48]	@ (8002b70 <hagl_put_pixel+0x60>)
 8002b40:	8892      	ldrh	r2, [r2, #4]
 8002b42:	4293      	cmp	r3, r2
 8002b44:	dc10      	bgt.n	8002b68 <hagl_put_pixel+0x58>
 8002b46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002b4a:	4a09      	ldr	r2, [pc, #36]	@ (8002b70 <hagl_put_pixel+0x60>)
 8002b4c:	88d2      	ldrh	r2, [r2, #6]
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	dc0a      	bgt.n	8002b68 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8002b52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b56:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002b5a:	887a      	ldrh	r2, [r7, #2]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fd fc89 	bl	8000474 <lcd_put_pixel>
 8002b62:	e002      	b.n	8002b6a <hagl_put_pixel+0x5a>
        return;
 8002b64:	bf00      	nop
 8002b66:	e000      	b.n	8002b6a <hagl_put_pixel+0x5a>
        return;
 8002b68:	bf00      	nop
}
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	2000000c 	.word	0x2000000c

08002b74 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8002b74:	b590      	push	{r4, r7, lr}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af02      	add	r7, sp, #8
 8002b7a:	4604      	mov	r4, r0
 8002b7c:	4608      	mov	r0, r1
 8002b7e:	4611      	mov	r1, r2
 8002b80:	461a      	mov	r2, r3
 8002b82:	4623      	mov	r3, r4
 8002b84:	80fb      	strh	r3, [r7, #6]
 8002b86:	4603      	mov	r3, r0
 8002b88:	80bb      	strh	r3, [r7, #4]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	807b      	strh	r3, [r7, #2]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8002b92:	88fa      	ldrh	r2, [r7, #6]
 8002b94:	887b      	ldrh	r3, [r7, #2]
 8002b96:	4413      	add	r3, r2
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	b21a      	sxth	r2, r3
 8002b9c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8002ba0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002ba4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002ba8:	883b      	ldrh	r3, [r7, #0]
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	4623      	mov	r3, r4
 8002bae:	f000 f827 	bl	8002c00 <hagl_draw_line>
#endif
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd90      	pop	{r4, r7, pc}

08002bba <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 8002bba:	b590      	push	{r4, r7, lr}
 8002bbc:	b085      	sub	sp, #20
 8002bbe:	af02      	add	r7, sp, #8
 8002bc0:	4604      	mov	r4, r0
 8002bc2:	4608      	mov	r0, r1
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	4623      	mov	r3, r4
 8002bca:	80fb      	strh	r3, [r7, #6]
 8002bcc:	4603      	mov	r3, r0
 8002bce:	80bb      	strh	r3, [r7, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	807b      	strh	r3, [r7, #2]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 8002bd8:	88ba      	ldrh	r2, [r7, #4]
 8002bda:	887b      	ldrh	r3, [r7, #2]
 8002bdc:	4413      	add	r3, r2
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	b21c      	sxth	r4, r3
 8002be2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002be6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002bea:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002bee:	883b      	ldrh	r3, [r7, #0]
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	4623      	mov	r3, r4
 8002bf4:	f000 f804 	bl	8002c00 <hagl_draw_line>
#endif
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd90      	pop	{r4, r7, pc}

08002c00 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8002c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c02:	b089      	sub	sp, #36	@ 0x24
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	4604      	mov	r4, r0
 8002c08:	4608      	mov	r0, r1
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4623      	mov	r3, r4
 8002c10:	80fb      	strh	r3, [r7, #6]
 8002c12:	4603      	mov	r3, r0
 8002c14:	80bb      	strh	r3, [r7, #4]
 8002c16:	460b      	mov	r3, r1
 8002c18:	807b      	strh	r3, [r7, #2]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8002c1e:	463b      	mov	r3, r7
 8002c20:	1cba      	adds	r2, r7, #2
 8002c22:	1d3d      	adds	r5, r7, #4
 8002c24:	1dbc      	adds	r4, r7, #6
 8002c26:	494a      	ldr	r1, [pc, #296]	@ (8002d50 <hagl_draw_line+0x150>)
 8002c28:	466e      	mov	r6, sp
 8002c2a:	c903      	ldmia	r1, {r0, r1}
 8002c2c:	e886 0003 	stmia.w	r6, {r0, r1}
 8002c30:	4629      	mov	r1, r5
 8002c32:	4620      	mov	r0, r4
 8002c34:	f7ff fd8d 	bl	8002752 <clip_line>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	f083 0301 	eor.w	r3, r3, #1
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d17e      	bne.n	8002d42 <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8002c44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	bfb8      	it	lt
 8002c54:	425b      	neglt	r3, r3
 8002c56:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8002c58:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002c5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	da01      	bge.n	8002c68 <hagl_draw_line+0x68>
 8002c64:	2301      	movs	r3, #1
 8002c66:	e001      	b.n	8002c6c <hagl_draw_line+0x6c>
 8002c68:	f04f 33ff 	mov.w	r3, #4294967295
 8002c6c:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8002c6e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002c72:	461a      	mov	r2, r3
 8002c74:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	bfb8      	it	lt
 8002c7e:	425b      	neglt	r3, r3
 8002c80:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 8002c82:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002c86:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	da01      	bge.n	8002c92 <hagl_draw_line+0x92>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e001      	b.n	8002c96 <hagl_draw_line+0x96>
 8002c92:	f04f 33ff 	mov.w	r3, #4294967295
 8002c96:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8002c98:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002c9c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	dd06      	ble.n	8002cb2 <hagl_draw_line+0xb2>
 8002ca4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002ca8:	0fda      	lsrs	r2, r3, #31
 8002caa:	4413      	add	r3, r2
 8002cac:	105b      	asrs	r3, r3, #1
 8002cae:	b21b      	sxth	r3, r3
 8002cb0:	e006      	b.n	8002cc0 <hagl_draw_line+0xc0>
 8002cb2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002cb6:	0fda      	lsrs	r2, r3, #31
 8002cb8:	4413      	add	r3, r2
 8002cba:	105b      	asrs	r3, r3, #1
 8002cbc:	425b      	negs	r3, r3
 8002cbe:	b21b      	sxth	r3, r3
 8002cc0:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 8002cc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cc6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002cca:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff ff1f 	bl	8002b10 <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 8002cd2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002cd6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d105      	bne.n	8002cea <hagl_draw_line+0xea>
 8002cde:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002ce2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d02d      	beq.n	8002d46 <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 8002cea:	8afb      	ldrh	r3, [r7, #22]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 8002cf2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002cf6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002cfa:	425b      	negs	r3, r3
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	dd0c      	ble.n	8002d1a <hagl_draw_line+0x11a>
            err -= dy;
 8002d00:	8afa      	ldrh	r2, [r7, #22]
 8002d02:	8a3b      	ldrh	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8002d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	8a7b      	ldrh	r3, [r7, #18]
 8002d12:	4413      	add	r3, r2
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	b21b      	sxth	r3, r3
 8002d18:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 8002d1a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002d1e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	dacd      	bge.n	8002cc2 <hagl_draw_line+0xc2>
            err += dx;
 8002d26:	8afa      	ldrh	r2, [r7, #22]
 8002d28:	8abb      	ldrh	r3, [r7, #20]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 8002d30:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	89fb      	ldrh	r3, [r7, #14]
 8002d38:	4413      	add	r3, r2
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	b21b      	sxth	r3, r3
 8002d3e:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 8002d40:	e7bf      	b.n	8002cc2 <hagl_draw_line+0xc2>
        return;
 8002d42:	bf00      	nop
 8002d44:	e000      	b.n	8002d48 <hagl_draw_line+0x148>
            break;
 8002d46:	bf00      	nop
        }
    }
}
 8002d48:	371c      	adds	r7, #28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	2000000c 	.word	0x2000000c

08002d54 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8002d54:	b590      	push	{r4, r7, lr}
 8002d56:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8002d62:	f844 0c24 	str.w	r0, [r4, #-36]
 8002d66:	460c      	mov	r4, r1
 8002d68:	4610      	mov	r0, r2
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d70:	4622      	mov	r2, r4
 8002d72:	f823 2c26 	strh.w	r2, [r3, #-38]
 8002d76:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	f823 2c28 	strh.w	r2, [r3, #-40]
 8002d80:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d84:	460a      	mov	r2, r1
 8002d86:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 8002d8a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d8e:	4619      	mov	r1, r3
 8002d90:	f107 0310 	add.w	r3, r7, #16
 8002d94:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	f851 1c24 	ldr.w	r1, [r1, #-36]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fe12 	bl	80029c8 <fontx_glyph>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8002daa:	f102 0209 	add.w	r2, r2, #9
 8002dae:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 8002db0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002db4:	f103 0309 	add.w	r3, r3, #9
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <hagl_put_char+0x6e>
        return 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	e0c0      	b.n	8002f44 <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 8002dc2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002dc6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002dd0:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 8002dd4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002dd8:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002de2:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 8002de6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002dea:	2210      	movs	r2, #16
 8002dec:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 8002df0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8002df4:	3a08      	subs	r2, #8
 8002df6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002dfa:	3b18      	subs	r3, #24
 8002dfc:	4611      	mov	r1, r2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fc4a 	bl	8002698 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 8002e04:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002e08:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8002e0c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8002e10:	f102 020c 	add.w	r2, r2, #12
 8002e14:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 8002e16:	2300      	movs	r3, #0
 8002e18:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8002e1c:	f102 020b 	add.w	r2, r2, #11
 8002e20:	7013      	strb	r3, [r2, #0]
 8002e22:	e071      	b.n	8002f08 <hagl_put_char+0x1b4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8002e24:	2300      	movs	r3, #0
 8002e26:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8002e2a:	f102 020a 	add.w	r2, r2, #10
 8002e2e:	7013      	strb	r3, [r2, #0]
 8002e30:	e047      	b.n	8002ec2 <hagl_put_char+0x16e>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 8002e32:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002e36:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	b25a      	sxtb	r2, r3
 8002e3e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002e42:	f103 030a 	add.w	r3, r3, #10
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	2180      	movs	r1, #128	@ 0x80
 8002e4e:	fa41 f303 	asr.w	r3, r1, r3
 8002e52:	b25b      	sxtb	r3, r3
 8002e54:	4013      	ands	r3, r2
 8002e56:	b25b      	sxtb	r3, r3
 8002e58:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8002e5c:	f102 0208 	add.w	r2, r2, #8
 8002e60:	7013      	strb	r3, [r2, #0]
            if (set) {
 8002e62:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002e66:	f103 0308 	add.w	r3, r3, #8
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d010      	beq.n	8002e92 <hagl_put_char+0x13e>
                *(ptr++) = color;
 8002e70:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002e74:	f103 030c 	add.w	r3, r3, #12
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	1c9a      	adds	r2, r3, #2
 8002e7c:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 8002e80:	f101 010c 	add.w	r1, r1, #12
 8002e84:	600a      	str	r2, [r1, #0]
 8002e86:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8002e8a:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 8002e8e:	801a      	strh	r2, [r3, #0]
 8002e90:	e00c      	b.n	8002eac <hagl_put_char+0x158>
            } else {
                *(ptr++) = 0x0000;
 8002e92:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002e96:	f103 030c 	add.w	r3, r3, #12
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	1c9a      	adds	r2, r3, #2
 8002e9e:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 8002ea2:	f101 010c 	add.w	r1, r1, #12
 8002ea6:	600a      	str	r2, [r1, #0]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 8002eac:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002eb0:	f103 030a 	add.w	r3, r3, #10
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8002ebc:	f102 020a 	add.w	r2, r2, #10
 8002ec0:	7013      	strb	r3, [r2, #0]
 8002ec2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002ec6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002eca:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8002ece:	f102 020a 	add.w	r2, r2, #10
 8002ed2:	7812      	ldrb	r2, [r2, #0]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d3ac      	bcc.n	8002e32 <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 8002ed8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002edc:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8002ee0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8002ee4:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8002eee:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8002ef2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002ef6:	f103 030b 	add.w	r3, r3, #11
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	3301      	adds	r3, #1
 8002efe:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8002f02:	f102 020b 	add.w	r2, r2, #11
 8002f06:	7013      	strb	r3, [r2, #0]
 8002f08:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f0c:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8002f10:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8002f14:	f102 020b 	add.w	r2, r2, #11
 8002f18:	7812      	ldrb	r2, [r2, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d382      	bcc.n	8002e24 <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 8002f1e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f22:	3b18      	subs	r3, #24
 8002f24:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8002f28:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 8002f2c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8002f30:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 8002f34:	461a      	mov	r2, r3
 8002f36:	f000 f85a 	bl	8002fee <hagl_blit>

    return bitmap.width;
 8002f3a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f3e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002f42:	b2db      	uxtb	r3, r3
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd90      	pop	{r4, r7, pc}

08002f50 <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08c      	sub	sp, #48	@ 0x30
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	4608      	mov	r0, r1
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	4603      	mov	r3, r0
 8002f60:	817b      	strh	r3, [r7, #10]
 8002f62:	460b      	mov	r3, r1
 8002f64:	813b      	strh	r3, [r7, #8]
 8002f66:	4613      	mov	r3, r2
 8002f68:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 8002f6a:	897b      	ldrh	r3, [r7, #10]
 8002f6c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8002f6e:	f107 0314 	add.w	r3, r7, #20
 8002f72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff fd07 	bl	8002988 <fontx_meta>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (0 != status) {
 8002f80:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <hagl_put_text+0x3c>
        return 0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	e02c      	b.n	8002fe6 <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1d1a      	adds	r2, r3, #4
 8002f90:	60fa      	str	r2, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	2b0d      	cmp	r3, #13
 8002f9a:	d002      	beq.n	8002fa2 <hagl_put_text+0x52>
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	2b0a      	cmp	r3, #10
 8002fa0:	d108      	bne.n	8002fb4 <hagl_put_text+0x64>
            x0 = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 8002fa6:	7fbb      	ldrb	r3, [r7, #30]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	893b      	ldrh	r3, [r7, #8]
 8002fac:	4413      	add	r3, r2
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	813b      	strh	r3, [r7, #8]
 8002fb2:	e010      	b.n	8002fd6 <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 8002fb4:	88f8      	ldrh	r0, [r7, #6]
 8002fb6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002fba:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	6a38      	ldr	r0, [r7, #32]
 8002fc6:	f7ff fec5 	bl	8002d54 <hagl_put_char>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	461a      	mov	r2, r3
 8002fce:	897b      	ldrh	r3, [r7, #10]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1d6      	bne.n	8002f8c <hagl_put_text+0x3c>

    return x0 - original;
 8002fde:	897a      	ldrh	r2, [r7, #10]
 8002fe0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	b29b      	uxth	r3, r3
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3728      	adds	r7, #40	@ 0x28
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b086      	sub	sp, #24
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	603a      	str	r2, [r7, #0]
 8002ff8:	80fb      	strh	r3, [r7, #6]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 8003004:	2300      	movs	r3, #0
 8003006:	827b      	strh	r3, [r7, #18]
 8003008:	e020      	b.n	800304c <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 800300a:	2300      	movs	r3, #0
 800300c:	823b      	strh	r3, [r7, #16]
 800300e:	e015      	b.n	800303c <hagl_blit+0x4e>
            color = *(ptr++);
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	1c9a      	adds	r2, r3, #2
 8003014:	617a      	str	r2, [r7, #20]
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 800301a:	88fa      	ldrh	r2, [r7, #6]
 800301c:	8a3b      	ldrh	r3, [r7, #16]
 800301e:	4413      	add	r3, r2
 8003020:	b29b      	uxth	r3, r3
 8003022:	b218      	sxth	r0, r3
 8003024:	88ba      	ldrh	r2, [r7, #4]
 8003026:	8a7b      	ldrh	r3, [r7, #18]
 8003028:	4413      	add	r3, r2
 800302a:	b29b      	uxth	r3, r3
 800302c:	b21b      	sxth	r3, r3
 800302e:	89fa      	ldrh	r2, [r7, #14]
 8003030:	4619      	mov	r1, r3
 8003032:	f7ff fd6d 	bl	8002b10 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8003036:	8a3b      	ldrh	r3, [r7, #16]
 8003038:	3301      	adds	r3, #1
 800303a:	823b      	strh	r3, [r7, #16]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	8a3a      	ldrh	r2, [r7, #16]
 8003042:	429a      	cmp	r2, r3
 8003044:	d3e4      	bcc.n	8003010 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 8003046:	8a7b      	ldrh	r3, [r7, #18]
 8003048:	3301      	adds	r3, #1
 800304a:	827b      	strh	r3, [r7, #18]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	885b      	ldrh	r3, [r3, #2]
 8003050:	8a7a      	ldrh	r2, [r7, #18]
 8003052:	429a      	cmp	r2, r3
 8003054:	d3d9      	bcc.n	800300a <hagl_blit+0x1c>
        }
    }
#endif
};
 8003056:	bf00      	nop
 8003058:	bf00      	nop
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <hagl_draw_rounded_rectangle>:
void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
    hagl_fill_polygon(3, vertices, color);
}

void hagl_draw_rounded_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t r, color_t color) {
 8003060:	b590      	push	{r4, r7, lr}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	4604      	mov	r4, r0
 8003068:	4608      	mov	r0, r1
 800306a:	4611      	mov	r1, r2
 800306c:	461a      	mov	r2, r3
 800306e:	4623      	mov	r3, r4
 8003070:	80fb      	strh	r3, [r7, #6]
 8003072:	4603      	mov	r3, r0
 8003074:	80bb      	strh	r3, [r7, #4]
 8003076:	460b      	mov	r3, r1
 8003078:	807b      	strh	r3, [r7, #2]
 800307a:	4613      	mov	r3, r2
 800307c:	803b      	strh	r3, [r7, #0]

    uint16_t width, height;
    int16_t x, y, d;

    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800307e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003082:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003086:	429a      	cmp	r2, r3
 8003088:	dd0e      	ble.n	80030a8 <hagl_draw_rounded_rectangle+0x48>
        x0 = x0 + x1;
 800308a:	88fa      	ldrh	r2, [r7, #6]
 800308c:	887b      	ldrh	r3, [r7, #2]
 800308e:	4413      	add	r3, r2
 8003090:	b29b      	uxth	r3, r3
 8003092:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8003094:	88fa      	ldrh	r2, [r7, #6]
 8003096:	887b      	ldrh	r3, [r7, #2]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	b29b      	uxth	r3, r3
 800309c:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800309e:	88fa      	ldrh	r2, [r7, #6]
 80030a0:	887b      	ldrh	r3, [r7, #2]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 80030a8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80030ac:	f9b7 3000 	ldrsh.w	r3, [r7]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	dd0e      	ble.n	80030d2 <hagl_draw_rounded_rectangle+0x72>
        y0 = y0 + y1;
 80030b4:	88ba      	ldrh	r2, [r7, #4]
 80030b6:	883b      	ldrh	r3, [r7, #0]
 80030b8:	4413      	add	r3, r2
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 80030be:	88ba      	ldrh	r2, [r7, #4]
 80030c0:	883b      	ldrh	r3, [r7, #0]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 80030c8:	88ba      	ldrh	r2, [r7, #4]
 80030ca:	883b      	ldrh	r3, [r7, #0]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 80030d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80030d6:	4a52      	ldr	r2, [pc, #328]	@ (8003220 <hagl_draw_rounded_rectangle+0x1c0>)
 80030d8:	8812      	ldrh	r2, [r2, #0]
 80030da:	4293      	cmp	r3, r2
 80030dc:	f2c0 8153 	blt.w	8003386 <hagl_draw_rounded_rectangle+0x326>
 80030e0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80030e4:	4a4e      	ldr	r2, [pc, #312]	@ (8003220 <hagl_draw_rounded_rectangle+0x1c0>)
 80030e6:	8852      	ldrh	r2, [r2, #2]
 80030e8:	4293      	cmp	r3, r2
 80030ea:	f2c0 814c 	blt.w	8003386 <hagl_draw_rounded_rectangle+0x326>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80030ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030f2:	4a4b      	ldr	r2, [pc, #300]	@ (8003220 <hagl_draw_rounded_rectangle+0x1c0>)
 80030f4:	8892      	ldrh	r2, [r2, #4]
 80030f6:	4293      	cmp	r3, r2
 80030f8:	f300 8147 	bgt.w	800338a <hagl_draw_rounded_rectangle+0x32a>
 80030fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003100:	4a47      	ldr	r2, [pc, #284]	@ (8003220 <hagl_draw_rounded_rectangle+0x1c0>)
 8003102:	88d2      	ldrh	r2, [r2, #6]
 8003104:	4293      	cmp	r3, r2
 8003106:	f300 8140 	bgt.w	800338a <hagl_draw_rounded_rectangle+0x32a>
        return;
    }

    /* Max radius is half of shortest edge. */
    width = x1 - x0 + 1;
 800310a:	887a      	ldrh	r2, [r7, #2]
 800310c:	88fb      	ldrh	r3, [r7, #6]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	b29b      	uxth	r3, r3
 8003112:	3301      	adds	r3, #1
 8003114:	823b      	strh	r3, [r7, #16]
    height = y1 - y0 + 1;
 8003116:	883a      	ldrh	r2, [r7, #0]
 8003118:	88bb      	ldrh	r3, [r7, #4]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	b29b      	uxth	r3, r3
 800311e:	3301      	adds	r3, #1
 8003120:	81fb      	strh	r3, [r7, #14]
    r = min(r, min(width / 2, height / 2));
 8003122:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	@ 0x28
 8003126:	8a3b      	ldrh	r3, [r7, #16]
 8003128:	085b      	lsrs	r3, r3, #1
 800312a:	b29b      	uxth	r3, r3
 800312c:	461a      	mov	r2, r3
 800312e:	89fb      	ldrh	r3, [r7, #14]
 8003130:	085b      	lsrs	r3, r3, #1
 8003132:	b29b      	uxth	r3, r3
 8003134:	4619      	mov	r1, r3
 8003136:	4610      	mov	r0, r2
 8003138:	f7ff fcd8 	bl	8002aec <min>
 800313c:	4603      	mov	r3, r0
 800313e:	4619      	mov	r1, r3
 8003140:	4620      	mov	r0, r4
 8003142:	f7ff fcd3 	bl	8002aec <min>
 8003146:	4603      	mov	r3, r0
 8003148:	853b      	strh	r3, [r7, #40]	@ 0x28

    hagl_draw_hline(x0 + r, y0, width - 2 * r, color);
 800314a:	88fa      	ldrh	r2, [r7, #6]
 800314c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800314e:	4413      	add	r3, r2
 8003150:	b29b      	uxth	r3, r3
 8003152:	b218      	sxth	r0, r3
 8003154:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	b29b      	uxth	r3, r3
 800315a:	8a3a      	ldrh	r2, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	b29a      	uxth	r2, r3
 8003160:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003162:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003166:	f7ff fd05 	bl	8002b74 <hagl_draw_hline>
    hagl_draw_hline(x0 + r, y1, width - 2 * r, color);
 800316a:	88fa      	ldrh	r2, [r7, #6]
 800316c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800316e:	4413      	add	r3, r2
 8003170:	b29b      	uxth	r3, r3
 8003172:	b218      	sxth	r0, r3
 8003174:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	b29b      	uxth	r3, r3
 800317a:	8a3a      	ldrh	r2, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	b29a      	uxth	r2, r3
 8003180:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003182:	f9b7 1000 	ldrsh.w	r1, [r7]
 8003186:	f7ff fcf5 	bl	8002b74 <hagl_draw_hline>
    hagl_draw_vline(x0, y0 + r, height - 2 * r, color);
 800318a:	88ba      	ldrh	r2, [r7, #4]
 800318c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800318e:	4413      	add	r3, r2
 8003190:	b29b      	uxth	r3, r3
 8003192:	b219      	sxth	r1, r3
 8003194:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	b29b      	uxth	r3, r3
 800319a:	89fa      	ldrh	r2, [r7, #14]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	b29a      	uxth	r2, r3
 80031a0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80031a2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80031a6:	f7ff fd08 	bl	8002bba <hagl_draw_vline>
    hagl_draw_vline(x1, y0 + r, height - 2 * r, color);
 80031aa:	88ba      	ldrh	r2, [r7, #4]
 80031ac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80031ae:	4413      	add	r3, r2
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	b219      	sxth	r1, r3
 80031b4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	89fa      	ldrh	r2, [r7, #14]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	b29a      	uxth	r2, r3
 80031c0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80031c2:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80031c6:	f7ff fcf8 	bl	8002bba <hagl_draw_vline>

    x = 0;
 80031ca:	2300      	movs	r3, #0
 80031cc:	82fb      	strh	r3, [r7, #22]
    y = r;
 80031ce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80031d0:	82bb      	strh	r3, [r7, #20]
    d = 3 - 2 * r;
 80031d2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	f1c3 0303 	rsb	r3, r3, #3
 80031dc:	b29b      	uxth	r3, r3
 80031de:	827b      	strh	r3, [r7, #18]

    while (y >= x) {
 80031e0:	e0c9      	b.n	8003376 <hagl_draw_rounded_rectangle+0x316>
        x++;
 80031e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	3301      	adds	r3, #1
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	82fb      	strh	r3, [r7, #22]

        if (d > 0) {
 80031ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	dd16      	ble.n	8003224 <hagl_draw_rounded_rectangle+0x1c4>
            y--;
 80031f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29b      	uxth	r3, r3
 8003200:	82bb      	strh	r3, [r7, #20]
            d = d + 4 * (x - y) + 10;
 8003202:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003206:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	b29b      	uxth	r3, r3
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	b29a      	uxth	r2, r3
 8003212:	8a7b      	ldrh	r3, [r7, #18]
 8003214:	4413      	add	r3, r2
 8003216:	b29b      	uxth	r3, r3
 8003218:	330a      	adds	r3, #10
 800321a:	b29b      	uxth	r3, r3
 800321c:	827b      	strh	r3, [r7, #18]
 800321e:	e00a      	b.n	8003236 <hagl_draw_rounded_rectangle+0x1d6>
 8003220:	2000000c 	.word	0x2000000c
        } else {
            d = d + 4 * x + 6;
 8003224:	8afb      	ldrh	r3, [r7, #22]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	b29a      	uxth	r2, r3
 800322a:	8a7b      	ldrh	r3, [r7, #18]
 800322c:	4413      	add	r3, r2
 800322e:	b29b      	uxth	r3, r3
 8003230:	3306      	adds	r3, #6
 8003232:	b29b      	uxth	r3, r3
 8003234:	827b      	strh	r3, [r7, #18]
        }

        /* Top right */
        hagl_put_pixel(x1 - r + x, y0 + r - y, color);
 8003236:	887a      	ldrh	r2, [r7, #2]
 8003238:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	b29a      	uxth	r2, r3
 800323e:	8afb      	ldrh	r3, [r7, #22]
 8003240:	4413      	add	r3, r2
 8003242:	b29b      	uxth	r3, r3
 8003244:	b218      	sxth	r0, r3
 8003246:	88ba      	ldrh	r2, [r7, #4]
 8003248:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800324a:	4413      	add	r3, r2
 800324c:	b29a      	uxth	r2, r3
 800324e:	8abb      	ldrh	r3, [r7, #20]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	b29b      	uxth	r3, r3
 8003254:	b21b      	sxth	r3, r3
 8003256:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003258:	4619      	mov	r1, r3
 800325a:	f7ff fc59 	bl	8002b10 <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y0 + r - x, color);
 800325e:	887a      	ldrh	r2, [r7, #2]
 8003260:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	b29a      	uxth	r2, r3
 8003266:	8abb      	ldrh	r3, [r7, #20]
 8003268:	4413      	add	r3, r2
 800326a:	b29b      	uxth	r3, r3
 800326c:	b218      	sxth	r0, r3
 800326e:	88ba      	ldrh	r2, [r7, #4]
 8003270:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003272:	4413      	add	r3, r2
 8003274:	b29a      	uxth	r2, r3
 8003276:	8afb      	ldrh	r3, [r7, #22]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	b29b      	uxth	r3, r3
 800327c:	b21b      	sxth	r3, r3
 800327e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003280:	4619      	mov	r1, r3
 8003282:	f7ff fc45 	bl	8002b10 <hagl_put_pixel>

        /* Top left */
        hagl_put_pixel(x0 + r - x, y0 + r - y, color);
 8003286:	88fa      	ldrh	r2, [r7, #6]
 8003288:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800328a:	4413      	add	r3, r2
 800328c:	b29a      	uxth	r2, r3
 800328e:	8afb      	ldrh	r3, [r7, #22]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	b29b      	uxth	r3, r3
 8003294:	b218      	sxth	r0, r3
 8003296:	88ba      	ldrh	r2, [r7, #4]
 8003298:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800329a:	4413      	add	r3, r2
 800329c:	b29a      	uxth	r2, r3
 800329e:	8abb      	ldrh	r3, [r7, #20]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	b21b      	sxth	r3, r3
 80032a6:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80032a8:	4619      	mov	r1, r3
 80032aa:	f7ff fc31 	bl	8002b10 <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y0 + r - x, color);
 80032ae:	88fa      	ldrh	r2, [r7, #6]
 80032b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80032b2:	4413      	add	r3, r2
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	8abb      	ldrh	r3, [r7, #20]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	b218      	sxth	r0, r3
 80032be:	88ba      	ldrh	r2, [r7, #4]
 80032c0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80032c2:	4413      	add	r3, r2
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	8afb      	ldrh	r3, [r7, #22]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	b21b      	sxth	r3, r3
 80032ce:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80032d0:	4619      	mov	r1, r3
 80032d2:	f7ff fc1d 	bl	8002b10 <hagl_put_pixel>

        /* Bottom right */
        hagl_put_pixel(x1 - r + x, y1 - r + y, color);
 80032d6:	887a      	ldrh	r2, [r7, #2]
 80032d8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	b29a      	uxth	r2, r3
 80032de:	8afb      	ldrh	r3, [r7, #22]
 80032e0:	4413      	add	r3, r2
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	b218      	sxth	r0, r3
 80032e6:	883a      	ldrh	r2, [r7, #0]
 80032e8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	8abb      	ldrh	r3, [r7, #20]
 80032f0:	4413      	add	r3, r2
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	b21b      	sxth	r3, r3
 80032f6:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80032f8:	4619      	mov	r1, r3
 80032fa:	f7ff fc09 	bl	8002b10 <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y1 - r + x, color);
 80032fe:	887a      	ldrh	r2, [r7, #2]
 8003300:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	b29a      	uxth	r2, r3
 8003306:	8abb      	ldrh	r3, [r7, #20]
 8003308:	4413      	add	r3, r2
 800330a:	b29b      	uxth	r3, r3
 800330c:	b218      	sxth	r0, r3
 800330e:	883a      	ldrh	r2, [r7, #0]
 8003310:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	b29a      	uxth	r2, r3
 8003316:	8afb      	ldrh	r3, [r7, #22]
 8003318:	4413      	add	r3, r2
 800331a:	b29b      	uxth	r3, r3
 800331c:	b21b      	sxth	r3, r3
 800331e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003320:	4619      	mov	r1, r3
 8003322:	f7ff fbf5 	bl	8002b10 <hagl_put_pixel>

        /* Bottom left */
        hagl_put_pixel(x0 + r - x, y1 - r + y, color);
 8003326:	88fa      	ldrh	r2, [r7, #6]
 8003328:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800332a:	4413      	add	r3, r2
 800332c:	b29a      	uxth	r2, r3
 800332e:	8afb      	ldrh	r3, [r7, #22]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	b29b      	uxth	r3, r3
 8003334:	b218      	sxth	r0, r3
 8003336:	883a      	ldrh	r2, [r7, #0]
 8003338:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	b29a      	uxth	r2, r3
 800333e:	8abb      	ldrh	r3, [r7, #20]
 8003340:	4413      	add	r3, r2
 8003342:	b29b      	uxth	r3, r3
 8003344:	b21b      	sxth	r3, r3
 8003346:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003348:	4619      	mov	r1, r3
 800334a:	f7ff fbe1 	bl	8002b10 <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y1 - r + x, color);
 800334e:	88fa      	ldrh	r2, [r7, #6]
 8003350:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003352:	4413      	add	r3, r2
 8003354:	b29a      	uxth	r2, r3
 8003356:	8abb      	ldrh	r3, [r7, #20]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	b29b      	uxth	r3, r3
 800335c:	b218      	sxth	r0, r3
 800335e:	883a      	ldrh	r2, [r7, #0]
 8003360:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	b29a      	uxth	r2, r3
 8003366:	8afb      	ldrh	r3, [r7, #22]
 8003368:	4413      	add	r3, r2
 800336a:	b29b      	uxth	r3, r3
 800336c:	b21b      	sxth	r3, r3
 800336e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003370:	4619      	mov	r1, r3
 8003372:	f7ff fbcd 	bl	8002b10 <hagl_put_pixel>
    while (y >= x) {
 8003376:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800337a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800337e:	429a      	cmp	r2, r3
 8003380:	f6bf af2f 	bge.w	80031e2 <hagl_draw_rounded_rectangle+0x182>
 8003384:	e002      	b.n	800338c <hagl_draw_rounded_rectangle+0x32c>
        return;
 8003386:	bf00      	nop
 8003388:	e000      	b.n	800338c <hagl_draw_rounded_rectangle+0x32c>
        return;
 800338a:	bf00      	nop
    }
};
 800338c:	371c      	adds	r7, #28
 800338e:	46bd      	mov	sp, r7
 8003390:	bd90      	pop	{r4, r7, pc}
 8003392:	bf00      	nop

08003394 <rgb565>:
#include <stdint.h>

#include "rgb565.h"

uint16_t rgb565(uint8_t r, uint8_t g, uint8_t b)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	71fb      	strb	r3, [r7, #7]
 800339e:	460b      	mov	r3, r1
 80033a0:	71bb      	strb	r3, [r7, #6]
 80033a2:	4613      	mov	r3, r2
 80033a4:	717b      	strb	r3, [r7, #5]
    uint16_t rgb;

    rgb = ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	021b      	lsls	r3, r3, #8
 80033aa:	b21b      	sxth	r3, r3
 80033ac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80033b0:	f023 0307 	bic.w	r3, r3, #7
 80033b4:	b21a      	sxth	r2, r3
 80033b6:	79bb      	ldrb	r3, [r7, #6]
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	b21b      	sxth	r3, r3
 80033bc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80033c0:	b21b      	sxth	r3, r3
 80033c2:	4313      	orrs	r3, r2
 80033c4:	b21a      	sxth	r2, r3
 80033c6:	797b      	ldrb	r3, [r7, #5]
 80033c8:	08db      	lsrs	r3, r3, #3
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	b21b      	sxth	r3, r3
 80033ce:	4313      	orrs	r3, r2
 80033d0:	b21b      	sxth	r3, r3
 80033d2:	81fb      	strh	r3, [r7, #14]
    rgb = (((rgb) << 8) & 0xFF00) | (((rgb) >> 8) & 0xFF);
 80033d4:	89fb      	ldrh	r3, [r7, #14]
 80033d6:	021b      	lsls	r3, r3, #8
 80033d8:	b21a      	sxth	r2, r3
 80033da:	89fb      	ldrh	r3, [r7, #14]
 80033dc:	0a1b      	lsrs	r3, r3, #8
 80033de:	b29b      	uxth	r3, r3
 80033e0:	b21b      	sxth	r3, r3
 80033e2:	4313      	orrs	r3, r2
 80033e4:	b21b      	sxth	r3, r3
 80033e6:	81fb      	strh	r3, [r7, #14]

    return rgb;
 80033e8:	89fb      	ldrh	r3, [r7, #14]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <memset>:
 80033f6:	4402      	add	r2, r0
 80033f8:	4603      	mov	r3, r0
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d100      	bne.n	8003400 <memset+0xa>
 80033fe:	4770      	bx	lr
 8003400:	f803 1b01 	strb.w	r1, [r3], #1
 8003404:	e7f9      	b.n	80033fa <memset+0x4>
	...

08003408 <__libc_init_array>:
 8003408:	b570      	push	{r4, r5, r6, lr}
 800340a:	4d0d      	ldr	r5, [pc, #52]	@ (8003440 <__libc_init_array+0x38>)
 800340c:	4c0d      	ldr	r4, [pc, #52]	@ (8003444 <__libc_init_array+0x3c>)
 800340e:	1b64      	subs	r4, r4, r5
 8003410:	10a4      	asrs	r4, r4, #2
 8003412:	2600      	movs	r6, #0
 8003414:	42a6      	cmp	r6, r4
 8003416:	d109      	bne.n	800342c <__libc_init_array+0x24>
 8003418:	4d0b      	ldr	r5, [pc, #44]	@ (8003448 <__libc_init_array+0x40>)
 800341a:	4c0c      	ldr	r4, [pc, #48]	@ (800344c <__libc_init_array+0x44>)
 800341c:	f000 f826 	bl	800346c <_init>
 8003420:	1b64      	subs	r4, r4, r5
 8003422:	10a4      	asrs	r4, r4, #2
 8003424:	2600      	movs	r6, #0
 8003426:	42a6      	cmp	r6, r4
 8003428:	d105      	bne.n	8003436 <__libc_init_array+0x2e>
 800342a:	bd70      	pop	{r4, r5, r6, pc}
 800342c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003430:	4798      	blx	r3
 8003432:	3601      	adds	r6, #1
 8003434:	e7ee      	b.n	8003414 <__libc_init_array+0xc>
 8003436:	f855 3b04 	ldr.w	r3, [r5], #4
 800343a:	4798      	blx	r3
 800343c:	3601      	adds	r6, #1
 800343e:	e7f2      	b.n	8003426 <__libc_init_array+0x1e>
 8003440:	08006548 	.word	0x08006548
 8003444:	08006548 	.word	0x08006548
 8003448:	08006548 	.word	0x08006548
 800344c:	0800654c 	.word	0x0800654c

08003450 <memcpy>:
 8003450:	440a      	add	r2, r1
 8003452:	4291      	cmp	r1, r2
 8003454:	f100 33ff 	add.w	r3, r0, #4294967295
 8003458:	d100      	bne.n	800345c <memcpy+0xc>
 800345a:	4770      	bx	lr
 800345c:	b510      	push	{r4, lr}
 800345e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003462:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003466:	4291      	cmp	r1, r2
 8003468:	d1f9      	bne.n	800345e <memcpy+0xe>
 800346a:	bd10      	pop	{r4, pc}

0800346c <_init>:
 800346c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800346e:	bf00      	nop
 8003470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003472:	bc08      	pop	{r3}
 8003474:	469e      	mov	lr, r3
 8003476:	4770      	bx	lr

08003478 <_fini>:
 8003478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347a:	bf00      	nop
 800347c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800347e:	bc08      	pop	{r3}
 8003480:	469e      	mov	lr, r3
 8003482:	4770      	bx	lr
