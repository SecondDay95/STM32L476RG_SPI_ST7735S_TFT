
9_SPI_ST7735S_TFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008170  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003130  08008300  08008300  00009300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b430  0800b430  0000d070  2**0
                  CONTENTS
  4 .ARM          00000008  0800b430  0800b430  0000c430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b438  0800b438  0000d070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b438  0800b438  0000c438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b43c  0800b43c  0000c43c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800b440  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a358  20000070  0800b4b0  0000d070  2**2
                  ALLOC
 10 ._user_heap_stack 00002200  2000a3c8  0800b4b0  0000d3c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166d8  00000000  00000000  0000d0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003822  00000000  00000000  00023778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  00026fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea6  00000000  00000000  000282e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a741  00000000  00000000  00029186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001914a  00000000  00000000  000538c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100e44  00000000  00000000  0006ca11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016d855  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056d4  00000000  00000000  0016d898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00172f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080082e8 	.word	0x080082e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080082e8 	.word	0x080082e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	@ 0x28
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
 8000d6c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d6e:	4b36      	ldr	r3, [pc, #216]	@ (8000e48 <MX_ADC1_Init+0xfc>)
 8000d70:	4a36      	ldr	r2, [pc, #216]	@ (8000e4c <MX_ADC1_Init+0x100>)
 8000d72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d74:	4b34      	ldr	r3, [pc, #208]	@ (8000e48 <MX_ADC1_Init+0xfc>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d7a:	4b33      	ldr	r3, [pc, #204]	@ (8000e48 <MX_ADC1_Init+0xfc>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d80:	4b31      	ldr	r3, [pc, #196]	@ (8000e48 <MX_ADC1_Init+0xfc>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d86:	4b30      	ldr	r3, [pc, #192]	@ (8000e48 <MX_ADC1_Init+0xfc>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d8c:	4b2e      	ldr	r3, [pc, #184]	@ (8000e48 <MX_ADC1_Init+0xfc>)
 8000d8e:	2204      	movs	r2, #4
 8000d90:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d92:	4b2d      	ldr	r3, [pc, #180]	@ (8000e48 <MX_ADC1_Init+0xfc>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d98:	4b2b      	ldr	r3, [pc, #172]	@ (8000e48 <MX_ADC1_Init+0xfc>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8000e48 <MX_ADC1_Init+0xfc>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000da4:	4b28      	ldr	r3, [pc, #160]	@ (8000e48 <MX_ADC1_Init+0xfc>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dac:	4b26      	ldr	r3, [pc, #152]	@ (8000e48 <MX_ADC1_Init+0xfc>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000db2:	4b25      	ldr	r3, [pc, #148]	@ (8000e48 <MX_ADC1_Init+0xfc>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000db8:	4b23      	ldr	r3, [pc, #140]	@ (8000e48 <MX_ADC1_Init+0xfc>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000dc0:	4b21      	ldr	r3, [pc, #132]	@ (8000e48 <MX_ADC1_Init+0xfc>)
 8000dc2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000dc6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e48 <MX_ADC1_Init+0xfc>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e48 <MX_ADC1_Init+0xfc>)
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e48 <MX_ADC1_Init+0xfc>)
 8000dd8:	2280      	movs	r2, #128	@ 0x80
 8000dda:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e48 <MX_ADC1_Init+0xfc>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000de2:	4b19      	ldr	r3, [pc, #100]	@ (8000e48 <MX_ADC1_Init+0xfc>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000de8:	4817      	ldr	r0, [pc, #92]	@ (8000e48 <MX_ADC1_Init+0xfc>)
 8000dea:	f001 f917 	bl	800201c <HAL_ADC_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000df4:	f000 fbd6 	bl	80015a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	4619      	mov	r1, r3
 8000e02:	4811      	ldr	r0, [pc, #68]	@ (8000e48 <MX_ADC1_Init+0xfc>)
 8000e04:	f002 f952 	bl	80030ac <HAL_ADCEx_MultiModeConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000e0e:	f000 fbc9 	bl	80015a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e12:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <MX_ADC1_Init+0x104>)
 8000e14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e16:	2306      	movs	r3, #6
 8000e18:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e1e:	237f      	movs	r3, #127	@ 0x7f
 8000e20:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e22:	2304      	movs	r3, #4
 8000e24:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4806      	ldr	r0, [pc, #24]	@ (8000e48 <MX_ADC1_Init+0xfc>)
 8000e30:	f001 fb1e 	bl	8002470 <HAL_ADC_ConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 8000e3a:	f000 fbb3 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	@ 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	2000008c 	.word	0x2000008c
 8000e4c:	50040000 	.word	0x50040000
 8000e50:	04300002 	.word	0x04300002

08000e54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b0ac      	sub	sp, #176	@ 0xb0
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2288      	movs	r2, #136	@ 0x88
 8000e72:	2100      	movs	r1, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f006 fcbc 	bl	80077f2 <memset>
  if(adcHandle->Instance==ADC1)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a3c      	ldr	r2, [pc, #240]	@ (8000f70 <HAL_ADC_MspInit+0x11c>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d171      	bne.n	8000f68 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e84:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e88:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000e8a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000e92:	2301      	movs	r3, #1
 8000e94:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e96:	2301      	movs	r3, #1
 8000e98:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000e9a:	2310      	movs	r3, #16
 8000e9c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e9e:	2307      	movs	r3, #7
 8000ea0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000eaa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000eae:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f003 fce9 	bl	800488c <HAL_RCCEx_PeriphCLKConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000ec0:	f000 fb70 	bl	80015a4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8000f74 <HAL_ADC_MspInit+0x120>)
 8000ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec8:	4a2a      	ldr	r2, [pc, #168]	@ (8000f74 <HAL_ADC_MspInit+0x120>)
 8000eca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ece:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ed0:	4b28      	ldr	r3, [pc, #160]	@ (8000f74 <HAL_ADC_MspInit+0x120>)
 8000ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000edc:	4b25      	ldr	r3, [pc, #148]	@ (8000f74 <HAL_ADC_MspInit+0x120>)
 8000ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee0:	4a24      	ldr	r2, [pc, #144]	@ (8000f74 <HAL_ADC_MspInit+0x120>)
 8000ee2:	f043 0304 	orr.w	r3, r3, #4
 8000ee6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee8:	4b22      	ldr	r3, [pc, #136]	@ (8000f74 <HAL_ADC_MspInit+0x120>)
 8000eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000efa:	230b      	movs	r3, #11
 8000efc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f06:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	481a      	ldr	r0, [pc, #104]	@ (8000f78 <HAL_ADC_MspInit+0x124>)
 8000f0e:	f002 fc87 	bl	8003820 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f12:	4b1a      	ldr	r3, [pc, #104]	@ (8000f7c <HAL_ADC_MspInit+0x128>)
 8000f14:	4a1a      	ldr	r2, [pc, #104]	@ (8000f80 <HAL_ADC_MspInit+0x12c>)
 8000f16:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000f18:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <HAL_ADC_MspInit+0x128>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f1e:	4b17      	ldr	r3, [pc, #92]	@ (8000f7c <HAL_ADC_MspInit+0x128>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f24:	4b15      	ldr	r3, [pc, #84]	@ (8000f7c <HAL_ADC_MspInit+0x128>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f2a:	4b14      	ldr	r3, [pc, #80]	@ (8000f7c <HAL_ADC_MspInit+0x128>)
 8000f2c:	2280      	movs	r2, #128	@ 0x80
 8000f2e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f30:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <HAL_ADC_MspInit+0x128>)
 8000f32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f36:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f38:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <HAL_ADC_MspInit+0x128>)
 8000f3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f3e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f40:	4b0e      	ldr	r3, [pc, #56]	@ (8000f7c <HAL_ADC_MspInit+0x128>)
 8000f42:	2220      	movs	r2, #32
 8000f44:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f46:	4b0d      	ldr	r3, [pc, #52]	@ (8000f7c <HAL_ADC_MspInit+0x128>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f4c:	480b      	ldr	r0, [pc, #44]	@ (8000f7c <HAL_ADC_MspInit+0x128>)
 8000f4e:	f002 fa6f 	bl	8003430 <HAL_DMA_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8000f58:	f000 fb24 	bl	80015a4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a07      	ldr	r2, [pc, #28]	@ (8000f7c <HAL_ADC_MspInit+0x128>)
 8000f60:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000f62:	4a06      	ldr	r2, [pc, #24]	@ (8000f7c <HAL_ADC_MspInit+0x128>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f68:	bf00      	nop
 8000f6a:	37b0      	adds	r7, #176	@ 0xb0
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	50040000 	.word	0x50040000
 8000f74:	40021000 	.word	0x40021000
 8000f78:	48000800 	.word	0x48000800
 8000f7c:	200000f0 	.word	0x200000f0
 8000f80:	40020008 	.word	0x40020008

08000f84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f8a:	4b10      	ldr	r3, [pc, #64]	@ (8000fcc <MX_DMA_Init+0x48>)
 8000f8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000fcc <MX_DMA_Init+0x48>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f96:	4b0d      	ldr	r3, [pc, #52]	@ (8000fcc <MX_DMA_Init+0x48>)
 8000f98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2102      	movs	r1, #2
 8000fa6:	200b      	movs	r0, #11
 8000fa8:	f002 fa0b 	bl	80033c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fac:	200b      	movs	r0, #11
 8000fae:	f002 fa24 	bl	80033fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	200f      	movs	r0, #15
 8000fb8:	f002 fa03 	bl	80033c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000fbc:	200f      	movs	r0, #15
 8000fbe:	f002 fa1c 	bl	80033fa <HAL_NVIC_EnableIRQ>

}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe6:	4b21      	ldr	r3, [pc, #132]	@ (800106c <MX_GPIO_Init+0x9c>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fea:	4a20      	ldr	r2, [pc, #128]	@ (800106c <MX_GPIO_Init+0x9c>)
 8000fec:	f043 0304 	orr.w	r3, r3, #4
 8000ff0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800106c <MX_GPIO_Init+0x9c>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff6:	f003 0304 	and.w	r3, r3, #4
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800106c <MX_GPIO_Init+0x9c>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001002:	4a1a      	ldr	r2, [pc, #104]	@ (800106c <MX_GPIO_Init+0x9c>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800100a:	4b18      	ldr	r3, [pc, #96]	@ (800106c <MX_GPIO_Init+0x9c>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	4b15      	ldr	r3, [pc, #84]	@ (800106c <MX_GPIO_Init+0x9c>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101a:	4a14      	ldr	r2, [pc, #80]	@ (800106c <MX_GPIO_Init+0x9c>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001022:	4b12      	ldr	r3, [pc, #72]	@ (800106c <MX_GPIO_Init+0x9c>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	f640 0104 	movw	r1, #2052	@ 0x804
 8001034:	480e      	ldr	r0, [pc, #56]	@ (8001070 <MX_GPIO_Init+0xa0>)
 8001036:	f002 fd9d 	bl	8003b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800103a:	2201      	movs	r2, #1
 800103c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001040:	480b      	ldr	r0, [pc, #44]	@ (8001070 <MX_GPIO_Init+0xa0>)
 8001042:	f002 fd97 	bl	8003b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8001046:	f641 0304 	movw	r3, #6148	@ 0x1804
 800104a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104c:	2301      	movs	r3, #1
 800104e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	4619      	mov	r1, r3
 800105e:	4804      	ldr	r0, [pc, #16]	@ (8001070 <MX_GPIO_Init+0xa0>)
 8001060:	f002 fbde 	bl	8003820 <HAL_GPIO_Init>

}
 8001064:	bf00      	nop
 8001066:	3720      	adds	r7, #32
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40021000 	.word	0x40021000
 8001070:	48000400 	.word	0x48000400

08001074 <lcd_cmd>:
//dane o kolorach wszystkich pikseli):
static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];

//Funkcja wysylajaca komende do wyswietlacza (static oznacza ze funkcja nie jest widoczna
//w innych plikach, a ta funkcja bedzie uzywana tylko w tym pliku):
static void lcd_cmd(uint8_t cmd) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]

	//Ustawienie stanu niskiego na linii DC oznacza ze wysylamy komende:
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001084:	480c      	ldr	r0, [pc, #48]	@ (80010b8 <lcd_cmd+0x44>)
 8001086:	f002 fd75 	bl	8003b74 <HAL_GPIO_WritePin>
	//Ustawienie stanu niskiego na linii CS oznacza ze rozpoczynamy komunikacje SPI:
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001090:	4809      	ldr	r0, [pc, #36]	@ (80010b8 <lcd_cmd+0x44>)
 8001092:	f002 fd6f 	bl	8003b74 <HAL_GPIO_WritePin>
	//Wyslanie komendy przekazanej do funkcji:
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8001096:	1df9      	adds	r1, r7, #7
 8001098:	f04f 33ff 	mov.w	r3, #4294967295
 800109c:	2201      	movs	r2, #1
 800109e:	4807      	ldr	r0, [pc, #28]	@ (80010bc <lcd_cmd+0x48>)
 80010a0:	f004 f963 	bl	800536a <HAL_SPI_Transmit>
	//Ustawienie stanu wysokiego na linii CS oznacza ze konczymy komunikacje SPI:
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010aa:	4803      	ldr	r0, [pc, #12]	@ (80010b8 <lcd_cmd+0x44>)
 80010ac:	f002 fd62 	bl	8003b74 <HAL_GPIO_WritePin>

}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	48000400 	.word	0x48000400
 80010bc:	2000a140 	.word	0x2000a140

080010c0 <lcd_data>:

//Funkcja wysylajaca 8-bitow dane do wyswietlacza:
static void lcd_data(uint8_t data) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]

	//Ustawienie stanu wysokiego na linii DC oznacza ze wysylamy dane:
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80010ca:	2201      	movs	r2, #1
 80010cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010d0:	480c      	ldr	r0, [pc, #48]	@ (8001104 <lcd_data+0x44>)
 80010d2:	f002 fd4f 	bl	8003b74 <HAL_GPIO_WritePin>
	//Ustawienie stanu niskiego na linii CS oznacza ze rozpoczynamy komunikacje SPI:
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010dc:	4809      	ldr	r0, [pc, #36]	@ (8001104 <lcd_data+0x44>)
 80010de:	f002 fd49 	bl	8003b74 <HAL_GPIO_WritePin>
	//Wyslanie danych przekazanych do funkcji:
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 80010e2:	1df9      	adds	r1, r7, #7
 80010e4:	f04f 33ff 	mov.w	r3, #4294967295
 80010e8:	2201      	movs	r2, #1
 80010ea:	4807      	ldr	r0, [pc, #28]	@ (8001108 <lcd_data+0x48>)
 80010ec:	f004 f93d 	bl	800536a <HAL_SPI_Transmit>
	//Ustawienie stanu wysokiego na linii CS oznacza ze konczymy komunikacje SPI:
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010f6:	4803      	ldr	r0, [pc, #12]	@ (8001104 <lcd_data+0x44>)
 80010f8:	f002 fd3c 	bl	8003b74 <HAL_GPIO_WritePin>

}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	48000400 	.word	0x48000400
 8001108:	2000a140 	.word	0x2000a140

0800110c <lcd_data16>:

//Funkcja wysylajaca 16-bitowe dane do wyswietlacza (najpierw wysylany jest bardziej
//znaczacy bajt, z pozniej mniej znaczacy):
static void lcd_data16(uint16_t value) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	80fb      	strh	r3, [r7, #6]

	//Wyslanie bardziej znaczacego bajtu:
	lcd_data(value >> 8);
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	b29b      	uxth	r3, r3
 800111c:	b2db      	uxtb	r3, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ffce 	bl	80010c0 <lcd_data>
	//Wyslanie mniej znaczacego bajtu:
	lcd_data(value);
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ffc9 	bl	80010c0 <lcd_data>

}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <lcd_send>:

//Funkcja wysylajaca przekazywana wartosc jako komenda lub jako dane. Funkcja jako argument
//przyjmuje wartosc 16-bitowa. Na 9 bicie znajduje sie bit który oznacza czy wartosc bedzie
//wysylana jako komenda czy jako dane (1 - komenda, 0 - dane):
static void lcd_send(uint16_t value) {
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	80fb      	strh	r3, [r7, #6]

	//Sprawdzenie czy wartosc ma byc wyslana jako komenda
	if(value & 0x100) {
 8001140:	88fb      	ldrh	r3, [r7, #6]
 8001142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001146:	2b00      	cmp	r3, #0
 8001148:	d005      	beq.n	8001156 <lcd_send+0x20>
		lcd_cmd(value);
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff90 	bl	8001074 <lcd_cmd>
	//W przeciwnym razie wartosc jest wysylana jako dane:
	else {
		lcd_data(value);
	}

}
 8001154:	e004      	b.n	8001160 <lcd_send+0x2a>
		lcd_data(value);
 8001156:	88fb      	ldrh	r3, [r7, #6]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ffb0 	bl	80010c0 <lcd_data>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <lcd_init>:

//Funkcja realizujaca inicjalizacje wyswietlacza (nie jest oznaczona jako statyczna,
//poniewaz bedzie wywolywana w pliku main.c):
void lcd_init(void) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0

	int i;

	//Reset sterownika wyswietlacza:
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	2104      	movs	r1, #4
 8001172:	4817      	ldr	r0, [pc, #92]	@ (80011d0 <lcd_init+0x68>)
 8001174:	f002 fcfe 	bl	8003b74 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001178:	2064      	movs	r0, #100	@ 0x64
 800117a:	f000 fd2f 	bl	8001bdc <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 800117e:	2201      	movs	r2, #1
 8001180:	2104      	movs	r1, #4
 8001182:	4813      	ldr	r0, [pc, #76]	@ (80011d0 <lcd_init+0x68>)
 8001184:	f002 fcf6 	bl	8003b74 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001188:	2064      	movs	r0, #100	@ 0x64
 800118a:	f000 fd27 	bl	8001bdc <HAL_Delay>

	//Wysylanie danych z tablicy do realizacji poczatkowej inicjalizacji wyswietlacza:
	for(i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	e009      	b.n	80011a8 <lcd_init+0x40>
		lcd_send(init_table[i]);
 8001194:	4a0f      	ldr	r2, [pc, #60]	@ (80011d4 <lcd_init+0x6c>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ffca 	bl	8001136 <lcd_send>
	for(i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3301      	adds	r3, #1
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b4b      	cmp	r3, #75	@ 0x4b
 80011ac:	d9f2      	bls.n	8001194 <lcd_init+0x2c>
	}

	HAL_Delay(200);
 80011ae:	20c8      	movs	r0, #200	@ 0xc8
 80011b0:	f000 fd14 	bl	8001bdc <HAL_Delay>

	//Obudzenie wyswietlacza z trybu uspienia:
	lcd_cmd(ST7735S_SLPOUT);
 80011b4:	2011      	movs	r0, #17
 80011b6:	f7ff ff5d 	bl	8001074 <lcd_cmd>

	HAL_Delay(120);
 80011ba:	2078      	movs	r0, #120	@ 0x78
 80011bc:	f000 fd0e 	bl	8001bdc <HAL_Delay>

	//Wlaczenie wyswietlacza:
	lcd_cmd(ST7735S_DISPON);
 80011c0:	2029      	movs	r0, #41	@ 0x29
 80011c2:	f7ff ff57 	bl	8001074 <lcd_cmd>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	48000400 	.word	0x48000400
 80011d4:	08008364 	.word	0x08008364

080011d8 <lcd_set_window>:

//Definicja okna które bedzie rysowane na wyswietlaczu:
static void lcd_set_window(int x, int y, int width, int height)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 80011e6:	202a      	movs	r0, #42	@ 0x2a
 80011e8:	f7ff ff44 	bl	8001074 <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	3301      	adds	r3, #1
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff89 	bl	800110c <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	b29b      	uxth	r3, r3
 8001202:	4413      	add	r3, r2
 8001204:	b29b      	uxth	r3, r3
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff80 	bl	800110c <lcd_data16>

  lcd_cmd(ST7735S_RASET);
 800120c:	202b      	movs	r0, #43	@ 0x2b
 800120e:	f7ff ff31 	bl	8001074 <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	b29b      	uxth	r3, r3
 8001216:	3302      	adds	r3, #2
 8001218:	b29b      	uxth	r3, r3
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ff76 	bl	800110c <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	b29a      	uxth	r2, r3
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	b29b      	uxth	r3, r3
 8001228:	4413      	add	r3, r2
 800122a:	b29b      	uxth	r3, r3
 800122c:	3301      	adds	r3, #1
 800122e:	b29b      	uxth	r3, r3
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff6b 	bl	800110c <lcd_data16>
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <lcd_put_pixel>:
	lcd_fill_box(x, y, 1, 1, color);
}
*/

//Funkcaj gromadzaca dane o kolorze pojedynczych pixeli w buforze:
void lcd_put_pixel(int x, int y, uint16_t color) {
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	4613      	mov	r3, r2
 800124c:	80fb      	strh	r3, [r7, #6]

	frame_buffer[x + y * LCD_WIDTH] = color;
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	015b      	lsls	r3, r3, #5
 8001258:	461a      	mov	r2, r3
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	4413      	add	r3, r2
 800125e:	4905      	ldr	r1, [pc, #20]	@ (8001274 <lcd_put_pixel+0x34>)
 8001260:	88fa      	ldrh	r2, [r7, #6]
 8001262:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000138 	.word	0x20000138

08001278 <lcd_copy>:
}
*/


//Funkcja kopiujaca zawartosc bufora do wyswietlacza:
void lcd_copy(void) {
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0

	//Wyslanie danych o kolorach dla pojedynczych pixeli do wyswietlacza:
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 800127c:	2380      	movs	r3, #128	@ 0x80
 800127e:	22a0      	movs	r2, #160	@ 0xa0
 8001280:	2100      	movs	r1, #0
 8001282:	2000      	movs	r0, #0
 8001284:	f7ff ffa8 	bl	80011d8 <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 8001288:	202c      	movs	r0, #44	@ 0x2c
 800128a:	f7ff fef3 	bl	8001074 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800128e:	2201      	movs	r2, #1
 8001290:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001294:	480c      	ldr	r0, [pc, #48]	@ (80012c8 <lcd_copy+0x50>)
 8001296:	f002 fc6d 	bl	8003b74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012a0:	4809      	ldr	r0, [pc, #36]	@ (80012c8 <lcd_copy+0x50>)
 80012a2:	f002 fc67 	bl	8003b74 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 80012ae:	4907      	ldr	r1, [pc, #28]	@ (80012cc <lcd_copy+0x54>)
 80012b0:	4807      	ldr	r0, [pc, #28]	@ (80012d0 <lcd_copy+0x58>)
 80012b2:	f004 f85a 	bl	800536a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80012b6:	2201      	movs	r2, #1
 80012b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012bc:	4802      	ldr	r0, [pc, #8]	@ (80012c8 <lcd_copy+0x50>)
 80012be:	f002 fc59 	bl	8003b74 <HAL_GPIO_WritePin>

}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	48000400 	.word	0x48000400
 80012cc:	20000138 	.word	0x20000138
 80012d0:	2000a140 	.word	0x2000a140

080012d4 <lcd_is_busy>:
{
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
}

//Funkcja sprawdzajaca czy transmisja SPI dalej trwa:
bool lcd_is_busy(void) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0

	if(HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_BUSY) {
 80012d8:	4805      	ldr	r0, [pc, #20]	@ (80012f0 <lcd_is_busy+0x1c>)
 80012da:	f004 f9bc 	bl	8005656 <HAL_SPI_GetState>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d101      	bne.n	80012e8 <lcd_is_busy+0x14>
		return true;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e000      	b.n	80012ea <lcd_is_busy+0x16>
	}
	else {
		return false;
 80012e8:	2300      	movs	r3, #0
	}

}
 80012ea:	4618      	mov	r0, r3
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	2000a140 	.word	0x2000a140

080012f4 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t test_image[64 * 64];

int __io_putchar(int ch)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b0a      	cmp	r3, #10
 8001300:	d102      	bne.n	8001308 <__io_putchar+0x14>
    __io_putchar('\r');
 8001302:	200d      	movs	r0, #13
 8001304:	f7ff fff6 	bl	80012f4 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001308:	1d39      	adds	r1, r7, #4
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	2201      	movs	r2, #1
 8001310:	4803      	ldr	r0, [pc, #12]	@ (8001320 <__io_putchar+0x2c>)
 8001312:	f004 fb61 	bl	80059d8 <HAL_UART_Transmit>

  return 1;
 8001316:	2301      	movs	r3, #1
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	2000a1f0 	.word	0x2000a1f0
 8001324:	00000000 	.word	0x00000000

08001328 <draw_progress_bar>:
		lcd_transfer_done();

	}
}
uint32_t last_fotoresistor_value = 0;
void draw_progress_bar(uint32_t fotoresistor_value) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af02      	add	r7, sp, #8
 800132e:	6078      	str	r0, [r7, #4]

	int y;
	y = 0.09 * fotoresistor_value - 2.7;
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff f8df 	bl	80004f4 <__aeabi_ui2d>
 8001336:	a323      	add	r3, pc, #140	@ (adr r3, 80013c4 <draw_progress_bar+0x9c>)
 8001338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133c:	f7ff f954 	bl	80005e8 <__aeabi_dmul>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	a320      	add	r3, pc, #128	@ (adr r3, 80013cc <draw_progress_bar+0xa4>)
 800134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134e:	f7fe ff93 	bl	8000278 <__aeabi_dsub>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4610      	mov	r0, r2
 8001358:	4619      	mov	r1, r3
 800135a:	f7ff fb57 	bl	8000a0c <__aeabi_d2iz>
 800135e:	4603      	mov	r3, r0
 8001360:	60fb      	str	r3, [r7, #12]
	while (lcd_is_busy()) {}
 8001362:	bf00      	nop
 8001364:	f7ff ffb6 	bl	80012d4 <lcd_is_busy>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1fa      	bne.n	8001364 <draw_progress_bar+0x3c>
	if(fotoresistor_value >= last_fotoresistor_value)
 800136e:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <draw_progress_bar+0x98>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	429a      	cmp	r2, r3
 8001376:	d30d      	bcc.n	8001394 <draw_progress_bar+0x6c>
		hagl_fill_rectangle(31, 49, 29 + y, 41, YELLOW);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	b29b      	uxth	r3, r3
 800137c:	331d      	adds	r3, #29
 800137e:	b29b      	uxth	r3, r3
 8001380:	b21a      	sxth	r2, r3
 8001382:	f24e 03ff 	movw	r3, #57599	@ 0xe0ff
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	2329      	movs	r3, #41	@ 0x29
 800138a:	2131      	movs	r1, #49	@ 0x31
 800138c:	201f      	movs	r0, #31
 800138e:	f005 fc77 	bl	8006c80 <hagl_fill_rectangle>
 8001392:	e00b      	b.n	80013ac <draw_progress_bar+0x84>
	else
		hagl_fill_rectangle(30 + y, 49, 128, 41, BLACK);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	b29b      	uxth	r3, r3
 8001398:	331e      	adds	r3, #30
 800139a:	b29b      	uxth	r3, r3
 800139c:	b218      	sxth	r0, r3
 800139e:	2300      	movs	r3, #0
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2329      	movs	r3, #41	@ 0x29
 80013a4:	2280      	movs	r2, #128	@ 0x80
 80013a6:	2131      	movs	r1, #49	@ 0x31
 80013a8:	f005 fc6a 	bl	8006c80 <hagl_fill_rectangle>
	lcd_copy();
 80013ac:	f7ff ff64 	bl	8001278 <lcd_copy>
	last_fotoresistor_value = fotoresistor_value;
 80013b0:	4a03      	ldr	r2, [pc, #12]	@ (80013c0 <draw_progress_bar+0x98>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6013      	str	r3, [r2, #0]

}
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	2000a138 	.word	0x2000a138
 80013c4:	70a3d70a 	.word	0x70a3d70a
 80013c8:	3fb70a3d 	.word	0x3fb70a3d
 80013cc:	9999999a 	.word	0x9999999a
 80013d0:	40059999 	.word	0x40059999

080013d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013d8:	b085      	sub	sp, #20
 80013da:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013dc:	f000 fb89 	bl	8001af2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e0:	f000 f87e 	bl	80014e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e4:	f7ff fdf4 	bl	8000fd0 <MX_GPIO_Init>
  MX_DMA_Init();
 80013e8:	f7ff fdcc 	bl	8000f84 <MX_DMA_Init>
  MX_SPI2_Init();
 80013ec:	f000 f8e0 	bl	80015b0 <MX_SPI2_Init>
  MX_ADC1_Init();
 80013f0:	f7ff fcac 	bl	8000d4c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80013f4:	f000 fac8 	bl	8001988 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Inicjalizacja wyswietlacza:
  lcd_init();
 80013f8:	f7ff feb6 	bl	8001168 <lcd_init>
      lcd_put_pixel(x, y, __REV16(x / 10 + y * 16));
    }
  }
  */
  //Wykorzystanie biblioteki hagl do rysowania zaokraglonego prostokata oraz do pisania tekstu:
  for (int i = 0; i < 8; i++) {
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	e032      	b.n	8001468 <main+0x94>
    hagl_draw_rounded_rectangle(2+i, 2+i, 158-i, 126-i, 8-i, rgb565(0, 0, i*16));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	b29b      	uxth	r3, r3
 8001406:	3302      	adds	r3, #2
 8001408:	b29b      	uxth	r3, r3
 800140a:	b21d      	sxth	r5, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	b29b      	uxth	r3, r3
 8001410:	3302      	adds	r3, #2
 8001412:	b29b      	uxth	r3, r3
 8001414:	b21e      	sxth	r6, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	b29b      	uxth	r3, r3
 800141a:	f1c3 039e 	rsb	r3, r3, #158	@ 0x9e
 800141e:	b29b      	uxth	r3, r3
 8001420:	fa0f f883 	sxth.w	r8, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	b29b      	uxth	r3, r3
 8001428:	f1c3 037e 	rsb	r3, r3, #126	@ 0x7e
 800142c:	b29b      	uxth	r3, r3
 800142e:	fa0f f983 	sxth.w	r9, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	b29b      	uxth	r3, r3
 8001436:	f1c3 0308 	rsb	r3, r3, #8
 800143a:	b29b      	uxth	r3, r3
 800143c:	b21c      	sxth	r4, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	011b      	lsls	r3, r3, #4
 8001444:	b2db      	uxtb	r3, r3
 8001446:	461a      	mov	r2, r3
 8001448:	2100      	movs	r1, #0
 800144a:	2000      	movs	r0, #0
 800144c:	f005 ffdc 	bl	8007408 <rgb565>
 8001450:	4603      	mov	r3, r0
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	9400      	str	r4, [sp, #0]
 8001456:	464b      	mov	r3, r9
 8001458:	4642      	mov	r2, r8
 800145a:	4631      	mov	r1, r6
 800145c:	4628      	mov	r0, r5
 800145e:	f005 fe39 	bl	80070d4 <hagl_draw_rounded_rectangle>
  for (int i = 0; i < 8; i++) {
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3301      	adds	r3, #1
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b07      	cmp	r3, #7
 800146c:	ddc9      	ble.n	8001402 <main+0x2e>
  }

  hagl_put_text(L"Jasnosc pomieszczenia", 16, 25, YELLOW, font6x9);
 800146e:	4b17      	ldr	r3, [pc, #92]	@ (80014cc <main+0xf8>)
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	f24e 03ff 	movw	r3, #57599	@ 0xe0ff
 8001476:	2219      	movs	r2, #25
 8001478:	2110      	movs	r1, #16
 800147a:	4815      	ldr	r0, [pc, #84]	@ (80014d0 <main+0xfc>)
 800147c:	f005 fda2 	bl	8006fc4 <hagl_put_text>
  hagl_fill_rectangle(40, 75, 50, 65, WHITE);
  hagl_fill_rectangle(20, 75, 30, 65, WHITE);
  */

  //Obramowanie progress_bar:
  hagl_draw_rectangle(30, 50, 130, 40, YELLOW);
 8001480:	f24e 03ff 	movw	r3, #57599	@ 0xe0ff
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2328      	movs	r3, #40	@ 0x28
 8001488:	2282      	movs	r2, #130	@ 0x82
 800148a:	2132      	movs	r1, #50	@ 0x32
 800148c:	201e      	movs	r0, #30
 800148e:	f005 fb71 	bl	8006b74 <hagl_draw_rectangle>

  //Przesylanie danych z bufora na wyswietlacz:
  lcd_copy();
 8001492:	f7ff fef1 	bl	8001278 <lcd_copy>

  volatile static uint16_t value;
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001496:	217f      	movs	r1, #127	@ 0x7f
 8001498:	480e      	ldr	r0, [pc, #56]	@ (80014d4 <main+0x100>)
 800149a:	f001 fda7 	bl	8002fec <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&value, 1);
 800149e:	2201      	movs	r2, #1
 80014a0:	490d      	ldr	r1, [pc, #52]	@ (80014d8 <main+0x104>)
 80014a2:	480c      	ldr	r0, [pc, #48]	@ (80014d4 <main+0x100>)
 80014a4:	f000 ff0a 	bl	80022bc <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  printf("ADC = %u\n", value);
 80014a8:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <main+0x104>)
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	4619      	mov	r1, r3
 80014b0:	480a      	ldr	r0, [pc, #40]	@ (80014dc <main+0x108>)
 80014b2:	f006 f949 	bl	8007748 <iprintf>
	  draw_progress_bar(value);
 80014b6:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <main+0x104>)
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff33 	bl	8001328 <draw_progress_bar>

	  HAL_Delay(250);
 80014c2:	20fa      	movs	r0, #250	@ 0xfa
 80014c4:	f000 fb8a 	bl	8001bdc <HAL_Delay>
	  printf("ADC = %u\n", value);
 80014c8:	bf00      	nop
 80014ca:	e7ed      	b.n	80014a8 <main+0xd4>
 80014cc:	080083fc 	.word	0x080083fc
 80014d0:	08008300 	.word	0x08008300
 80014d4:	2000008c 	.word	0x2000008c
 80014d8:	2000a13c 	.word	0x2000a13c
 80014dc:	08008358 	.word	0x08008358

080014e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b096      	sub	sp, #88	@ 0x58
 80014e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	2244      	movs	r2, #68	@ 0x44
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f006 f97f 	bl	80077f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f4:	463b      	mov	r3, r7
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001502:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001506:	f002 fb6b 	bl	8003be0 <HAL_PWREx_ControlVoltageScaling>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001510:	f000 f848 	bl	80015a4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001514:	f002 fb46 	bl	8003ba4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001518:	4b21      	ldr	r3, [pc, #132]	@ (80015a0 <SystemClock_Config+0xc0>)
 800151a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800151e:	4a20      	ldr	r2, [pc, #128]	@ (80015a0 <SystemClock_Config+0xc0>)
 8001520:	f023 0318 	bic.w	r3, r3, #24
 8001524:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001528:	2314      	movs	r3, #20
 800152a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800152c:	2301      	movs	r3, #1
 800152e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001530:	2301      	movs	r3, #1
 8001532:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001538:	2360      	movs	r3, #96	@ 0x60
 800153a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153c:	2302      	movs	r3, #2
 800153e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001540:	2301      	movs	r3, #1
 8001542:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001544:	2301      	movs	r3, #1
 8001546:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001548:	2328      	movs	r3, #40	@ 0x28
 800154a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800154c:	2307      	movs	r3, #7
 800154e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001550:	2302      	movs	r3, #2
 8001552:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001554:	2302      	movs	r3, #2
 8001556:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4618      	mov	r0, r3
 800155e:	f002 fb95 	bl	8003c8c <HAL_RCC_OscConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001568:	f000 f81c 	bl	80015a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800156c:	230f      	movs	r3, #15
 800156e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001570:	2303      	movs	r3, #3
 8001572:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800157c:	2300      	movs	r3, #0
 800157e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001580:	463b      	mov	r3, r7
 8001582:	2104      	movs	r1, #4
 8001584:	4618      	mov	r0, r3
 8001586:	f002 ff5d 	bl	8004444 <HAL_RCC_ClockConfig>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001590:	f000 f808 	bl	80015a4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001594:	f003 fc64 	bl	8004e60 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001598:	bf00      	nop
 800159a:	3758      	adds	r7, #88	@ 0x58
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40021000 	.word	0x40021000

080015a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a8:	b672      	cpsid	i
}
 80015aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <Error_Handler+0x8>

080015b0 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80015b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001624 <MX_SPI2_Init+0x74>)
 80015b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001628 <MX_SPI2_Init+0x78>)
 80015b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001624 <MX_SPI2_Init+0x74>)
 80015bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015c2:	4b18      	ldr	r3, [pc, #96]	@ (8001624 <MX_SPI2_Init+0x74>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015c8:	4b16      	ldr	r3, [pc, #88]	@ (8001624 <MX_SPI2_Init+0x74>)
 80015ca:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80015ce:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015d0:	4b14      	ldr	r3, [pc, #80]	@ (8001624 <MX_SPI2_Init+0x74>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015d6:	4b13      	ldr	r3, [pc, #76]	@ (8001624 <MX_SPI2_Init+0x74>)
 80015d8:	2200      	movs	r2, #0
 80015da:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015dc:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <MX_SPI2_Init+0x74>)
 80015de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015e2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001624 <MX_SPI2_Init+0x74>)
 80015e6:	2210      	movs	r2, #16
 80015e8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <MX_SPI2_Init+0x74>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <MX_SPI2_Init+0x74>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <MX_SPI2_Init+0x74>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80015fc:	4b09      	ldr	r3, [pc, #36]	@ (8001624 <MX_SPI2_Init+0x74>)
 80015fe:	2207      	movs	r2, #7
 8001600:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001602:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <MX_SPI2_Init+0x74>)
 8001604:	2200      	movs	r2, #0
 8001606:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001608:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <MX_SPI2_Init+0x74>)
 800160a:	2200      	movs	r2, #0
 800160c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800160e:	4805      	ldr	r0, [pc, #20]	@ (8001624 <MX_SPI2_Init+0x74>)
 8001610:	f003 fe08 	bl	8005224 <HAL_SPI_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800161a:	f7ff ffc3 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000a140 	.word	0x2000a140
 8001628:	40003800 	.word	0x40003800

0800162c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	@ 0x28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a3a      	ldr	r2, [pc, #232]	@ (8001734 <HAL_SPI_MspInit+0x108>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d16d      	bne.n	800172a <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800164e:	4b3a      	ldr	r3, [pc, #232]	@ (8001738 <HAL_SPI_MspInit+0x10c>)
 8001650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001652:	4a39      	ldr	r2, [pc, #228]	@ (8001738 <HAL_SPI_MspInit+0x10c>)
 8001654:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001658:	6593      	str	r3, [r2, #88]	@ 0x58
 800165a:	4b37      	ldr	r3, [pc, #220]	@ (8001738 <HAL_SPI_MspInit+0x10c>)
 800165c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800165e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001666:	4b34      	ldr	r3, [pc, #208]	@ (8001738 <HAL_SPI_MspInit+0x10c>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166a:	4a33      	ldr	r2, [pc, #204]	@ (8001738 <HAL_SPI_MspInit+0x10c>)
 800166c:	f043 0304 	orr.w	r3, r3, #4
 8001670:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001672:	4b31      	ldr	r3, [pc, #196]	@ (8001738 <HAL_SPI_MspInit+0x10c>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	4b2e      	ldr	r3, [pc, #184]	@ (8001738 <HAL_SPI_MspInit+0x10c>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001682:	4a2d      	ldr	r2, [pc, #180]	@ (8001738 <HAL_SPI_MspInit+0x10c>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800168a:	4b2b      	ldr	r3, [pc, #172]	@ (8001738 <HAL_SPI_MspInit+0x10c>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001696:	2308      	movs	r3, #8
 8001698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016a6:	2305      	movs	r3, #5
 80016a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4619      	mov	r1, r3
 80016b0:	4822      	ldr	r0, [pc, #136]	@ (800173c <HAL_SPI_MspInit+0x110>)
 80016b2:	f002 f8b5 	bl	8003820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c4:	2303      	movs	r3, #3
 80016c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016c8:	2305      	movs	r3, #5
 80016ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	4619      	mov	r1, r3
 80016d2:	481b      	ldr	r0, [pc, #108]	@ (8001740 <HAL_SPI_MspInit+0x114>)
 80016d4:	f002 f8a4 	bl	8003820 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80016d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <HAL_SPI_MspInit+0x118>)
 80016da:	4a1b      	ldr	r2, [pc, #108]	@ (8001748 <HAL_SPI_MspInit+0x11c>)
 80016dc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 80016de:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <HAL_SPI_MspInit+0x118>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016e4:	4b17      	ldr	r3, [pc, #92]	@ (8001744 <HAL_SPI_MspInit+0x118>)
 80016e6:	2210      	movs	r2, #16
 80016e8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ea:	4b16      	ldr	r3, [pc, #88]	@ (8001744 <HAL_SPI_MspInit+0x118>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016f0:	4b14      	ldr	r3, [pc, #80]	@ (8001744 <HAL_SPI_MspInit+0x118>)
 80016f2:	2280      	movs	r2, #128	@ 0x80
 80016f4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016f6:	4b13      	ldr	r3, [pc, #76]	@ (8001744 <HAL_SPI_MspInit+0x118>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016fc:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <HAL_SPI_MspInit+0x118>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001702:	4b10      	ldr	r3, [pc, #64]	@ (8001744 <HAL_SPI_MspInit+0x118>)
 8001704:	2200      	movs	r2, #0
 8001706:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001708:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <HAL_SPI_MspInit+0x118>)
 800170a:	2200      	movs	r2, #0
 800170c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800170e:	480d      	ldr	r0, [pc, #52]	@ (8001744 <HAL_SPI_MspInit+0x118>)
 8001710:	f001 fe8e 	bl	8003430 <HAL_DMA_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 800171a:	f7ff ff43 	bl	80015a4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a08      	ldr	r2, [pc, #32]	@ (8001744 <HAL_SPI_MspInit+0x118>)
 8001722:	655a      	str	r2, [r3, #84]	@ 0x54
 8001724:	4a07      	ldr	r2, [pc, #28]	@ (8001744 <HAL_SPI_MspInit+0x118>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800172a:	bf00      	nop
 800172c:	3728      	adds	r7, #40	@ 0x28
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40003800 	.word	0x40003800
 8001738:	40021000 	.word	0x40021000
 800173c:	48000800 	.word	0x48000800
 8001740:	48000400 	.word	0x48000400
 8001744:	2000a1a4 	.word	0x2000a1a4
 8001748:	40020058 	.word	0x40020058

0800174c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001752:	4b0f      	ldr	r3, [pc, #60]	@ (8001790 <HAL_MspInit+0x44>)
 8001754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001756:	4a0e      	ldr	r2, [pc, #56]	@ (8001790 <HAL_MspInit+0x44>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6613      	str	r3, [r2, #96]	@ 0x60
 800175e:	4b0c      	ldr	r3, [pc, #48]	@ (8001790 <HAL_MspInit+0x44>)
 8001760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <HAL_MspInit+0x44>)
 800176c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176e:	4a08      	ldr	r2, [pc, #32]	@ (8001790 <HAL_MspInit+0x44>)
 8001770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001774:	6593      	str	r3, [r2, #88]	@ 0x58
 8001776:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <HAL_MspInit+0x44>)
 8001778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800177a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40021000 	.word	0x40021000

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <NMI_Handler+0x4>

0800179c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <MemManage_Handler+0x4>

080017ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <BusFault_Handler+0x4>

080017b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <UsageFault_Handler+0x4>

080017bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ea:	f000 f9d7 	bl	8001b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017f8:	4802      	ldr	r0, [pc, #8]	@ (8001804 <DMA1_Channel1_IRQHandler+0x10>)
 80017fa:	f001 ff31 	bl	8003660 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200000f0 	.word	0x200000f0

08001808 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800180c:	4802      	ldr	r0, [pc, #8]	@ (8001818 <DMA1_Channel5_IRQHandler+0x10>)
 800180e:	f001 ff27 	bl	8003660 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2000a1a4 	.word	0x2000a1a4

0800181c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	e00a      	b.n	8001844 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800182e:	f3af 8000 	nop.w
 8001832:	4601      	mov	r1, r0
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	60ba      	str	r2, [r7, #8]
 800183a:	b2ca      	uxtb	r2, r1
 800183c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	3301      	adds	r3, #1
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	429a      	cmp	r2, r3
 800184a:	dbf0      	blt.n	800182e <_read+0x12>
  }

  return len;
 800184c:	687b      	ldr	r3, [r7, #4]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	e009      	b.n	800187c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	60ba      	str	r2, [r7, #8]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fd3f 	bl	80012f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	3301      	adds	r3, #1
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	429a      	cmp	r2, r3
 8001882:	dbf1      	blt.n	8001868 <_write+0x12>
  }
  return len;
 8001884:	687b      	ldr	r3, [r7, #4]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <_close>:

int _close(int file)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018b6:	605a      	str	r2, [r3, #4]
  return 0;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <_isatty>:

int _isatty(int file)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018ce:	2301      	movs	r3, #1
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001900:	4a14      	ldr	r2, [pc, #80]	@ (8001954 <_sbrk+0x5c>)
 8001902:	4b15      	ldr	r3, [pc, #84]	@ (8001958 <_sbrk+0x60>)
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800190c:	4b13      	ldr	r3, [pc, #76]	@ (800195c <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d102      	bne.n	800191a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001914:	4b11      	ldr	r3, [pc, #68]	@ (800195c <_sbrk+0x64>)
 8001916:	4a12      	ldr	r2, [pc, #72]	@ (8001960 <_sbrk+0x68>)
 8001918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800191a:	4b10      	ldr	r3, [pc, #64]	@ (800195c <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	429a      	cmp	r2, r3
 8001926:	d207      	bcs.n	8001938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001928:	f005 ffb2 	bl	8007890 <__errno>
 800192c:	4603      	mov	r3, r0
 800192e:	220c      	movs	r2, #12
 8001930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
 8001936:	e009      	b.n	800194c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001938:	4b08      	ldr	r3, [pc, #32]	@ (800195c <_sbrk+0x64>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800193e:	4b07      	ldr	r3, [pc, #28]	@ (800195c <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	4a05      	ldr	r2, [pc, #20]	@ (800195c <_sbrk+0x64>)
 8001948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194a:	68fb      	ldr	r3, [r7, #12]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20018000 	.word	0x20018000
 8001958:	00002000 	.word	0x00002000
 800195c:	2000a1ec 	.word	0x2000a1ec
 8001960:	2000a3c8 	.word	0x2000a3c8

08001964 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001968:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <SystemInit+0x20>)
 800196a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800196e:	4a05      	ldr	r2, [pc, #20]	@ (8001984 <SystemInit+0x20>)
 8001970:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001974:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800198c:	4b14      	ldr	r3, [pc, #80]	@ (80019e0 <MX_USART2_UART_Init+0x58>)
 800198e:	4a15      	ldr	r2, [pc, #84]	@ (80019e4 <MX_USART2_UART_Init+0x5c>)
 8001990:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001992:	4b13      	ldr	r3, [pc, #76]	@ (80019e0 <MX_USART2_UART_Init+0x58>)
 8001994:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001998:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800199a:	4b11      	ldr	r3, [pc, #68]	@ (80019e0 <MX_USART2_UART_Init+0x58>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019a0:	4b0f      	ldr	r3, [pc, #60]	@ (80019e0 <MX_USART2_UART_Init+0x58>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019a6:	4b0e      	ldr	r3, [pc, #56]	@ (80019e0 <MX_USART2_UART_Init+0x58>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019ac:	4b0c      	ldr	r3, [pc, #48]	@ (80019e0 <MX_USART2_UART_Init+0x58>)
 80019ae:	220c      	movs	r2, #12
 80019b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b2:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <MX_USART2_UART_Init+0x58>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b8:	4b09      	ldr	r3, [pc, #36]	@ (80019e0 <MX_USART2_UART_Init+0x58>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019be:	4b08      	ldr	r3, [pc, #32]	@ (80019e0 <MX_USART2_UART_Init+0x58>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019c4:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <MX_USART2_UART_Init+0x58>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019ca:	4805      	ldr	r0, [pc, #20]	@ (80019e0 <MX_USART2_UART_Init+0x58>)
 80019cc:	f003 ffb6 	bl	800593c <HAL_UART_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019d6:	f7ff fde5 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	2000a1f0 	.word	0x2000a1f0
 80019e4:	40004400 	.word	0x40004400

080019e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b0ac      	sub	sp, #176	@ 0xb0
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	2288      	movs	r2, #136	@ 0x88
 8001a06:	2100      	movs	r1, #0
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f005 fef2 	bl	80077f2 <memset>
  if(uartHandle->Instance==USART2)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a21      	ldr	r2, [pc, #132]	@ (8001a98 <HAL_UART_MspInit+0xb0>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d13b      	bne.n	8001a90 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4618      	mov	r0, r3
 8001a26:	f002 ff31 	bl	800488c <HAL_RCCEx_PeriphCLKConfig>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a30:	f7ff fdb8 	bl	80015a4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a34:	4b19      	ldr	r3, [pc, #100]	@ (8001a9c <HAL_UART_MspInit+0xb4>)
 8001a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a38:	4a18      	ldr	r2, [pc, #96]	@ (8001a9c <HAL_UART_MspInit+0xb4>)
 8001a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a40:	4b16      	ldr	r3, [pc, #88]	@ (8001a9c <HAL_UART_MspInit+0xb4>)
 8001a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4c:	4b13      	ldr	r3, [pc, #76]	@ (8001a9c <HAL_UART_MspInit+0xb4>)
 8001a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a50:	4a12      	ldr	r2, [pc, #72]	@ (8001a9c <HAL_UART_MspInit+0xb4>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a58:	4b10      	ldr	r3, [pc, #64]	@ (8001a9c <HAL_UART_MspInit+0xb4>)
 8001a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a64:	230c      	movs	r3, #12
 8001a66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a76:	2303      	movs	r3, #3
 8001a78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a7c:	2307      	movs	r3, #7
 8001a7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a82:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a86:	4619      	mov	r1, r3
 8001a88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a8c:	f001 fec8 	bl	8003820 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a90:	bf00      	nop
 8001a92:	37b0      	adds	r7, #176	@ 0xb0
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40004400 	.word	0x40004400
 8001a9c:	40021000 	.word	0x40021000

08001aa0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001aa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ad8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001aa4:	f7ff ff5e 	bl	8001964 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa8:	480c      	ldr	r0, [pc, #48]	@ (8001adc <LoopForever+0x6>)
  ldr r1, =_edata
 8001aaa:	490d      	ldr	r1, [pc, #52]	@ (8001ae0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae4 <LoopForever+0xe>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab0:	e002      	b.n	8001ab8 <LoopCopyDataInit>

08001ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab6:	3304      	adds	r3, #4

08001ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001abc:	d3f9      	bcc.n	8001ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001abe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ac0:	4c0a      	ldr	r4, [pc, #40]	@ (8001aec <LoopForever+0x16>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac4:	e001      	b.n	8001aca <LoopFillZerobss>

08001ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac8:	3204      	adds	r2, #4

08001aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001acc:	d3fb      	bcc.n	8001ac6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ace:	f005 fee5 	bl	800789c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ad2:	f7ff fc7f 	bl	80013d4 <main>

08001ad6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ad6:	e7fe      	b.n	8001ad6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ad8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ae4:	0800b440 	.word	0x0800b440
  ldr r2, =_sbss
 8001ae8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001aec:	2000a3c8 	.word	0x2000a3c8

08001af0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001af0:	e7fe      	b.n	8001af0 <ADC1_2_IRQHandler>

08001af2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001afc:	2003      	movs	r0, #3
 8001afe:	f001 fc55 	bl	80033ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b02:	200f      	movs	r0, #15
 8001b04:	f000 f80e 	bl	8001b24 <HAL_InitTick>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	71fb      	strb	r3, [r7, #7]
 8001b12:	e001      	b.n	8001b18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b14:	f7ff fe1a 	bl	800174c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b18:	79fb      	ldrb	r3, [r7, #7]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b30:	4b17      	ldr	r3, [pc, #92]	@ (8001b90 <HAL_InitTick+0x6c>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d023      	beq.n	8001b80 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b38:	4b16      	ldr	r3, [pc, #88]	@ (8001b94 <HAL_InitTick+0x70>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b14      	ldr	r3, [pc, #80]	@ (8001b90 <HAL_InitTick+0x6c>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	4619      	mov	r1, r3
 8001b42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f001 fc61 	bl	8003416 <HAL_SYSTICK_Config>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10f      	bne.n	8001b7a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b0f      	cmp	r3, #15
 8001b5e:	d809      	bhi.n	8001b74 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b60:	2200      	movs	r2, #0
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	f04f 30ff 	mov.w	r0, #4294967295
 8001b68:	f001 fc2b 	bl	80033c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b98 <HAL_InitTick+0x74>)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	e007      	b.n	8001b84 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	e004      	b.n	8001b84 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	73fb      	strb	r3, [r7, #15]
 8001b7e:	e001      	b.n	8001b84 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000008 	.word	0x20000008
 8001b94:	20000000 	.word	0x20000000
 8001b98:	20000004 	.word	0x20000004

08001b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <HAL_IncTick+0x20>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <HAL_IncTick+0x24>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	4a04      	ldr	r2, [pc, #16]	@ (8001bc0 <HAL_IncTick+0x24>)
 8001bae:	6013      	str	r3, [r2, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000008 	.word	0x20000008
 8001bc0:	2000a278 	.word	0x2000a278

08001bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc8:	4b03      	ldr	r3, [pc, #12]	@ (8001bd8 <HAL_GetTick+0x14>)
 8001bca:	681b      	ldr	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	2000a278 	.word	0x2000a278

08001bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be4:	f7ff ffee 	bl	8001bc4 <HAL_GetTick>
 8001be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf4:	d005      	beq.n	8001c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c20 <HAL_Delay+0x44>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4413      	add	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c02:	bf00      	nop
 8001c04:	f7ff ffde 	bl	8001bc4 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d8f7      	bhi.n	8001c04 <HAL_Delay+0x28>
  {
  }
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000008 	.word	0x20000008

08001c24 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	609a      	str	r2, [r3, #8]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b087      	sub	sp, #28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3360      	adds	r3, #96	@ 0x60
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b08      	ldr	r3, [pc, #32]	@ (8001cd0 <LL_ADC_SetOffset+0x44>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001cc4:	bf00      	nop
 8001cc6:	371c      	adds	r7, #28
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	03fff000 	.word	0x03fff000

08001cd4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3360      	adds	r3, #96	@ 0x60
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b087      	sub	sp, #28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	3360      	adds	r3, #96	@ 0x60
 8001d10:	461a      	mov	r2, r3
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	431a      	orrs	r2, r3
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d2a:	bf00      	nop
 8001d2c:	371c      	adds	r7, #28
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b087      	sub	sp, #28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	3330      	adds	r3, #48	@ 0x30
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	4413      	add	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	f003 031f 	and.w	r3, r3, #31
 8001d86:	211f      	movs	r1, #31
 8001d88:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	401a      	ands	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	0e9b      	lsrs	r3, r3, #26
 8001d94:	f003 011f 	and.w	r1, r3, #31
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	f003 031f 	and.w	r3, r3, #31
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	431a      	orrs	r2, r3
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001da8:	bf00      	nop
 8001daa:	371c      	adds	r7, #28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3314      	adds	r3, #20
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	0e5b      	lsrs	r3, r3, #25
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	4413      	add	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	0d1b      	lsrs	r3, r3, #20
 8001ddc:	f003 031f 	and.w	r3, r3, #31
 8001de0:	2107      	movs	r1, #7
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	401a      	ands	r2, r3
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	0d1b      	lsrs	r3, r3, #20
 8001dee:	f003 031f 	and.w	r3, r3, #31
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	fa01 f303 	lsl.w	r3, r1, r3
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dfe:	bf00      	nop
 8001e00:	371c      	adds	r7, #28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e24:	43db      	mvns	r3, r3
 8001e26:	401a      	ands	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f003 0318 	and.w	r3, r3, #24
 8001e2e:	4908      	ldr	r1, [pc, #32]	@ (8001e50 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e30:	40d9      	lsrs	r1, r3
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	400b      	ands	r3, r1
 8001e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e42:	bf00      	nop
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	0007ffff 	.word	0x0007ffff

08001e54 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 031f 	and.w	r3, r3, #31
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001e80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6093      	str	r3, [r2, #8]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ea4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ea8:	d101      	bne.n	8001eae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ecc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ed0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ef8:	d101      	bne.n	8001efe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f20:	f043 0201 	orr.w	r2, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f48:	f043 0202 	orr.w	r2, r3, #2
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <LL_ADC_IsEnabled+0x18>
 8001f70:	2301      	movs	r3, #1
 8001f72:	e000      	b.n	8001f76 <LL_ADC_IsEnabled+0x1a>
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d101      	bne.n	8001f9a <LL_ADC_IsDisableOngoing+0x18>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <LL_ADC_IsDisableOngoing+0x1a>
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fb8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fbc:	f043 0204 	orr.w	r2, r3, #4
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d101      	bne.n	8001fe8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e000      	b.n	8001fea <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b08      	cmp	r3, #8
 8002008:	d101      	bne.n	800200e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800201c:	b590      	push	{r4, r7, lr}
 800201e:	b089      	sub	sp, #36	@ 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e130      	b.n	8002298 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002040:	2b00      	cmp	r3, #0
 8002042:	d109      	bne.n	8002058 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7fe ff05 	bl	8000e54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff19 	bl	8001e94 <LL_ADC_IsDeepPowerDownEnabled>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d004      	beq.n	8002072 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff feff 	bl	8001e70 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff ff34 	bl	8001ee4 <LL_ADC_IsInternalRegulatorEnabled>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d115      	bne.n	80020ae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ff18 	bl	8001ebc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800208c:	4b84      	ldr	r3, [pc, #528]	@ (80022a0 <HAL_ADC_Init+0x284>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	099b      	lsrs	r3, r3, #6
 8002092:	4a84      	ldr	r2, [pc, #528]	@ (80022a4 <HAL_ADC_Init+0x288>)
 8002094:	fba2 2303 	umull	r2, r3, r2, r3
 8002098:	099b      	lsrs	r3, r3, #6
 800209a:	3301      	adds	r3, #1
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020a0:	e002      	b.n	80020a8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	3b01      	subs	r3, #1
 80020a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f9      	bne.n	80020a2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff ff16 	bl	8001ee4 <LL_ADC_IsInternalRegulatorEnabled>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10d      	bne.n	80020da <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c2:	f043 0210 	orr.w	r2, r3, #16
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ce:	f043 0201 	orr.w	r2, r3, #1
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff ff76 	bl	8001fd0 <LL_ADC_REG_IsConversionOngoing>
 80020e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f040 80c9 	bne.w	8002286 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f040 80c5 	bne.w	8002286 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002100:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002104:	f043 0202 	orr.w	r2, r3, #2
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff23 	bl	8001f5c <LL_ADC_IsEnabled>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d115      	bne.n	8002148 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800211c:	4862      	ldr	r0, [pc, #392]	@ (80022a8 <HAL_ADC_Init+0x28c>)
 800211e:	f7ff ff1d 	bl	8001f5c <LL_ADC_IsEnabled>
 8002122:	4604      	mov	r4, r0
 8002124:	4861      	ldr	r0, [pc, #388]	@ (80022ac <HAL_ADC_Init+0x290>)
 8002126:	f7ff ff19 	bl	8001f5c <LL_ADC_IsEnabled>
 800212a:	4603      	mov	r3, r0
 800212c:	431c      	orrs	r4, r3
 800212e:	4860      	ldr	r0, [pc, #384]	@ (80022b0 <HAL_ADC_Init+0x294>)
 8002130:	f7ff ff14 	bl	8001f5c <LL_ADC_IsEnabled>
 8002134:	4603      	mov	r3, r0
 8002136:	4323      	orrs	r3, r4
 8002138:	2b00      	cmp	r3, #0
 800213a:	d105      	bne.n	8002148 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	4619      	mov	r1, r3
 8002142:	485c      	ldr	r0, [pc, #368]	@ (80022b4 <HAL_ADC_Init+0x298>)
 8002144:	f7ff fd6e 	bl	8001c24 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	7e5b      	ldrb	r3, [r3, #25]
 800214c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002152:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002158:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800215e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002166:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d106      	bne.n	8002184 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217a:	3b01      	subs	r3, #1
 800217c:	045b      	lsls	r3, r3, #17
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002188:	2b00      	cmp	r3, #0
 800218a:	d009      	beq.n	80021a0 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002190:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002198:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	4b44      	ldr	r3, [pc, #272]	@ (80022b8 <HAL_ADC_Init+0x29c>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6812      	ldr	r2, [r2, #0]
 80021ae:	69b9      	ldr	r1, [r7, #24]
 80021b0:	430b      	orrs	r3, r1
 80021b2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff ff1c 	bl	8001ff6 <LL_ADC_INJ_IsConversionOngoing>
 80021be:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d13d      	bne.n	8002242 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d13a      	bne.n	8002242 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021d0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80021d8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021e8:	f023 0302 	bic.w	r3, r3, #2
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	69b9      	ldr	r1, [r7, #24]
 80021f2:	430b      	orrs	r3, r1
 80021f4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d118      	bne.n	8002232 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800220a:	f023 0304 	bic.w	r3, r3, #4
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002216:	4311      	orrs	r1, r2
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800221c:	4311      	orrs	r1, r2
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002222:	430a      	orrs	r2, r1
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 0201 	orr.w	r2, r2, #1
 800222e:	611a      	str	r2, [r3, #16]
 8002230:	e007      	b.n	8002242 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	691a      	ldr	r2, [r3, #16]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0201 	bic.w	r2, r2, #1
 8002240:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d10c      	bne.n	8002264 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002250:	f023 010f 	bic.w	r1, r3, #15
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	1e5a      	subs	r2, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	631a      	str	r2, [r3, #48]	@ 0x30
 8002262:	e007      	b.n	8002274 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 020f 	bic.w	r2, r2, #15
 8002272:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002278:	f023 0303 	bic.w	r3, r3, #3
 800227c:	f043 0201 	orr.w	r2, r3, #1
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	655a      	str	r2, [r3, #84]	@ 0x54
 8002284:	e007      	b.n	8002296 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800228a:	f043 0210 	orr.w	r2, r3, #16
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002296:	7ffb      	ldrb	r3, [r7, #31]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3724      	adds	r7, #36	@ 0x24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd90      	pop	{r4, r7, pc}
 80022a0:	20000000 	.word	0x20000000
 80022a4:	053e2d63 	.word	0x053e2d63
 80022a8:	50040000 	.word	0x50040000
 80022ac:	50040100 	.word	0x50040100
 80022b0:	50040200 	.word	0x50040200
 80022b4:	50040300 	.word	0x50040300
 80022b8:	fff0c007 	.word	0xfff0c007

080022bc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022c8:	4853      	ldr	r0, [pc, #332]	@ (8002418 <HAL_ADC_Start_DMA+0x15c>)
 80022ca:	f7ff fdc3 	bl	8001e54 <LL_ADC_GetMultimode>
 80022ce:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fe7b 	bl	8001fd0 <LL_ADC_REG_IsConversionOngoing>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f040 8093 	bne.w	8002408 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <HAL_ADC_Start_DMA+0x34>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e08e      	b.n	800240e <HAL_ADC_Start_DMA+0x152>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a47      	ldr	r2, [pc, #284]	@ (800241c <HAL_ADC_Start_DMA+0x160>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d008      	beq.n	8002314 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d005      	beq.n	8002314 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	2b05      	cmp	r3, #5
 800230c:	d002      	beq.n	8002314 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	2b09      	cmp	r3, #9
 8002312:	d172      	bne.n	80023fa <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 fc9d 	bl	8002c54 <ADC_Enable>
 800231a:	4603      	mov	r3, r0
 800231c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800231e:	7dfb      	ldrb	r3, [r7, #23]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d165      	bne.n	80023f0 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002328:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800232c:	f023 0301 	bic.w	r3, r3, #1
 8002330:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a38      	ldr	r2, [pc, #224]	@ (8002420 <HAL_ADC_Start_DMA+0x164>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d002      	beq.n	8002348 <HAL_ADC_Start_DMA+0x8c>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	e000      	b.n	800234a <HAL_ADC_Start_DMA+0x8e>
 8002348:	4b36      	ldr	r3, [pc, #216]	@ (8002424 <HAL_ADC_Start_DMA+0x168>)
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	4293      	cmp	r3, r2
 8002350:	d002      	beq.n	8002358 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d105      	bne.n	8002364 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800235c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002368:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d006      	beq.n	800237e <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002374:	f023 0206 	bic.w	r2, r3, #6
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	659a      	str	r2, [r3, #88]	@ 0x58
 800237c:	e002      	b.n	8002384 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002388:	4a27      	ldr	r2, [pc, #156]	@ (8002428 <HAL_ADC_Start_DMA+0x16c>)
 800238a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002390:	4a26      	ldr	r2, [pc, #152]	@ (800242c <HAL_ADC_Start_DMA+0x170>)
 8002392:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002398:	4a25      	ldr	r2, [pc, #148]	@ (8002430 <HAL_ADC_Start_DMA+0x174>)
 800239a:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	221c      	movs	r2, #28
 80023a2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0210 	orr.w	r2, r2, #16
 80023ba:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0201 	orr.w	r2, r2, #1
 80023ca:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	3340      	adds	r3, #64	@ 0x40
 80023d6:	4619      	mov	r1, r3
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f001 f8e0 	bl	80035a0 <HAL_DMA_Start_IT>
 80023e0:	4603      	mov	r3, r0
 80023e2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fddd 	bl	8001fa8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80023ee:	e00d      	b.n	800240c <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80023f8:	e008      	b.n	800240c <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002406:	e001      	b.n	800240c <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002408:	2302      	movs	r3, #2
 800240a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800240c:	7dfb      	ldrb	r3, [r7, #23]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	50040300 	.word	0x50040300
 800241c:	50040200 	.word	0x50040200
 8002420:	50040100 	.word	0x50040100
 8002424:	50040000 	.word	0x50040000
 8002428:	08002e1f 	.word	0x08002e1f
 800242c:	08002ef7 	.word	0x08002ef7
 8002430:	08002f13 	.word	0x08002f13

08002434 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b0b6      	sub	sp, #216	@ 0xd8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002480:	2300      	movs	r3, #0
 8002482:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x22>
 800248e:	2302      	movs	r3, #2
 8002490:	e3c9      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x7b6>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fd96 	bl	8001fd0 <LL_ADC_REG_IsConversionOngoing>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f040 83aa 	bne.w	8002c00 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b05      	cmp	r3, #5
 80024ba:	d824      	bhi.n	8002506 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	3b02      	subs	r3, #2
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d81b      	bhi.n	80024fe <HAL_ADC_ConfigChannel+0x8e>
 80024c6:	a201      	add	r2, pc, #4	@ (adr r2, 80024cc <HAL_ADC_ConfigChannel+0x5c>)
 80024c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024cc:	080024dd 	.word	0x080024dd
 80024d0:	080024e5 	.word	0x080024e5
 80024d4:	080024ed 	.word	0x080024ed
 80024d8:	080024f5 	.word	0x080024f5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80024dc:	230c      	movs	r3, #12
 80024de:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80024e2:	e010      	b.n	8002506 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80024e4:	2312      	movs	r3, #18
 80024e6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80024ea:	e00c      	b.n	8002506 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80024ec:	2318      	movs	r3, #24
 80024ee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80024f2:	e008      	b.n	8002506 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80024f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80024fc:	e003      	b.n	8002506 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80024fe:	2306      	movs	r3, #6
 8002500:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002504:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6818      	ldr	r0, [r3, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	461a      	mov	r2, r3
 8002510:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002514:	f7ff fc22 	bl	8001d5c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff fd57 	bl	8001fd0 <LL_ADC_REG_IsConversionOngoing>
 8002522:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff fd63 	bl	8001ff6 <LL_ADC_INJ_IsConversionOngoing>
 8002530:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002534:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002538:	2b00      	cmp	r3, #0
 800253a:	f040 81a4 	bne.w	8002886 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800253e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002542:	2b00      	cmp	r3, #0
 8002544:	f040 819f 	bne.w	8002886 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	6819      	ldr	r1, [r3, #0]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	461a      	mov	r2, r3
 8002556:	f7ff fc2d 	bl	8001db4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	695a      	ldr	r2, [r3, #20]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	08db      	lsrs	r3, r3, #3
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	2b04      	cmp	r3, #4
 800257a:	d00a      	beq.n	8002592 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	6919      	ldr	r1, [r3, #16]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800258c:	f7ff fb7e 	bl	8001c8c <LL_ADC_SetOffset>
 8002590:	e179      	b.n	8002886 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2100      	movs	r1, #0
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff fb9b 	bl	8001cd4 <LL_ADC_GetOffsetChannel>
 800259e:	4603      	mov	r3, r0
 80025a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10a      	bne.n	80025be <HAL_ADC_ConfigChannel+0x14e>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2100      	movs	r1, #0
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff fb90 	bl	8001cd4 <LL_ADC_GetOffsetChannel>
 80025b4:	4603      	mov	r3, r0
 80025b6:	0e9b      	lsrs	r3, r3, #26
 80025b8:	f003 021f 	and.w	r2, r3, #31
 80025bc:	e01e      	b.n	80025fc <HAL_ADC_ConfigChannel+0x18c>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2100      	movs	r1, #0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff fb85 	bl	8001cd4 <LL_ADC_GetOffsetChannel>
 80025ca:	4603      	mov	r3, r0
 80025cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025d4:	fa93 f3a3 	rbit	r3, r3
 80025d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80025e0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80025ec:	2320      	movs	r3, #32
 80025ee:	e004      	b.n	80025fa <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80025f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80025f4:	fab3 f383 	clz	r3, r3
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002604:	2b00      	cmp	r3, #0
 8002606:	d105      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x1a4>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	0e9b      	lsrs	r3, r3, #26
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	e018      	b.n	8002646 <HAL_ADC_ConfigChannel+0x1d6>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002628:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800262c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002630:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002638:	2320      	movs	r3, #32
 800263a:	e004      	b.n	8002646 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800263c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002640:	fab3 f383 	clz	r3, r3
 8002644:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002646:	429a      	cmp	r2, r3
 8002648:	d106      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2200      	movs	r2, #0
 8002650:	2100      	movs	r1, #0
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fb54 	bl	8001d00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2101      	movs	r1, #1
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fb38 	bl	8001cd4 <LL_ADC_GetOffsetChannel>
 8002664:	4603      	mov	r3, r0
 8002666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10a      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x214>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2101      	movs	r1, #1
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fb2d 	bl	8001cd4 <LL_ADC_GetOffsetChannel>
 800267a:	4603      	mov	r3, r0
 800267c:	0e9b      	lsrs	r3, r3, #26
 800267e:	f003 021f 	and.w	r2, r3, #31
 8002682:	e01e      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x252>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2101      	movs	r1, #1
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff fb22 	bl	8001cd4 <LL_ADC_GetOffsetChannel>
 8002690:	4603      	mov	r3, r0
 8002692:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800269a:	fa93 f3a3 	rbit	r3, r3
 800269e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80026a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80026aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80026b2:	2320      	movs	r3, #32
 80026b4:	e004      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80026b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026ba:	fab3 f383 	clz	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d105      	bne.n	80026da <HAL_ADC_ConfigChannel+0x26a>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	0e9b      	lsrs	r3, r3, #26
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	e018      	b.n	800270c <HAL_ADC_ConfigChannel+0x29c>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026e6:	fa93 f3a3 	rbit	r3, r3
 80026ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80026ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80026f2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80026f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80026fe:	2320      	movs	r3, #32
 8002700:	e004      	b.n	800270c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002702:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002706:	fab3 f383 	clz	r3, r3
 800270a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800270c:	429a      	cmp	r2, r3
 800270e:	d106      	bne.n	800271e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2200      	movs	r2, #0
 8002716:	2101      	movs	r1, #1
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff faf1 	bl	8001d00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2102      	movs	r1, #2
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff fad5 	bl	8001cd4 <LL_ADC_GetOffsetChannel>
 800272a:	4603      	mov	r3, r0
 800272c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10a      	bne.n	800274a <HAL_ADC_ConfigChannel+0x2da>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2102      	movs	r1, #2
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff faca 	bl	8001cd4 <LL_ADC_GetOffsetChannel>
 8002740:	4603      	mov	r3, r0
 8002742:	0e9b      	lsrs	r3, r3, #26
 8002744:	f003 021f 	and.w	r2, r3, #31
 8002748:	e01e      	b.n	8002788 <HAL_ADC_ConfigChannel+0x318>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2102      	movs	r1, #2
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fabf 	bl	8001cd4 <LL_ADC_GetOffsetChannel>
 8002756:	4603      	mov	r3, r0
 8002758:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002760:	fa93 f3a3 	rbit	r3, r3
 8002764:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002768:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800276c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002770:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002778:	2320      	movs	r3, #32
 800277a:	e004      	b.n	8002786 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800277c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002780:	fab3 f383 	clz	r3, r3
 8002784:	b2db      	uxtb	r3, r3
 8002786:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002790:	2b00      	cmp	r3, #0
 8002792:	d105      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x330>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	0e9b      	lsrs	r3, r3, #26
 800279a:	f003 031f 	and.w	r3, r3, #31
 800279e:	e014      	b.n	80027ca <HAL_ADC_ConfigChannel+0x35a>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027a8:	fa93 f3a3 	rbit	r3, r3
 80027ac:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80027ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80027b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80027bc:	2320      	movs	r3, #32
 80027be:	e004      	b.n	80027ca <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80027c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027c4:	fab3 f383 	clz	r3, r3
 80027c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d106      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2200      	movs	r2, #0
 80027d4:	2102      	movs	r1, #2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fa92 	bl	8001d00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2103      	movs	r1, #3
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff fa76 	bl	8001cd4 <LL_ADC_GetOffsetChannel>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10a      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x398>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2103      	movs	r1, #3
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff fa6b 	bl	8001cd4 <LL_ADC_GetOffsetChannel>
 80027fe:	4603      	mov	r3, r0
 8002800:	0e9b      	lsrs	r3, r3, #26
 8002802:	f003 021f 	and.w	r2, r3, #31
 8002806:	e017      	b.n	8002838 <HAL_ADC_ConfigChannel+0x3c8>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2103      	movs	r1, #3
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff fa60 	bl	8001cd4 <LL_ADC_GetOffsetChannel>
 8002814:	4603      	mov	r3, r0
 8002816:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002818:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800281a:	fa93 f3a3 	rbit	r3, r3
 800281e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002820:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002822:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002824:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800282a:	2320      	movs	r3, #32
 800282c:	e003      	b.n	8002836 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800282e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002830:	fab3 f383 	clz	r3, r3
 8002834:	b2db      	uxtb	r3, r3
 8002836:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002840:	2b00      	cmp	r3, #0
 8002842:	d105      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x3e0>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	0e9b      	lsrs	r3, r3, #26
 800284a:	f003 031f 	and.w	r3, r3, #31
 800284e:	e011      	b.n	8002874 <HAL_ADC_ConfigChannel+0x404>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800285e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002860:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002862:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002868:	2320      	movs	r3, #32
 800286a:	e003      	b.n	8002874 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800286c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800286e:	fab3 f383 	clz	r3, r3
 8002872:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002874:	429a      	cmp	r2, r3
 8002876:	d106      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2200      	movs	r2, #0
 800287e:	2103      	movs	r1, #3
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff fa3d 	bl	8001d00 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff fb66 	bl	8001f5c <LL_ADC_IsEnabled>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	f040 8140 	bne.w	8002b18 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	6819      	ldr	r1, [r3, #0]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	461a      	mov	r2, r3
 80028a6:	f7ff fab1 	bl	8001e0c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	4a8f      	ldr	r2, [pc, #572]	@ (8002aec <HAL_ADC_ConfigChannel+0x67c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	f040 8131 	bne.w	8002b18 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10b      	bne.n	80028de <HAL_ADC_ConfigChannel+0x46e>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	0e9b      	lsrs	r3, r3, #26
 80028cc:	3301      	adds	r3, #1
 80028ce:	f003 031f 	and.w	r3, r3, #31
 80028d2:	2b09      	cmp	r3, #9
 80028d4:	bf94      	ite	ls
 80028d6:	2301      	movls	r3, #1
 80028d8:	2300      	movhi	r3, #0
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	e019      	b.n	8002912 <HAL_ADC_ConfigChannel+0x4a2>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80028ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80028f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80028f6:	2320      	movs	r3, #32
 80028f8:	e003      	b.n	8002902 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80028fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028fc:	fab3 f383 	clz	r3, r3
 8002900:	b2db      	uxtb	r3, r3
 8002902:	3301      	adds	r3, #1
 8002904:	f003 031f 	and.w	r3, r3, #31
 8002908:	2b09      	cmp	r3, #9
 800290a:	bf94      	ite	ls
 800290c:	2301      	movls	r3, #1
 800290e:	2300      	movhi	r3, #0
 8002910:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002912:	2b00      	cmp	r3, #0
 8002914:	d079      	beq.n	8002a0a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291e:	2b00      	cmp	r3, #0
 8002920:	d107      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x4c2>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	0e9b      	lsrs	r3, r3, #26
 8002928:	3301      	adds	r3, #1
 800292a:	069b      	lsls	r3, r3, #26
 800292c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002930:	e015      	b.n	800295e <HAL_ADC_ConfigChannel+0x4ee>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002940:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002942:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002944:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800294a:	2320      	movs	r3, #32
 800294c:	e003      	b.n	8002956 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800294e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002950:	fab3 f383 	clz	r3, r3
 8002954:	b2db      	uxtb	r3, r3
 8002956:	3301      	adds	r3, #1
 8002958:	069b      	lsls	r3, r3, #26
 800295a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002966:	2b00      	cmp	r3, #0
 8002968:	d109      	bne.n	800297e <HAL_ADC_ConfigChannel+0x50e>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	0e9b      	lsrs	r3, r3, #26
 8002970:	3301      	adds	r3, #1
 8002972:	f003 031f 	and.w	r3, r3, #31
 8002976:	2101      	movs	r1, #1
 8002978:	fa01 f303 	lsl.w	r3, r1, r3
 800297c:	e017      	b.n	80029ae <HAL_ADC_ConfigChannel+0x53e>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002984:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800298c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800298e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002990:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002996:	2320      	movs	r3, #32
 8002998:	e003      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800299a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800299c:	fab3 f383 	clz	r3, r3
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	3301      	adds	r3, #1
 80029a4:	f003 031f 	and.w	r3, r3, #31
 80029a8:	2101      	movs	r1, #1
 80029aa:	fa01 f303 	lsl.w	r3, r1, r3
 80029ae:	ea42 0103 	orr.w	r1, r2, r3
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10a      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x564>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	0e9b      	lsrs	r3, r3, #26
 80029c4:	3301      	adds	r3, #1
 80029c6:	f003 021f 	and.w	r2, r3, #31
 80029ca:	4613      	mov	r3, r2
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	4413      	add	r3, r2
 80029d0:	051b      	lsls	r3, r3, #20
 80029d2:	e018      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x596>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029dc:	fa93 f3a3 	rbit	r3, r3
 80029e0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80029e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80029e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80029ec:	2320      	movs	r3, #32
 80029ee:	e003      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80029f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	3301      	adds	r3, #1
 80029fa:	f003 021f 	and.w	r2, r3, #31
 80029fe:	4613      	mov	r3, r2
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	4413      	add	r3, r2
 8002a04:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a06:	430b      	orrs	r3, r1
 8002a08:	e081      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d107      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x5b6>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	0e9b      	lsrs	r3, r3, #26
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	069b      	lsls	r3, r3, #26
 8002a20:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a24:	e015      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x5e2>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2e:	fa93 f3a3 	rbit	r3, r3
 8002a32:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002a3e:	2320      	movs	r3, #32
 8002a40:	e003      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a44:	fab3 f383 	clz	r3, r3
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	069b      	lsls	r3, r3, #26
 8002a4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x602>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	0e9b      	lsrs	r3, r3, #26
 8002a64:	3301      	adds	r3, #1
 8002a66:	f003 031f 	and.w	r3, r3, #31
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a70:	e017      	b.n	8002aa2 <HAL_ADC_ConfigChannel+0x632>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	61bb      	str	r3, [r7, #24]
  return result;
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002a8a:	2320      	movs	r3, #32
 8002a8c:	e003      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	fab3 f383 	clz	r3, r3
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	3301      	adds	r3, #1
 8002a98:	f003 031f 	and.w	r3, r3, #31
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa2:	ea42 0103 	orr.w	r1, r2, r3
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10d      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x65e>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	0e9b      	lsrs	r3, r3, #26
 8002ab8:	3301      	adds	r3, #1
 8002aba:	f003 021f 	and.w	r2, r3, #31
 8002abe:	4613      	mov	r3, r2
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3b1e      	subs	r3, #30
 8002ac6:	051b      	lsls	r3, r3, #20
 8002ac8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002acc:	e01e      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x69c>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	60fb      	str	r3, [r7, #12]
  return result;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d104      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002ae6:	2320      	movs	r3, #32
 8002ae8:	e006      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x688>
 8002aea:	bf00      	nop
 8002aec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	fab3 f383 	clz	r3, r3
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	3301      	adds	r3, #1
 8002afa:	f003 021f 	and.w	r2, r3, #31
 8002afe:	4613      	mov	r3, r2
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	4413      	add	r3, r2
 8002b04:	3b1e      	subs	r3, #30
 8002b06:	051b      	lsls	r3, r3, #20
 8002b08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b0c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b12:	4619      	mov	r1, r3
 8002b14:	f7ff f94e 	bl	8001db4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	4b44      	ldr	r3, [pc, #272]	@ (8002c30 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d07a      	beq.n	8002c1a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b24:	4843      	ldr	r0, [pc, #268]	@ (8002c34 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b26:	f7ff f8a3 	bl	8001c70 <LL_ADC_GetCommonPathInternalCh>
 8002b2a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a41      	ldr	r2, [pc, #260]	@ (8002c38 <HAL_ADC_ConfigChannel+0x7c8>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d12c      	bne.n	8002b92 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d126      	bne.n	8002b92 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a3c      	ldr	r2, [pc, #240]	@ (8002c3c <HAL_ADC_ConfigChannel+0x7cc>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d004      	beq.n	8002b58 <HAL_ADC_ConfigChannel+0x6e8>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a3b      	ldr	r2, [pc, #236]	@ (8002c40 <HAL_ADC_ConfigChannel+0x7d0>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d15d      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b5c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b60:	4619      	mov	r1, r3
 8002b62:	4834      	ldr	r0, [pc, #208]	@ (8002c34 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b64:	f7ff f871 	bl	8001c4a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b68:	4b36      	ldr	r3, [pc, #216]	@ (8002c44 <HAL_ADC_ConfigChannel+0x7d4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	099b      	lsrs	r3, r3, #6
 8002b6e:	4a36      	ldr	r2, [pc, #216]	@ (8002c48 <HAL_ADC_ConfigChannel+0x7d8>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	099b      	lsrs	r3, r3, #6
 8002b76:	1c5a      	adds	r2, r3, #1
 8002b78:	4613      	mov	r3, r2
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b82:	e002      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1f9      	bne.n	8002b84 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b90:	e040      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a2d      	ldr	r2, [pc, #180]	@ (8002c4c <HAL_ADC_ConfigChannel+0x7dc>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d118      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ba0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d112      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a23      	ldr	r2, [pc, #140]	@ (8002c3c <HAL_ADC_ConfigChannel+0x7cc>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d004      	beq.n	8002bbc <HAL_ADC_ConfigChannel+0x74c>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a22      	ldr	r2, [pc, #136]	@ (8002c40 <HAL_ADC_ConfigChannel+0x7d0>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d12d      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bc0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	481b      	ldr	r0, [pc, #108]	@ (8002c34 <HAL_ADC_ConfigChannel+0x7c4>)
 8002bc8:	f7ff f83f 	bl	8001c4a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bcc:	e024      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a1f      	ldr	r2, [pc, #124]	@ (8002c50 <HAL_ADC_ConfigChannel+0x7e0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d120      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d11a      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a14      	ldr	r2, [pc, #80]	@ (8002c3c <HAL_ADC_ConfigChannel+0x7cc>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d115      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bf2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	480e      	ldr	r0, [pc, #56]	@ (8002c34 <HAL_ADC_ConfigChannel+0x7c4>)
 8002bfa:	f7ff f826 	bl	8001c4a <LL_ADC_SetCommonPathInternalCh>
 8002bfe:	e00c      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c04:	f043 0220 	orr.w	r2, r3, #32
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002c12:	e002      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c14:	bf00      	nop
 8002c16:	e000      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c18:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c22:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	37d8      	adds	r7, #216	@ 0xd8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	80080000 	.word	0x80080000
 8002c34:	50040300 	.word	0x50040300
 8002c38:	c7520000 	.word	0xc7520000
 8002c3c:	50040000 	.word	0x50040000
 8002c40:	50040200 	.word	0x50040200
 8002c44:	20000000 	.word	0x20000000
 8002c48:	053e2d63 	.word	0x053e2d63
 8002c4c:	cb840000 	.word	0xcb840000
 8002c50:	80000001 	.word	0x80000001

08002c54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff f979 	bl	8001f5c <LL_ADC_IsEnabled>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d169      	bne.n	8002d44 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	4b36      	ldr	r3, [pc, #216]	@ (8002d50 <ADC_Enable+0xfc>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00d      	beq.n	8002c9a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c82:	f043 0210 	orr.w	r2, r3, #16
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8e:	f043 0201 	orr.w	r2, r3, #1
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e055      	b.n	8002d46 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff f934 	bl	8001f0c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ca4:	482b      	ldr	r0, [pc, #172]	@ (8002d54 <ADC_Enable+0x100>)
 8002ca6:	f7fe ffe3 	bl	8001c70 <LL_ADC_GetCommonPathInternalCh>
 8002caa:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002cac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d013      	beq.n	8002cdc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cb4:	4b28      	ldr	r3, [pc, #160]	@ (8002d58 <ADC_Enable+0x104>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	099b      	lsrs	r3, r3, #6
 8002cba:	4a28      	ldr	r2, [pc, #160]	@ (8002d5c <ADC_Enable+0x108>)
 8002cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc0:	099b      	lsrs	r3, r3, #6
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cce:	e002      	b.n	8002cd6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f9      	bne.n	8002cd0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002cdc:	f7fe ff72 	bl	8001bc4 <HAL_GetTick>
 8002ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ce2:	e028      	b.n	8002d36 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff f937 	bl	8001f5c <LL_ADC_IsEnabled>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d104      	bne.n	8002cfe <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff f907 	bl	8001f0c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cfe:	f7fe ff61 	bl	8001bc4 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d914      	bls.n	8002d36 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d00d      	beq.n	8002d36 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d1e:	f043 0210 	orr.w	r2, r3, #16
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2a:	f043 0201 	orr.w	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e007      	b.n	8002d46 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d1cf      	bne.n	8002ce4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	8000003f 	.word	0x8000003f
 8002d54:	50040300 	.word	0x50040300
 8002d58:	20000000 	.word	0x20000000
 8002d5c:	053e2d63 	.word	0x053e2d63

08002d60 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff f908 	bl	8001f82 <LL_ADC_IsDisableOngoing>
 8002d72:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff f8ef 	bl	8001f5c <LL_ADC_IsEnabled>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d047      	beq.n	8002e14 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d144      	bne.n	8002e14 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 030d 	and.w	r3, r3, #13
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d10c      	bne.n	8002db2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff f8c9 	bl	8001f34 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2203      	movs	r2, #3
 8002da8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002daa:	f7fe ff0b 	bl	8001bc4 <HAL_GetTick>
 8002dae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002db0:	e029      	b.n	8002e06 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db6:	f043 0210 	orr.w	r2, r3, #16
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc2:	f043 0201 	orr.w	r2, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e023      	b.n	8002e16 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002dce:	f7fe fef9 	bl	8001bc4 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d914      	bls.n	8002e06 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00d      	beq.n	8002e06 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dee:	f043 0210 	orr.w	r2, r3, #16
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfa:	f043 0201 	orr.w	r2, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e007      	b.n	8002e16 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1dc      	bne.n	8002dce <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b084      	sub	sp, #16
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e30:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d14b      	bne.n	8002ed0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e3c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d021      	beq.n	8002e96 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fe ff6d 	bl	8001d36 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d032      	beq.n	8002ec8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d12b      	bne.n	8002ec8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d11f      	bne.n	8002ec8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e8c:	f043 0201 	orr.w	r2, r3, #1
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e94:	e018      	b.n	8002ec8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d111      	bne.n	8002ec8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d105      	bne.n	8002ec8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec0:	f043 0201 	orr.w	r2, r3, #1
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f7ff fab3 	bl	8002434 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ece:	e00e      	b.n	8002eee <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed4:	f003 0310 	and.w	r3, r3, #16
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f7ff fabd 	bl	800245c <HAL_ADC_ErrorCallback>
}
 8002ee2:	e004      	b.n	8002eee <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	4798      	blx	r3
}
 8002eee:	bf00      	nop
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f7ff fa9f 	bl	8002448 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f0a:	bf00      	nop
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f24:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f30:	f043 0204 	orr.w	r2, r3, #4
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f7ff fa8f 	bl	800245c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f3e:	bf00      	nop
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <LL_ADC_IsEnabled>:
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <LL_ADC_IsEnabled+0x18>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <LL_ADC_IsEnabled+0x1a>
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <LL_ADC_StartCalibration>:
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002f7e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	609a      	str	r2, [r3, #8]
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <LL_ADC_IsCalibrationOnGoing>:
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002fae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002fb2:	d101      	bne.n	8002fb8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <LL_ADC_REG_IsConversionOngoing>:
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d101      	bne.n	8002fde <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_ADCEx_Calibration_Start+0x1c>
 8003004:	2302      	movs	r3, #2
 8003006:	e04d      	b.n	80030a4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7ff fea5 	bl	8002d60 <ADC_Disable>
 8003016:	4603      	mov	r3, r0
 8003018:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d136      	bne.n	800308e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003024:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003028:	f023 0302 	bic.w	r3, r3, #2
 800302c:	f043 0202 	orr.w	r2, r3, #2
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6839      	ldr	r1, [r7, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff ff96 	bl	8002f6c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003040:	e014      	b.n	800306c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	3301      	adds	r3, #1
 8003046:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800304e:	d30d      	bcc.n	800306c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003054:	f023 0312 	bic.w	r3, r3, #18
 8003058:	f043 0210 	orr.w	r2, r3, #16
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e01b      	b.n	80030a4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff ff94 	bl	8002f9e <LL_ADC_IsCalibrationOnGoing>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1e2      	bne.n	8003042 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003080:	f023 0303 	bic.w	r3, r3, #3
 8003084:	f043 0201 	orr.w	r2, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	655a      	str	r2, [r3, #84]	@ 0x54
 800308c:	e005      	b.n	800309a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003092:	f043 0210 	orr.w	r2, r3, #16
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80030ac:	b590      	push	{r4, r7, lr}
 80030ae:	b09f      	sub	sp, #124	@ 0x7c
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e093      	b.n	80031f2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80030d2:	2300      	movs	r3, #0
 80030d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80030d6:	2300      	movs	r3, #0
 80030d8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a47      	ldr	r2, [pc, #284]	@ (80031fc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d102      	bne.n	80030ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80030e4:	4b46      	ldr	r3, [pc, #280]	@ (8003200 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80030e6:	60bb      	str	r3, [r7, #8]
 80030e8:	e001      	b.n	80030ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80030ea:	2300      	movs	r3, #0
 80030ec:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10b      	bne.n	800310c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f8:	f043 0220 	orr.w	r2, r3, #32
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e072      	b.n	80031f2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff ff59 	bl	8002fc6 <LL_ADC_REG_IsConversionOngoing>
 8003114:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff ff53 	bl	8002fc6 <LL_ADC_REG_IsConversionOngoing>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d154      	bne.n	80031d0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003126:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003128:	2b00      	cmp	r3, #0
 800312a:	d151      	bne.n	80031d0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800312c:	4b35      	ldr	r3, [pc, #212]	@ (8003204 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800312e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d02c      	beq.n	8003192 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003138:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	6859      	ldr	r1, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800314a:	035b      	lsls	r3, r3, #13
 800314c:	430b      	orrs	r3, r1
 800314e:	431a      	orrs	r2, r3
 8003150:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003152:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003154:	4829      	ldr	r0, [pc, #164]	@ (80031fc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003156:	f7ff fef6 	bl	8002f46 <LL_ADC_IsEnabled>
 800315a:	4604      	mov	r4, r0
 800315c:	4828      	ldr	r0, [pc, #160]	@ (8003200 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800315e:	f7ff fef2 	bl	8002f46 <LL_ADC_IsEnabled>
 8003162:	4603      	mov	r3, r0
 8003164:	431c      	orrs	r4, r3
 8003166:	4828      	ldr	r0, [pc, #160]	@ (8003208 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003168:	f7ff feed 	bl	8002f46 <LL_ADC_IsEnabled>
 800316c:	4603      	mov	r3, r0
 800316e:	4323      	orrs	r3, r4
 8003170:	2b00      	cmp	r3, #0
 8003172:	d137      	bne.n	80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003174:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800317c:	f023 030f 	bic.w	r3, r3, #15
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	6811      	ldr	r1, [r2, #0]
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	6892      	ldr	r2, [r2, #8]
 8003188:	430a      	orrs	r2, r1
 800318a:	431a      	orrs	r2, r3
 800318c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800318e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003190:	e028      	b.n	80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003192:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800319a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800319c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800319e:	4817      	ldr	r0, [pc, #92]	@ (80031fc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80031a0:	f7ff fed1 	bl	8002f46 <LL_ADC_IsEnabled>
 80031a4:	4604      	mov	r4, r0
 80031a6:	4816      	ldr	r0, [pc, #88]	@ (8003200 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80031a8:	f7ff fecd 	bl	8002f46 <LL_ADC_IsEnabled>
 80031ac:	4603      	mov	r3, r0
 80031ae:	431c      	orrs	r4, r3
 80031b0:	4815      	ldr	r0, [pc, #84]	@ (8003208 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80031b2:	f7ff fec8 	bl	8002f46 <LL_ADC_IsEnabled>
 80031b6:	4603      	mov	r3, r0
 80031b8:	4323      	orrs	r3, r4
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d112      	bne.n	80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80031be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80031c6:	f023 030f 	bic.w	r3, r3, #15
 80031ca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80031cc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031ce:	e009      	b.n	80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d4:	f043 0220 	orr.w	r2, r3, #32
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80031e2:	e000      	b.n	80031e6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80031ee:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	377c      	adds	r7, #124	@ 0x7c
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd90      	pop	{r4, r7, pc}
 80031fa:	bf00      	nop
 80031fc:	50040000 	.word	0x50040000
 8003200:	50040100 	.word	0x50040100
 8003204:	50040300 	.word	0x50040300
 8003208:	50040200 	.word	0x50040200

0800320c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800321c:	4b0c      	ldr	r3, [pc, #48]	@ (8003250 <__NVIC_SetPriorityGrouping+0x44>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003228:	4013      	ands	r3, r2
 800322a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003234:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003238:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800323c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800323e:	4a04      	ldr	r2, [pc, #16]	@ (8003250 <__NVIC_SetPriorityGrouping+0x44>)
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	60d3      	str	r3, [r2, #12]
}
 8003244:	bf00      	nop
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	e000ed00 	.word	0xe000ed00

08003254 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003258:	4b04      	ldr	r3, [pc, #16]	@ (800326c <__NVIC_GetPriorityGrouping+0x18>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	0a1b      	lsrs	r3, r3, #8
 800325e:	f003 0307 	and.w	r3, r3, #7
}
 8003262:	4618      	mov	r0, r3
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	e000ed00 	.word	0xe000ed00

08003270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800327a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327e:	2b00      	cmp	r3, #0
 8003280:	db0b      	blt.n	800329a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	f003 021f 	and.w	r2, r3, #31
 8003288:	4907      	ldr	r1, [pc, #28]	@ (80032a8 <__NVIC_EnableIRQ+0x38>)
 800328a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	2001      	movs	r0, #1
 8003292:	fa00 f202 	lsl.w	r2, r0, r2
 8003296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	e000e100 	.word	0xe000e100

080032ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	6039      	str	r1, [r7, #0]
 80032b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	db0a      	blt.n	80032d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	490c      	ldr	r1, [pc, #48]	@ (80032f8 <__NVIC_SetPriority+0x4c>)
 80032c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ca:	0112      	lsls	r2, r2, #4
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	440b      	add	r3, r1
 80032d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032d4:	e00a      	b.n	80032ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	4908      	ldr	r1, [pc, #32]	@ (80032fc <__NVIC_SetPriority+0x50>)
 80032dc:	79fb      	ldrb	r3, [r7, #7]
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	3b04      	subs	r3, #4
 80032e4:	0112      	lsls	r2, r2, #4
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	440b      	add	r3, r1
 80032ea:	761a      	strb	r2, [r3, #24]
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	e000e100 	.word	0xe000e100
 80032fc:	e000ed00 	.word	0xe000ed00

08003300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003300:	b480      	push	{r7}
 8003302:	b089      	sub	sp, #36	@ 0x24
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f1c3 0307 	rsb	r3, r3, #7
 800331a:	2b04      	cmp	r3, #4
 800331c:	bf28      	it	cs
 800331e:	2304      	movcs	r3, #4
 8003320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	3304      	adds	r3, #4
 8003326:	2b06      	cmp	r3, #6
 8003328:	d902      	bls.n	8003330 <NVIC_EncodePriority+0x30>
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	3b03      	subs	r3, #3
 800332e:	e000      	b.n	8003332 <NVIC_EncodePriority+0x32>
 8003330:	2300      	movs	r3, #0
 8003332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003334:	f04f 32ff 	mov.w	r2, #4294967295
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43da      	mvns	r2, r3
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	401a      	ands	r2, r3
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003348:	f04f 31ff 	mov.w	r1, #4294967295
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	fa01 f303 	lsl.w	r3, r1, r3
 8003352:	43d9      	mvns	r1, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003358:	4313      	orrs	r3, r2
         );
}
 800335a:	4618      	mov	r0, r3
 800335c:	3724      	adds	r7, #36	@ 0x24
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3b01      	subs	r3, #1
 8003374:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003378:	d301      	bcc.n	800337e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800337a:	2301      	movs	r3, #1
 800337c:	e00f      	b.n	800339e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800337e:	4a0a      	ldr	r2, [pc, #40]	@ (80033a8 <SysTick_Config+0x40>)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3b01      	subs	r3, #1
 8003384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003386:	210f      	movs	r1, #15
 8003388:	f04f 30ff 	mov.w	r0, #4294967295
 800338c:	f7ff ff8e 	bl	80032ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003390:	4b05      	ldr	r3, [pc, #20]	@ (80033a8 <SysTick_Config+0x40>)
 8003392:	2200      	movs	r2, #0
 8003394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003396:	4b04      	ldr	r3, [pc, #16]	@ (80033a8 <SysTick_Config+0x40>)
 8003398:	2207      	movs	r2, #7
 800339a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	e000e010 	.word	0xe000e010

080033ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff ff29 	bl	800320c <__NVIC_SetPriorityGrouping>
}
 80033ba:	bf00      	nop
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b086      	sub	sp, #24
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	4603      	mov	r3, r0
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
 80033ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033d4:	f7ff ff3e 	bl	8003254 <__NVIC_GetPriorityGrouping>
 80033d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	68b9      	ldr	r1, [r7, #8]
 80033de:	6978      	ldr	r0, [r7, #20]
 80033e0:	f7ff ff8e 	bl	8003300 <NVIC_EncodePriority>
 80033e4:	4602      	mov	r2, r0
 80033e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ea:	4611      	mov	r1, r2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff ff5d 	bl	80032ac <__NVIC_SetPriority>
}
 80033f2:	bf00      	nop
 80033f4:	3718      	adds	r7, #24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b082      	sub	sp, #8
 80033fe:	af00      	add	r7, sp, #0
 8003400:	4603      	mov	r3, r0
 8003402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff ff31 	bl	8003270 <__NVIC_EnableIRQ>
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff ffa2 	bl	8003368 <SysTick_Config>
 8003424:	4603      	mov	r3, r0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e098      	b.n	8003574 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	4b4d      	ldr	r3, [pc, #308]	@ (8003580 <HAL_DMA_Init+0x150>)
 800344a:	429a      	cmp	r2, r3
 800344c:	d80f      	bhi.n	800346e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	461a      	mov	r2, r3
 8003454:	4b4b      	ldr	r3, [pc, #300]	@ (8003584 <HAL_DMA_Init+0x154>)
 8003456:	4413      	add	r3, r2
 8003458:	4a4b      	ldr	r2, [pc, #300]	@ (8003588 <HAL_DMA_Init+0x158>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	091b      	lsrs	r3, r3, #4
 8003460:	009a      	lsls	r2, r3, #2
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a48      	ldr	r2, [pc, #288]	@ (800358c <HAL_DMA_Init+0x15c>)
 800346a:	641a      	str	r2, [r3, #64]	@ 0x40
 800346c:	e00e      	b.n	800348c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	4b46      	ldr	r3, [pc, #280]	@ (8003590 <HAL_DMA_Init+0x160>)
 8003476:	4413      	add	r3, r2
 8003478:	4a43      	ldr	r2, [pc, #268]	@ (8003588 <HAL_DMA_Init+0x158>)
 800347a:	fba2 2303 	umull	r2, r3, r2, r3
 800347e:	091b      	lsrs	r3, r3, #4
 8003480:	009a      	lsls	r2, r3, #2
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a42      	ldr	r2, [pc, #264]	@ (8003594 <HAL_DMA_Init+0x164>)
 800348a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80034a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80034b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034e6:	d039      	beq.n	800355c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ec:	4a27      	ldr	r2, [pc, #156]	@ (800358c <HAL_DMA_Init+0x15c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d11a      	bne.n	8003528 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80034f2:	4b29      	ldr	r3, [pc, #164]	@ (8003598 <HAL_DMA_Init+0x168>)
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fa:	f003 031c 	and.w	r3, r3, #28
 80034fe:	210f      	movs	r1, #15
 8003500:	fa01 f303 	lsl.w	r3, r1, r3
 8003504:	43db      	mvns	r3, r3
 8003506:	4924      	ldr	r1, [pc, #144]	@ (8003598 <HAL_DMA_Init+0x168>)
 8003508:	4013      	ands	r3, r2
 800350a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800350c:	4b22      	ldr	r3, [pc, #136]	@ (8003598 <HAL_DMA_Init+0x168>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6859      	ldr	r1, [r3, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003518:	f003 031c 	and.w	r3, r3, #28
 800351c:	fa01 f303 	lsl.w	r3, r1, r3
 8003520:	491d      	ldr	r1, [pc, #116]	@ (8003598 <HAL_DMA_Init+0x168>)
 8003522:	4313      	orrs	r3, r2
 8003524:	600b      	str	r3, [r1, #0]
 8003526:	e019      	b.n	800355c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003528:	4b1c      	ldr	r3, [pc, #112]	@ (800359c <HAL_DMA_Init+0x16c>)
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003530:	f003 031c 	and.w	r3, r3, #28
 8003534:	210f      	movs	r1, #15
 8003536:	fa01 f303 	lsl.w	r3, r1, r3
 800353a:	43db      	mvns	r3, r3
 800353c:	4917      	ldr	r1, [pc, #92]	@ (800359c <HAL_DMA_Init+0x16c>)
 800353e:	4013      	ands	r3, r2
 8003540:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003542:	4b16      	ldr	r3, [pc, #88]	@ (800359c <HAL_DMA_Init+0x16c>)
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6859      	ldr	r1, [r3, #4]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354e:	f003 031c 	and.w	r3, r3, #28
 8003552:	fa01 f303 	lsl.w	r3, r1, r3
 8003556:	4911      	ldr	r1, [pc, #68]	@ (800359c <HAL_DMA_Init+0x16c>)
 8003558:	4313      	orrs	r3, r2
 800355a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	40020407 	.word	0x40020407
 8003584:	bffdfff8 	.word	0xbffdfff8
 8003588:	cccccccd 	.word	0xcccccccd
 800358c:	40020000 	.word	0x40020000
 8003590:	bffdfbf8 	.word	0xbffdfbf8
 8003594:	40020400 	.word	0x40020400
 8003598:	400200a8 	.word	0x400200a8
 800359c:	400204a8 	.word	0x400204a8

080035a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
 80035ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ae:	2300      	movs	r3, #0
 80035b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_DMA_Start_IT+0x20>
 80035bc:	2302      	movs	r3, #2
 80035be:	e04b      	b.n	8003658 <HAL_DMA_Start_IT+0xb8>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d13a      	bne.n	800364a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0201 	bic.w	r2, r2, #1
 80035f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	68b9      	ldr	r1, [r7, #8]
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 f8e0 	bl	80037be <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003602:	2b00      	cmp	r3, #0
 8003604:	d008      	beq.n	8003618 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f042 020e 	orr.w	r2, r2, #14
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	e00f      	b.n	8003638 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0204 	bic.w	r2, r2, #4
 8003626:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 020a 	orr.w	r2, r2, #10
 8003636:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	e005      	b.n	8003656 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003652:	2302      	movs	r3, #2
 8003654:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003656:	7dfb      	ldrb	r3, [r7, #23]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800367c:	f003 031c 	and.w	r3, r3, #28
 8003680:	2204      	movs	r2, #4
 8003682:	409a      	lsls	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4013      	ands	r3, r2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d026      	beq.n	80036da <HAL_DMA_IRQHandler+0x7a>
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f003 0304 	and.w	r3, r3, #4
 8003692:	2b00      	cmp	r3, #0
 8003694:	d021      	beq.n	80036da <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d107      	bne.n	80036b4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0204 	bic.w	r2, r2, #4
 80036b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b8:	f003 021c 	and.w	r2, r3, #28
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c0:	2104      	movs	r1, #4
 80036c2:	fa01 f202 	lsl.w	r2, r1, r2
 80036c6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d071      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80036d8:	e06c      	b.n	80037b4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036de:	f003 031c 	and.w	r3, r3, #28
 80036e2:	2202      	movs	r2, #2
 80036e4:	409a      	lsls	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d02e      	beq.n	800374c <HAL_DMA_IRQHandler+0xec>
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d029      	beq.n	800374c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10b      	bne.n	800371e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 020a 	bic.w	r2, r2, #10
 8003714:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003722:	f003 021c 	and.w	r2, r3, #28
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372a:	2102      	movs	r1, #2
 800372c:	fa01 f202 	lsl.w	r2, r1, r2
 8003730:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373e:	2b00      	cmp	r3, #0
 8003740:	d038      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800374a:	e033      	b.n	80037b4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003750:	f003 031c 	and.w	r3, r3, #28
 8003754:	2208      	movs	r2, #8
 8003756:	409a      	lsls	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d02a      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x156>
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d025      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 020e 	bic.w	r2, r2, #14
 8003778:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377e:	f003 021c 	and.w	r2, r3, #28
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003786:	2101      	movs	r1, #1
 8003788:	fa01 f202 	lsl.w	r2, r1, r2
 800378c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d004      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80037b4:	bf00      	nop
 80037b6:	bf00      	nop
}
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037be:	b480      	push	{r7}
 80037c0:	b085      	sub	sp, #20
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	60b9      	str	r1, [r7, #8]
 80037c8:	607a      	str	r2, [r7, #4]
 80037ca:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d0:	f003 021c 	and.w	r2, r3, #28
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d8:	2101      	movs	r1, #1
 80037da:	fa01 f202 	lsl.w	r2, r1, r2
 80037de:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	2b10      	cmp	r3, #16
 80037ee:	d108      	bne.n	8003802 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003800:	e007      	b.n	8003812 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	60da      	str	r2, [r3, #12]
}
 8003812:	bf00      	nop
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
	...

08003820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003820:	b480      	push	{r7}
 8003822:	b087      	sub	sp, #28
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800382e:	e17f      	b.n	8003b30 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	2101      	movs	r1, #1
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	fa01 f303 	lsl.w	r3, r1, r3
 800383c:	4013      	ands	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 8171 	beq.w	8003b2a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f003 0303 	and.w	r3, r3, #3
 8003850:	2b01      	cmp	r3, #1
 8003852:	d005      	beq.n	8003860 <HAL_GPIO_Init+0x40>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d130      	bne.n	80038c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	2203      	movs	r2, #3
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	43db      	mvns	r3, r3
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	4013      	ands	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003896:	2201      	movs	r2, #1
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4013      	ands	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	091b      	lsrs	r3, r3, #4
 80038ac:	f003 0201 	and.w	r2, r3, #1
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	2b03      	cmp	r3, #3
 80038cc:	d118      	bne.n	8003900 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80038d4:	2201      	movs	r2, #1
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	43db      	mvns	r3, r3
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	4013      	ands	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	08db      	lsrs	r3, r3, #3
 80038ea:	f003 0201 	and.w	r2, r3, #1
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	2b03      	cmp	r3, #3
 800390a:	d017      	beq.n	800393c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	2203      	movs	r2, #3
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	43db      	mvns	r3, r3
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4013      	ands	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 0303 	and.w	r3, r3, #3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d123      	bne.n	8003990 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	08da      	lsrs	r2, r3, #3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3208      	adds	r2, #8
 8003950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003954:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	220f      	movs	r2, #15
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	43db      	mvns	r3, r3
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	4013      	ands	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	08da      	lsrs	r2, r3, #3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3208      	adds	r2, #8
 800398a:	6939      	ldr	r1, [r7, #16]
 800398c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	2203      	movs	r2, #3
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	43db      	mvns	r3, r3
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	4013      	ands	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 0203 	and.w	r2, r3, #3
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 80ac 	beq.w	8003b2a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003b50 <HAL_GPIO_Init+0x330>)
 80039d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d6:	4a5e      	ldr	r2, [pc, #376]	@ (8003b50 <HAL_GPIO_Init+0x330>)
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80039de:	4b5c      	ldr	r3, [pc, #368]	@ (8003b50 <HAL_GPIO_Init+0x330>)
 80039e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	60bb      	str	r3, [r7, #8]
 80039e8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039ea:	4a5a      	ldr	r2, [pc, #360]	@ (8003b54 <HAL_GPIO_Init+0x334>)
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	089b      	lsrs	r3, r3, #2
 80039f0:	3302      	adds	r3, #2
 80039f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	220f      	movs	r2, #15
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	43db      	mvns	r3, r3
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a14:	d025      	beq.n	8003a62 <HAL_GPIO_Init+0x242>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a4f      	ldr	r2, [pc, #316]	@ (8003b58 <HAL_GPIO_Init+0x338>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d01f      	beq.n	8003a5e <HAL_GPIO_Init+0x23e>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a4e      	ldr	r2, [pc, #312]	@ (8003b5c <HAL_GPIO_Init+0x33c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d019      	beq.n	8003a5a <HAL_GPIO_Init+0x23a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a4d      	ldr	r2, [pc, #308]	@ (8003b60 <HAL_GPIO_Init+0x340>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d013      	beq.n	8003a56 <HAL_GPIO_Init+0x236>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a4c      	ldr	r2, [pc, #304]	@ (8003b64 <HAL_GPIO_Init+0x344>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00d      	beq.n	8003a52 <HAL_GPIO_Init+0x232>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a4b      	ldr	r2, [pc, #300]	@ (8003b68 <HAL_GPIO_Init+0x348>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d007      	beq.n	8003a4e <HAL_GPIO_Init+0x22e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a4a      	ldr	r2, [pc, #296]	@ (8003b6c <HAL_GPIO_Init+0x34c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d101      	bne.n	8003a4a <HAL_GPIO_Init+0x22a>
 8003a46:	2306      	movs	r3, #6
 8003a48:	e00c      	b.n	8003a64 <HAL_GPIO_Init+0x244>
 8003a4a:	2307      	movs	r3, #7
 8003a4c:	e00a      	b.n	8003a64 <HAL_GPIO_Init+0x244>
 8003a4e:	2305      	movs	r3, #5
 8003a50:	e008      	b.n	8003a64 <HAL_GPIO_Init+0x244>
 8003a52:	2304      	movs	r3, #4
 8003a54:	e006      	b.n	8003a64 <HAL_GPIO_Init+0x244>
 8003a56:	2303      	movs	r3, #3
 8003a58:	e004      	b.n	8003a64 <HAL_GPIO_Init+0x244>
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	e002      	b.n	8003a64 <HAL_GPIO_Init+0x244>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <HAL_GPIO_Init+0x244>
 8003a62:	2300      	movs	r3, #0
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	f002 0203 	and.w	r2, r2, #3
 8003a6a:	0092      	lsls	r2, r2, #2
 8003a6c:	4093      	lsls	r3, r2
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a74:	4937      	ldr	r1, [pc, #220]	@ (8003b54 <HAL_GPIO_Init+0x334>)
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	089b      	lsrs	r3, r3, #2
 8003a7a:	3302      	adds	r3, #2
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a82:	4b3b      	ldr	r3, [pc, #236]	@ (8003b70 <HAL_GPIO_Init+0x350>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003aa6:	4a32      	ldr	r2, [pc, #200]	@ (8003b70 <HAL_GPIO_Init+0x350>)
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003aac:	4b30      	ldr	r3, [pc, #192]	@ (8003b70 <HAL_GPIO_Init+0x350>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ad0:	4a27      	ldr	r2, [pc, #156]	@ (8003b70 <HAL_GPIO_Init+0x350>)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ad6:	4b26      	ldr	r3, [pc, #152]	@ (8003b70 <HAL_GPIO_Init+0x350>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	43db      	mvns	r3, r3
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003afa:	4a1d      	ldr	r2, [pc, #116]	@ (8003b70 <HAL_GPIO_Init+0x350>)
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b00:	4b1b      	ldr	r3, [pc, #108]	@ (8003b70 <HAL_GPIO_Init+0x350>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b24:	4a12      	ldr	r2, [pc, #72]	@ (8003b70 <HAL_GPIO_Init+0x350>)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	fa22 f303 	lsr.w	r3, r2, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f47f ae78 	bne.w	8003830 <HAL_GPIO_Init+0x10>
  }
}
 8003b40:	bf00      	nop
 8003b42:	bf00      	nop
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40021000 	.word	0x40021000
 8003b54:	40010000 	.word	0x40010000
 8003b58:	48000400 	.word	0x48000400
 8003b5c:	48000800 	.word	0x48000800
 8003b60:	48000c00 	.word	0x48000c00
 8003b64:	48001000 	.word	0x48001000
 8003b68:	48001400 	.word	0x48001400
 8003b6c:	48001800 	.word	0x48001800
 8003b70:	40010400 	.word	0x40010400

08003b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	807b      	strh	r3, [r7, #2]
 8003b80:	4613      	mov	r3, r2
 8003b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b84:	787b      	ldrb	r3, [r7, #1]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b8a:	887a      	ldrh	r2, [r7, #2]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b90:	e002      	b.n	8003b98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b92:	887a      	ldrh	r2, [r7, #2]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ba8:	4b05      	ldr	r3, [pc, #20]	@ (8003bc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a04      	ldr	r2, [pc, #16]	@ (8003bc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bb2:	6013      	str	r3, [r2, #0]
}
 8003bb4:	bf00      	nop
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	40007000 	.word	0x40007000

08003bc4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003bc8:	4b04      	ldr	r3, [pc, #16]	@ (8003bdc <HAL_PWREx_GetVoltageRange+0x18>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	40007000 	.word	0x40007000

08003be0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bee:	d130      	bne.n	8003c52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bf0:	4b23      	ldr	r3, [pc, #140]	@ (8003c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003bf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bfc:	d038      	beq.n	8003c70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bfe:	4b20      	ldr	r3, [pc, #128]	@ (8003c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c06:	4a1e      	ldr	r2, [pc, #120]	@ (8003c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8003c84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2232      	movs	r2, #50	@ 0x32
 8003c14:	fb02 f303 	mul.w	r3, r2, r3
 8003c18:	4a1b      	ldr	r2, [pc, #108]	@ (8003c88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1e:	0c9b      	lsrs	r3, r3, #18
 8003c20:	3301      	adds	r3, #1
 8003c22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c24:	e002      	b.n	8003c2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c2c:	4b14      	ldr	r3, [pc, #80]	@ (8003c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c38:	d102      	bne.n	8003c40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1f2      	bne.n	8003c26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c40:	4b0f      	ldr	r3, [pc, #60]	@ (8003c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c4c:	d110      	bne.n	8003c70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e00f      	b.n	8003c72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c52:	4b0b      	ldr	r3, [pc, #44]	@ (8003c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c5e:	d007      	beq.n	8003c70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c60:	4b07      	ldr	r3, [pc, #28]	@ (8003c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c68:	4a05      	ldr	r2, [pc, #20]	@ (8003c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40007000 	.word	0x40007000
 8003c84:	20000000 	.word	0x20000000
 8003c88:	431bde83 	.word	0x431bde83

08003c8c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b088      	sub	sp, #32
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e3ca      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c9e:	4b97      	ldr	r3, [pc, #604]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
 8003ca6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ca8:	4b94      	ldr	r3, [pc, #592]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f003 0303 	and.w	r3, r3, #3
 8003cb0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0310 	and.w	r3, r3, #16
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 80e4 	beq.w	8003e88 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x4a>
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	2b0c      	cmp	r3, #12
 8003cca:	f040 808b 	bne.w	8003de4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	f040 8087 	bne.w	8003de4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cd6:	4b89      	ldr	r3, [pc, #548]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d005      	beq.n	8003cee <HAL_RCC_OscConfig+0x62>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e3a2      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1a      	ldr	r2, [r3, #32]
 8003cf2:	4b82      	ldr	r3, [pc, #520]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d004      	beq.n	8003d08 <HAL_RCC_OscConfig+0x7c>
 8003cfe:	4b7f      	ldr	r3, [pc, #508]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d06:	e005      	b.n	8003d14 <HAL_RCC_OscConfig+0x88>
 8003d08:	4b7c      	ldr	r3, [pc, #496]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d0e:	091b      	lsrs	r3, r3, #4
 8003d10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d223      	bcs.n	8003d60 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fd55 	bl	80047cc <RCC_SetFlashLatencyFromMSIRange>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e383      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d2c:	4b73      	ldr	r3, [pc, #460]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a72      	ldr	r2, [pc, #456]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003d32:	f043 0308 	orr.w	r3, r3, #8
 8003d36:	6013      	str	r3, [r2, #0]
 8003d38:	4b70      	ldr	r3, [pc, #448]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	496d      	ldr	r1, [pc, #436]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d4a:	4b6c      	ldr	r3, [pc, #432]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	021b      	lsls	r3, r3, #8
 8003d58:	4968      	ldr	r1, [pc, #416]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	604b      	str	r3, [r1, #4]
 8003d5e:	e025      	b.n	8003dac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d60:	4b66      	ldr	r3, [pc, #408]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a65      	ldr	r2, [pc, #404]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003d66:	f043 0308 	orr.w	r3, r3, #8
 8003d6a:	6013      	str	r3, [r2, #0]
 8003d6c:	4b63      	ldr	r3, [pc, #396]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	4960      	ldr	r1, [pc, #384]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d7e:	4b5f      	ldr	r3, [pc, #380]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	021b      	lsls	r3, r3, #8
 8003d8c:	495b      	ldr	r1, [pc, #364]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d109      	bne.n	8003dac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 fd15 	bl	80047cc <RCC_SetFlashLatencyFromMSIRange>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e343      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dac:	f000 fc4a 	bl	8004644 <HAL_RCC_GetSysClockFreq>
 8003db0:	4602      	mov	r2, r0
 8003db2:	4b52      	ldr	r3, [pc, #328]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	091b      	lsrs	r3, r3, #4
 8003db8:	f003 030f 	and.w	r3, r3, #15
 8003dbc:	4950      	ldr	r1, [pc, #320]	@ (8003f00 <HAL_RCC_OscConfig+0x274>)
 8003dbe:	5ccb      	ldrb	r3, [r1, r3]
 8003dc0:	f003 031f 	and.w	r3, r3, #31
 8003dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc8:	4a4e      	ldr	r2, [pc, #312]	@ (8003f04 <HAL_RCC_OscConfig+0x278>)
 8003dca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003dcc:	4b4e      	ldr	r3, [pc, #312]	@ (8003f08 <HAL_RCC_OscConfig+0x27c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fd fea7 	bl	8001b24 <HAL_InitTick>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d052      	beq.n	8003e86 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
 8003de2:	e327      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d032      	beq.n	8003e52 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003dec:	4b43      	ldr	r3, [pc, #268]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a42      	ldr	r2, [pc, #264]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003df8:	f7fd fee4 	bl	8001bc4 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e00:	f7fd fee0 	bl	8001bc4 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e310      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e12:	4b3a      	ldr	r3, [pc, #232]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0f0      	beq.n	8003e00 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e1e:	4b37      	ldr	r3, [pc, #220]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a36      	ldr	r2, [pc, #216]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003e24:	f043 0308 	orr.w	r3, r3, #8
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	4b34      	ldr	r3, [pc, #208]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	4931      	ldr	r1, [pc, #196]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e3c:	4b2f      	ldr	r3, [pc, #188]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	021b      	lsls	r3, r3, #8
 8003e4a:	492c      	ldr	r1, [pc, #176]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	604b      	str	r3, [r1, #4]
 8003e50:	e01a      	b.n	8003e88 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e52:	4b2a      	ldr	r3, [pc, #168]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a29      	ldr	r2, [pc, #164]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003e58:	f023 0301 	bic.w	r3, r3, #1
 8003e5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e5e:	f7fd feb1 	bl	8001bc4 <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e66:	f7fd fead 	bl	8001bc4 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e2dd      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e78:	4b20      	ldr	r3, [pc, #128]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1f0      	bne.n	8003e66 <HAL_RCC_OscConfig+0x1da>
 8003e84:	e000      	b.n	8003e88 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d074      	beq.n	8003f7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	d005      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x21a>
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	2b0c      	cmp	r3, #12
 8003e9e:	d10e      	bne.n	8003ebe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	2b03      	cmp	r3, #3
 8003ea4:	d10b      	bne.n	8003ebe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea6:	4b15      	ldr	r3, [pc, #84]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d064      	beq.n	8003f7c <HAL_RCC_OscConfig+0x2f0>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d160      	bne.n	8003f7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e2ba      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ec6:	d106      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x24a>
 8003ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a0b      	ldr	r2, [pc, #44]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003ece:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ed2:	6013      	str	r3, [r2, #0]
 8003ed4:	e026      	b.n	8003f24 <HAL_RCC_OscConfig+0x298>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ede:	d115      	bne.n	8003f0c <HAL_RCC_OscConfig+0x280>
 8003ee0:	4b06      	ldr	r3, [pc, #24]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a05      	ldr	r2, [pc, #20]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003ee6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003eea:	6013      	str	r3, [r2, #0]
 8003eec:	4b03      	ldr	r3, [pc, #12]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a02      	ldr	r2, [pc, #8]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003ef2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ef6:	6013      	str	r3, [r2, #0]
 8003ef8:	e014      	b.n	8003f24 <HAL_RCC_OscConfig+0x298>
 8003efa:	bf00      	nop
 8003efc:	40021000 	.word	0x40021000
 8003f00:	0800b3b4 	.word	0x0800b3b4
 8003f04:	20000000 	.word	0x20000000
 8003f08:	20000004 	.word	0x20000004
 8003f0c:	4ba0      	ldr	r3, [pc, #640]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a9f      	ldr	r2, [pc, #636]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8003f12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f16:	6013      	str	r3, [r2, #0]
 8003f18:	4b9d      	ldr	r3, [pc, #628]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a9c      	ldr	r2, [pc, #624]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8003f1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d013      	beq.n	8003f54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2c:	f7fd fe4a 	bl	8001bc4 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f34:	f7fd fe46 	bl	8001bc4 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b64      	cmp	r3, #100	@ 0x64
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e276      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f46:	4b92      	ldr	r3, [pc, #584]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0f0      	beq.n	8003f34 <HAL_RCC_OscConfig+0x2a8>
 8003f52:	e014      	b.n	8003f7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f54:	f7fd fe36 	bl	8001bc4 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f5c:	f7fd fe32 	bl	8001bc4 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b64      	cmp	r3, #100	@ 0x64
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e262      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f6e:	4b88      	ldr	r3, [pc, #544]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f0      	bne.n	8003f5c <HAL_RCC_OscConfig+0x2d0>
 8003f7a:	e000      	b.n	8003f7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d060      	beq.n	800404c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	d005      	beq.n	8003f9c <HAL_RCC_OscConfig+0x310>
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	2b0c      	cmp	r3, #12
 8003f94:	d119      	bne.n	8003fca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d116      	bne.n	8003fca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f9c:	4b7c      	ldr	r3, [pc, #496]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x328>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e23f      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb4:	4b76      	ldr	r3, [pc, #472]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	061b      	lsls	r3, r3, #24
 8003fc2:	4973      	ldr	r1, [pc, #460]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fc8:	e040      	b.n	800404c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d023      	beq.n	800401a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fd2:	4b6f      	ldr	r3, [pc, #444]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a6e      	ldr	r2, [pc, #440]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8003fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fde:	f7fd fdf1 	bl	8001bc4 <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fe6:	f7fd fded 	bl	8001bc4 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e21d      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ff8:	4b65      	ldr	r3, [pc, #404]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0f0      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004004:	4b62      	ldr	r3, [pc, #392]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	061b      	lsls	r3, r3, #24
 8004012:	495f      	ldr	r1, [pc, #380]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8004014:	4313      	orrs	r3, r2
 8004016:	604b      	str	r3, [r1, #4]
 8004018:	e018      	b.n	800404c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800401a:	4b5d      	ldr	r3, [pc, #372]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a5c      	ldr	r2, [pc, #368]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8004020:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004026:	f7fd fdcd 	bl	8001bc4 <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800402e:	f7fd fdc9 	bl	8001bc4 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e1f9      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004040:	4b53      	ldr	r3, [pc, #332]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1f0      	bne.n	800402e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0308 	and.w	r3, r3, #8
 8004054:	2b00      	cmp	r3, #0
 8004056:	d03c      	beq.n	80040d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d01c      	beq.n	800409a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004060:	4b4b      	ldr	r3, [pc, #300]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8004062:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004066:	4a4a      	ldr	r2, [pc, #296]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8004068:	f043 0301 	orr.w	r3, r3, #1
 800406c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004070:	f7fd fda8 	bl	8001bc4 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004078:	f7fd fda4 	bl	8001bc4 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e1d4      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800408a:	4b41      	ldr	r3, [pc, #260]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 800408c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0ef      	beq.n	8004078 <HAL_RCC_OscConfig+0x3ec>
 8004098:	e01b      	b.n	80040d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800409a:	4b3d      	ldr	r3, [pc, #244]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 800409c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040a0:	4a3b      	ldr	r2, [pc, #236]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 80040a2:	f023 0301 	bic.w	r3, r3, #1
 80040a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040aa:	f7fd fd8b 	bl	8001bc4 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040b2:	f7fd fd87 	bl	8001bc4 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e1b7      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040c4:	4b32      	ldr	r3, [pc, #200]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 80040c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1ef      	bne.n	80040b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 80a6 	beq.w	800422c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040e0:	2300      	movs	r3, #0
 80040e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80040e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 80040e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10d      	bne.n	800410c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040f0:	4b27      	ldr	r3, [pc, #156]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 80040f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f4:	4a26      	ldr	r2, [pc, #152]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 80040f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80040fc:	4b24      	ldr	r3, [pc, #144]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 80040fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004100:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004104:	60bb      	str	r3, [r7, #8]
 8004106:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004108:	2301      	movs	r3, #1
 800410a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800410c:	4b21      	ldr	r3, [pc, #132]	@ (8004194 <HAL_RCC_OscConfig+0x508>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004114:	2b00      	cmp	r3, #0
 8004116:	d118      	bne.n	800414a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004118:	4b1e      	ldr	r3, [pc, #120]	@ (8004194 <HAL_RCC_OscConfig+0x508>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a1d      	ldr	r2, [pc, #116]	@ (8004194 <HAL_RCC_OscConfig+0x508>)
 800411e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004122:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004124:	f7fd fd4e 	bl	8001bc4 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800412c:	f7fd fd4a 	bl	8001bc4 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e17a      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800413e:	4b15      	ldr	r3, [pc, #84]	@ (8004194 <HAL_RCC_OscConfig+0x508>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0f0      	beq.n	800412c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d108      	bne.n	8004164 <HAL_RCC_OscConfig+0x4d8>
 8004152:	4b0f      	ldr	r3, [pc, #60]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8004154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004158:	4a0d      	ldr	r2, [pc, #52]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 800415a:	f043 0301 	orr.w	r3, r3, #1
 800415e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004162:	e029      	b.n	80041b8 <HAL_RCC_OscConfig+0x52c>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b05      	cmp	r3, #5
 800416a:	d115      	bne.n	8004198 <HAL_RCC_OscConfig+0x50c>
 800416c:	4b08      	ldr	r3, [pc, #32]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004172:	4a07      	ldr	r2, [pc, #28]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8004174:	f043 0304 	orr.w	r3, r3, #4
 8004178:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800417c:	4b04      	ldr	r3, [pc, #16]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004182:	4a03      	ldr	r2, [pc, #12]	@ (8004190 <HAL_RCC_OscConfig+0x504>)
 8004184:	f043 0301 	orr.w	r3, r3, #1
 8004188:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800418c:	e014      	b.n	80041b8 <HAL_RCC_OscConfig+0x52c>
 800418e:	bf00      	nop
 8004190:	40021000 	.word	0x40021000
 8004194:	40007000 	.word	0x40007000
 8004198:	4b9c      	ldr	r3, [pc, #624]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 800419a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800419e:	4a9b      	ldr	r2, [pc, #620]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80041a0:	f023 0301 	bic.w	r3, r3, #1
 80041a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041a8:	4b98      	ldr	r3, [pc, #608]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ae:	4a97      	ldr	r2, [pc, #604]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80041b0:	f023 0304 	bic.w	r3, r3, #4
 80041b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d016      	beq.n	80041ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c0:	f7fd fd00 	bl	8001bc4 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041c6:	e00a      	b.n	80041de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c8:	f7fd fcfc 	bl	8001bc4 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e12a      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041de:	4b8b      	ldr	r3, [pc, #556]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80041e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0ed      	beq.n	80041c8 <HAL_RCC_OscConfig+0x53c>
 80041ec:	e015      	b.n	800421a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ee:	f7fd fce9 	bl	8001bc4 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041f4:	e00a      	b.n	800420c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f6:	f7fd fce5 	bl	8001bc4 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004204:	4293      	cmp	r3, r2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e113      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800420c:	4b7f      	ldr	r3, [pc, #508]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 800420e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1ed      	bne.n	80041f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800421a:	7ffb      	ldrb	r3, [r7, #31]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d105      	bne.n	800422c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004220:	4b7a      	ldr	r3, [pc, #488]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 8004222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004224:	4a79      	ldr	r2, [pc, #484]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 8004226:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800422a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 80fe 	beq.w	8004432 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423a:	2b02      	cmp	r3, #2
 800423c:	f040 80d0 	bne.w	80043e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004240:	4b72      	ldr	r3, [pc, #456]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f003 0203 	and.w	r2, r3, #3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004250:	429a      	cmp	r2, r3
 8004252:	d130      	bne.n	80042b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425e:	3b01      	subs	r3, #1
 8004260:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004262:	429a      	cmp	r2, r3
 8004264:	d127      	bne.n	80042b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004270:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004272:	429a      	cmp	r2, r3
 8004274:	d11f      	bne.n	80042b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004280:	2a07      	cmp	r2, #7
 8004282:	bf14      	ite	ne
 8004284:	2201      	movne	r2, #1
 8004286:	2200      	moveq	r2, #0
 8004288:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800428a:	4293      	cmp	r3, r2
 800428c:	d113      	bne.n	80042b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004298:	085b      	lsrs	r3, r3, #1
 800429a:	3b01      	subs	r3, #1
 800429c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800429e:	429a      	cmp	r2, r3
 80042a0:	d109      	bne.n	80042b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ac:	085b      	lsrs	r3, r3, #1
 80042ae:	3b01      	subs	r3, #1
 80042b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d06e      	beq.n	8004394 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	2b0c      	cmp	r3, #12
 80042ba:	d069      	beq.n	8004390 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80042bc:	4b53      	ldr	r3, [pc, #332]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d105      	bne.n	80042d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80042c8:	4b50      	ldr	r3, [pc, #320]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e0ad      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80042d8:	4b4c      	ldr	r3, [pc, #304]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a4b      	ldr	r2, [pc, #300]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80042de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042e4:	f7fd fc6e 	bl	8001bc4 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ec:	f7fd fc6a 	bl	8001bc4 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e09a      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042fe:	4b43      	ldr	r3, [pc, #268]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1f0      	bne.n	80042ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800430a:	4b40      	ldr	r3, [pc, #256]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	4b40      	ldr	r3, [pc, #256]	@ (8004410 <HAL_RCC_OscConfig+0x784>)
 8004310:	4013      	ands	r3, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800431a:	3a01      	subs	r2, #1
 800431c:	0112      	lsls	r2, r2, #4
 800431e:	4311      	orrs	r1, r2
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004324:	0212      	lsls	r2, r2, #8
 8004326:	4311      	orrs	r1, r2
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800432c:	0852      	lsrs	r2, r2, #1
 800432e:	3a01      	subs	r2, #1
 8004330:	0552      	lsls	r2, r2, #21
 8004332:	4311      	orrs	r1, r2
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004338:	0852      	lsrs	r2, r2, #1
 800433a:	3a01      	subs	r2, #1
 800433c:	0652      	lsls	r2, r2, #25
 800433e:	4311      	orrs	r1, r2
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004344:	0912      	lsrs	r2, r2, #4
 8004346:	0452      	lsls	r2, r2, #17
 8004348:	430a      	orrs	r2, r1
 800434a:	4930      	ldr	r1, [pc, #192]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 800434c:	4313      	orrs	r3, r2
 800434e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004350:	4b2e      	ldr	r3, [pc, #184]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a2d      	ldr	r2, [pc, #180]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 8004356:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800435a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800435c:	4b2b      	ldr	r3, [pc, #172]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	4a2a      	ldr	r2, [pc, #168]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 8004362:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004366:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004368:	f7fd fc2c 	bl	8001bc4 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004370:	f7fd fc28 	bl	8001bc4 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e058      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004382:	4b22      	ldr	r3, [pc, #136]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0f0      	beq.n	8004370 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800438e:	e050      	b.n	8004432 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e04f      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004394:	4b1d      	ldr	r3, [pc, #116]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d148      	bne.n	8004432 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80043a0:	4b1a      	ldr	r3, [pc, #104]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a19      	ldr	r2, [pc, #100]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80043a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043ac:	4b17      	ldr	r3, [pc, #92]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	4a16      	ldr	r2, [pc, #88]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80043b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043b8:	f7fd fc04 	bl	8001bc4 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c0:	f7fd fc00 	bl	8001bc4 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e030      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043d2:	4b0e      	ldr	r3, [pc, #56]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0x734>
 80043de:	e028      	b.n	8004432 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	2b0c      	cmp	r3, #12
 80043e4:	d023      	beq.n	800442e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e6:	4b09      	ldr	r3, [pc, #36]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a08      	ldr	r2, [pc, #32]	@ (800440c <HAL_RCC_OscConfig+0x780>)
 80043ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f2:	f7fd fbe7 	bl	8001bc4 <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043f8:	e00c      	b.n	8004414 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043fa:	f7fd fbe3 	bl	8001bc4 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d905      	bls.n	8004414 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e013      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
 800440c:	40021000 	.word	0x40021000
 8004410:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004414:	4b09      	ldr	r3, [pc, #36]	@ (800443c <HAL_RCC_OscConfig+0x7b0>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1ec      	bne.n	80043fa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004420:	4b06      	ldr	r3, [pc, #24]	@ (800443c <HAL_RCC_OscConfig+0x7b0>)
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	4905      	ldr	r1, [pc, #20]	@ (800443c <HAL_RCC_OscConfig+0x7b0>)
 8004426:	4b06      	ldr	r3, [pc, #24]	@ (8004440 <HAL_RCC_OscConfig+0x7b4>)
 8004428:	4013      	ands	r3, r2
 800442a:	60cb      	str	r3, [r1, #12]
 800442c:	e001      	b.n	8004432 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3720      	adds	r7, #32
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40021000 	.word	0x40021000
 8004440:	feeefffc 	.word	0xfeeefffc

08004444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e0e7      	b.n	8004628 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004458:	4b75      	ldr	r3, [pc, #468]	@ (8004630 <HAL_RCC_ClockConfig+0x1ec>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d910      	bls.n	8004488 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004466:	4b72      	ldr	r3, [pc, #456]	@ (8004630 <HAL_RCC_ClockConfig+0x1ec>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f023 0207 	bic.w	r2, r3, #7
 800446e:	4970      	ldr	r1, [pc, #448]	@ (8004630 <HAL_RCC_ClockConfig+0x1ec>)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	4313      	orrs	r3, r2
 8004474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004476:	4b6e      	ldr	r3, [pc, #440]	@ (8004630 <HAL_RCC_ClockConfig+0x1ec>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	429a      	cmp	r2, r3
 8004482:	d001      	beq.n	8004488 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e0cf      	b.n	8004628 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d010      	beq.n	80044b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	4b66      	ldr	r3, [pc, #408]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d908      	bls.n	80044b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044a4:	4b63      	ldr	r3, [pc, #396]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	4960      	ldr	r1, [pc, #384]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d04c      	beq.n	800455c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b03      	cmp	r3, #3
 80044c8:	d107      	bne.n	80044da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ca:	4b5a      	ldr	r3, [pc, #360]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d121      	bne.n	800451a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e0a6      	b.n	8004628 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d107      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044e2:	4b54      	ldr	r3, [pc, #336]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d115      	bne.n	800451a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e09a      	b.n	8004628 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d107      	bne.n	800450a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044fa:	4b4e      	ldr	r3, [pc, #312]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d109      	bne.n	800451a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e08e      	b.n	8004628 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800450a:	4b4a      	ldr	r3, [pc, #296]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e086      	b.n	8004628 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800451a:	4b46      	ldr	r3, [pc, #280]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f023 0203 	bic.w	r2, r3, #3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	4943      	ldr	r1, [pc, #268]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 8004528:	4313      	orrs	r3, r2
 800452a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800452c:	f7fd fb4a 	bl	8001bc4 <HAL_GetTick>
 8004530:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004532:	e00a      	b.n	800454a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004534:	f7fd fb46 	bl	8001bc4 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004542:	4293      	cmp	r3, r2
 8004544:	d901      	bls.n	800454a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e06e      	b.n	8004628 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454a:	4b3a      	ldr	r3, [pc, #232]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 020c 	and.w	r2, r3, #12
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	429a      	cmp	r2, r3
 800455a:	d1eb      	bne.n	8004534 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d010      	beq.n	800458a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	4b31      	ldr	r3, [pc, #196]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004574:	429a      	cmp	r2, r3
 8004576:	d208      	bcs.n	800458a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004578:	4b2e      	ldr	r3, [pc, #184]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	492b      	ldr	r1, [pc, #172]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 8004586:	4313      	orrs	r3, r2
 8004588:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800458a:	4b29      	ldr	r3, [pc, #164]	@ (8004630 <HAL_RCC_ClockConfig+0x1ec>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d210      	bcs.n	80045ba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004598:	4b25      	ldr	r3, [pc, #148]	@ (8004630 <HAL_RCC_ClockConfig+0x1ec>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f023 0207 	bic.w	r2, r3, #7
 80045a0:	4923      	ldr	r1, [pc, #140]	@ (8004630 <HAL_RCC_ClockConfig+0x1ec>)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a8:	4b21      	ldr	r3, [pc, #132]	@ (8004630 <HAL_RCC_ClockConfig+0x1ec>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d001      	beq.n	80045ba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e036      	b.n	8004628 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0304 	and.w	r3, r3, #4
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d008      	beq.n	80045d8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	4918      	ldr	r1, [pc, #96]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d009      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045e4:	4b13      	ldr	r3, [pc, #76]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	4910      	ldr	r1, [pc, #64]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045f8:	f000 f824 	bl	8004644 <HAL_RCC_GetSysClockFreq>
 80045fc:	4602      	mov	r2, r0
 80045fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	091b      	lsrs	r3, r3, #4
 8004604:	f003 030f 	and.w	r3, r3, #15
 8004608:	490b      	ldr	r1, [pc, #44]	@ (8004638 <HAL_RCC_ClockConfig+0x1f4>)
 800460a:	5ccb      	ldrb	r3, [r1, r3]
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	fa22 f303 	lsr.w	r3, r2, r3
 8004614:	4a09      	ldr	r2, [pc, #36]	@ (800463c <HAL_RCC_ClockConfig+0x1f8>)
 8004616:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004618:	4b09      	ldr	r3, [pc, #36]	@ (8004640 <HAL_RCC_ClockConfig+0x1fc>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4618      	mov	r0, r3
 800461e:	f7fd fa81 	bl	8001b24 <HAL_InitTick>
 8004622:	4603      	mov	r3, r0
 8004624:	72fb      	strb	r3, [r7, #11]

  return status;
 8004626:	7afb      	ldrb	r3, [r7, #11]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40022000 	.word	0x40022000
 8004634:	40021000 	.word	0x40021000
 8004638:	0800b3b4 	.word	0x0800b3b4
 800463c:	20000000 	.word	0x20000000
 8004640:	20000004 	.word	0x20000004

08004644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004644:	b480      	push	{r7}
 8004646:	b089      	sub	sp, #36	@ 0x24
 8004648:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	61fb      	str	r3, [r7, #28]
 800464e:	2300      	movs	r3, #0
 8004650:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004652:	4b3e      	ldr	r3, [pc, #248]	@ (800474c <HAL_RCC_GetSysClockFreq+0x108>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 030c 	and.w	r3, r3, #12
 800465a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800465c:	4b3b      	ldr	r3, [pc, #236]	@ (800474c <HAL_RCC_GetSysClockFreq+0x108>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f003 0303 	and.w	r3, r3, #3
 8004664:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d005      	beq.n	8004678 <HAL_RCC_GetSysClockFreq+0x34>
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	2b0c      	cmp	r3, #12
 8004670:	d121      	bne.n	80046b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d11e      	bne.n	80046b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004678:	4b34      	ldr	r3, [pc, #208]	@ (800474c <HAL_RCC_GetSysClockFreq+0x108>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b00      	cmp	r3, #0
 8004682:	d107      	bne.n	8004694 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004684:	4b31      	ldr	r3, [pc, #196]	@ (800474c <HAL_RCC_GetSysClockFreq+0x108>)
 8004686:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800468a:	0a1b      	lsrs	r3, r3, #8
 800468c:	f003 030f 	and.w	r3, r3, #15
 8004690:	61fb      	str	r3, [r7, #28]
 8004692:	e005      	b.n	80046a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004694:	4b2d      	ldr	r3, [pc, #180]	@ (800474c <HAL_RCC_GetSysClockFreq+0x108>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	091b      	lsrs	r3, r3, #4
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80046a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004750 <HAL_RCC_GetSysClockFreq+0x10c>)
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10d      	bne.n	80046cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046b4:	e00a      	b.n	80046cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	2b04      	cmp	r3, #4
 80046ba:	d102      	bne.n	80046c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046bc:	4b25      	ldr	r3, [pc, #148]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x110>)
 80046be:	61bb      	str	r3, [r7, #24]
 80046c0:	e004      	b.n	80046cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d101      	bne.n	80046cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046c8:	4b23      	ldr	r3, [pc, #140]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x114>)
 80046ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	2b0c      	cmp	r3, #12
 80046d0:	d134      	bne.n	800473c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046d2:	4b1e      	ldr	r3, [pc, #120]	@ (800474c <HAL_RCC_GetSysClockFreq+0x108>)
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d003      	beq.n	80046ea <HAL_RCC_GetSysClockFreq+0xa6>
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2b03      	cmp	r3, #3
 80046e6:	d003      	beq.n	80046f0 <HAL_RCC_GetSysClockFreq+0xac>
 80046e8:	e005      	b.n	80046f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80046ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x110>)
 80046ec:	617b      	str	r3, [r7, #20]
      break;
 80046ee:	e005      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80046f0:	4b19      	ldr	r3, [pc, #100]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x114>)
 80046f2:	617b      	str	r3, [r7, #20]
      break;
 80046f4:	e002      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	617b      	str	r3, [r7, #20]
      break;
 80046fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046fc:	4b13      	ldr	r3, [pc, #76]	@ (800474c <HAL_RCC_GetSysClockFreq+0x108>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	091b      	lsrs	r3, r3, #4
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	3301      	adds	r3, #1
 8004708:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800470a:	4b10      	ldr	r3, [pc, #64]	@ (800474c <HAL_RCC_GetSysClockFreq+0x108>)
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	0a1b      	lsrs	r3, r3, #8
 8004710:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	fb03 f202 	mul.w	r2, r3, r2
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004720:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004722:	4b0a      	ldr	r3, [pc, #40]	@ (800474c <HAL_RCC_GetSysClockFreq+0x108>)
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	0e5b      	lsrs	r3, r3, #25
 8004728:	f003 0303 	and.w	r3, r3, #3
 800472c:	3301      	adds	r3, #1
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	fbb2 f3f3 	udiv	r3, r2, r3
 800473a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800473c:	69bb      	ldr	r3, [r7, #24]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3724      	adds	r7, #36	@ 0x24
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	40021000 	.word	0x40021000
 8004750:	0800b3cc 	.word	0x0800b3cc
 8004754:	00f42400 	.word	0x00f42400
 8004758:	007a1200 	.word	0x007a1200

0800475c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004760:	4b03      	ldr	r3, [pc, #12]	@ (8004770 <HAL_RCC_GetHCLKFreq+0x14>)
 8004762:	681b      	ldr	r3, [r3, #0]
}
 8004764:	4618      	mov	r0, r3
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	20000000 	.word	0x20000000

08004774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004778:	f7ff fff0 	bl	800475c <HAL_RCC_GetHCLKFreq>
 800477c:	4602      	mov	r2, r0
 800477e:	4b06      	ldr	r3, [pc, #24]	@ (8004798 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	0a1b      	lsrs	r3, r3, #8
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	4904      	ldr	r1, [pc, #16]	@ (800479c <HAL_RCC_GetPCLK1Freq+0x28>)
 800478a:	5ccb      	ldrb	r3, [r1, r3]
 800478c:	f003 031f 	and.w	r3, r3, #31
 8004790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004794:	4618      	mov	r0, r3
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40021000 	.word	0x40021000
 800479c:	0800b3c4 	.word	0x0800b3c4

080047a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047a4:	f7ff ffda 	bl	800475c <HAL_RCC_GetHCLKFreq>
 80047a8:	4602      	mov	r2, r0
 80047aa:	4b06      	ldr	r3, [pc, #24]	@ (80047c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	0adb      	lsrs	r3, r3, #11
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	4904      	ldr	r1, [pc, #16]	@ (80047c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047b6:	5ccb      	ldrb	r3, [r1, r3]
 80047b8:	f003 031f 	and.w	r3, r3, #31
 80047bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40021000 	.word	0x40021000
 80047c8:	0800b3c4 	.word	0x0800b3c4

080047cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80047d4:	2300      	movs	r3, #0
 80047d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80047d8:	4b2a      	ldr	r3, [pc, #168]	@ (8004884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80047e4:	f7ff f9ee 	bl	8003bc4 <HAL_PWREx_GetVoltageRange>
 80047e8:	6178      	str	r0, [r7, #20]
 80047ea:	e014      	b.n	8004816 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80047ec:	4b25      	ldr	r3, [pc, #148]	@ (8004884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f0:	4a24      	ldr	r2, [pc, #144]	@ (8004884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80047f8:	4b22      	ldr	r3, [pc, #136]	@ (8004884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004800:	60fb      	str	r3, [r7, #12]
 8004802:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004804:	f7ff f9de 	bl	8003bc4 <HAL_PWREx_GetVoltageRange>
 8004808:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800480a:	4b1e      	ldr	r3, [pc, #120]	@ (8004884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800480c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800480e:	4a1d      	ldr	r2, [pc, #116]	@ (8004884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004810:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004814:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800481c:	d10b      	bne.n	8004836 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b80      	cmp	r3, #128	@ 0x80
 8004822:	d919      	bls.n	8004858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2ba0      	cmp	r3, #160	@ 0xa0
 8004828:	d902      	bls.n	8004830 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800482a:	2302      	movs	r3, #2
 800482c:	613b      	str	r3, [r7, #16]
 800482e:	e013      	b.n	8004858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004830:	2301      	movs	r3, #1
 8004832:	613b      	str	r3, [r7, #16]
 8004834:	e010      	b.n	8004858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b80      	cmp	r3, #128	@ 0x80
 800483a:	d902      	bls.n	8004842 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800483c:	2303      	movs	r3, #3
 800483e:	613b      	str	r3, [r7, #16]
 8004840:	e00a      	b.n	8004858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b80      	cmp	r3, #128	@ 0x80
 8004846:	d102      	bne.n	800484e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004848:	2302      	movs	r3, #2
 800484a:	613b      	str	r3, [r7, #16]
 800484c:	e004      	b.n	8004858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b70      	cmp	r3, #112	@ 0x70
 8004852:	d101      	bne.n	8004858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004854:	2301      	movs	r3, #1
 8004856:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004858:	4b0b      	ldr	r3, [pc, #44]	@ (8004888 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f023 0207 	bic.w	r2, r3, #7
 8004860:	4909      	ldr	r1, [pc, #36]	@ (8004888 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	4313      	orrs	r3, r2
 8004866:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004868:	4b07      	ldr	r3, [pc, #28]	@ (8004888 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	429a      	cmp	r2, r3
 8004874:	d001      	beq.n	800487a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e000      	b.n	800487c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3718      	adds	r7, #24
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40021000 	.word	0x40021000
 8004888:	40022000 	.word	0x40022000

0800488c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004894:	2300      	movs	r3, #0
 8004896:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004898:	2300      	movs	r3, #0
 800489a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d041      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048ac:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80048b0:	d02a      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80048b2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80048b6:	d824      	bhi.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80048b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048bc:	d008      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80048be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048c2:	d81e      	bhi.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80048c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048cc:	d010      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80048ce:	e018      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048d0:	4b86      	ldr	r3, [pc, #536]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	4a85      	ldr	r2, [pc, #532]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048da:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048dc:	e015      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	3304      	adds	r3, #4
 80048e2:	2100      	movs	r1, #0
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 facb 	bl	8004e80 <RCCEx_PLLSAI1_Config>
 80048ea:	4603      	mov	r3, r0
 80048ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048ee:	e00c      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3320      	adds	r3, #32
 80048f4:	2100      	movs	r1, #0
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fbb6 	bl	8005068 <RCCEx_PLLSAI2_Config>
 80048fc:	4603      	mov	r3, r0
 80048fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004900:	e003      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	74fb      	strb	r3, [r7, #19]
      break;
 8004906:	e000      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004908:	bf00      	nop
    }

    if(ret == HAL_OK)
 800490a:	7cfb      	ldrb	r3, [r7, #19]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10b      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004910:	4b76      	ldr	r3, [pc, #472]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004916:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800491e:	4973      	ldr	r1, [pc, #460]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004926:	e001      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004928:	7cfb      	ldrb	r3, [r7, #19]
 800492a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d041      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800493c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004940:	d02a      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004942:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004946:	d824      	bhi.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004948:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800494c:	d008      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800494e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004952:	d81e      	bhi.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00a      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004958:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800495c:	d010      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800495e:	e018      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004960:	4b62      	ldr	r3, [pc, #392]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	4a61      	ldr	r2, [pc, #388]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004966:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800496a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800496c:	e015      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3304      	adds	r3, #4
 8004972:	2100      	movs	r1, #0
 8004974:	4618      	mov	r0, r3
 8004976:	f000 fa83 	bl	8004e80 <RCCEx_PLLSAI1_Config>
 800497a:	4603      	mov	r3, r0
 800497c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800497e:	e00c      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3320      	adds	r3, #32
 8004984:	2100      	movs	r1, #0
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fb6e 	bl	8005068 <RCCEx_PLLSAI2_Config>
 800498c:	4603      	mov	r3, r0
 800498e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004990:	e003      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	74fb      	strb	r3, [r7, #19]
      break;
 8004996:	e000      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004998:	bf00      	nop
    }

    if(ret == HAL_OK)
 800499a:	7cfb      	ldrb	r3, [r7, #19]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10b      	bne.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049a0:	4b52      	ldr	r3, [pc, #328]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049ae:	494f      	ldr	r1, [pc, #316]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80049b6:	e001      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b8:	7cfb      	ldrb	r3, [r7, #19]
 80049ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 80a0 	beq.w	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ca:	2300      	movs	r3, #0
 80049cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80049ce:	4b47      	ldr	r3, [pc, #284]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x152>
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80049de:	2300      	movs	r3, #0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00d      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049e4:	4b41      	ldr	r3, [pc, #260]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049e8:	4a40      	ldr	r2, [pc, #256]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80049f0:	4b3e      	ldr	r3, [pc, #248]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049f8:	60bb      	str	r3, [r7, #8]
 80049fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049fc:	2301      	movs	r3, #1
 80049fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a00:	4b3b      	ldr	r3, [pc, #236]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a3a      	ldr	r2, [pc, #232]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a0c:	f7fd f8da 	bl	8001bc4 <HAL_GetTick>
 8004a10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a12:	e009      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a14:	f7fd f8d6 	bl	8001bc4 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d902      	bls.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	74fb      	strb	r3, [r7, #19]
        break;
 8004a26:	e005      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a28:	4b31      	ldr	r3, [pc, #196]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0ef      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004a34:	7cfb      	ldrb	r3, [r7, #19]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d15c      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a3a:	4b2c      	ldr	r3, [pc, #176]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01f      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d019      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a58:	4b24      	ldr	r3, [pc, #144]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a64:	4b21      	ldr	r3, [pc, #132]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a6a:	4a20      	ldr	r2, [pc, #128]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a74:	4b1d      	ldr	r3, [pc, #116]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a84:	4a19      	ldr	r2, [pc, #100]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d016      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a96:	f7fd f895 	bl	8001bc4 <HAL_GetTick>
 8004a9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a9c:	e00b      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a9e:	f7fd f891 	bl	8001bc4 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d902      	bls.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	74fb      	strb	r3, [r7, #19]
            break;
 8004ab4:	e006      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0ec      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004ac4:	7cfb      	ldrb	r3, [r7, #19]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10c      	bne.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004aca:	4b08      	ldr	r3, [pc, #32]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ada:	4904      	ldr	r1, [pc, #16]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004ae2:	e009      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ae4:	7cfb      	ldrb	r3, [r7, #19]
 8004ae6:	74bb      	strb	r3, [r7, #18]
 8004ae8:	e006      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004aea:	bf00      	nop
 8004aec:	40021000 	.word	0x40021000
 8004af0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af4:	7cfb      	ldrb	r3, [r7, #19]
 8004af6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004af8:	7c7b      	ldrb	r3, [r7, #17]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d105      	bne.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004afe:	4b9e      	ldr	r3, [pc, #632]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b02:	4a9d      	ldr	r2, [pc, #628]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b08:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b16:	4b98      	ldr	r3, [pc, #608]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b1c:	f023 0203 	bic.w	r2, r3, #3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b24:	4994      	ldr	r1, [pc, #592]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00a      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b38:	4b8f      	ldr	r3, [pc, #572]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3e:	f023 020c 	bic.w	r2, r3, #12
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b46:	498c      	ldr	r1, [pc, #560]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0304 	and.w	r3, r3, #4
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b5a:	4b87      	ldr	r3, [pc, #540]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b60:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b68:	4983      	ldr	r1, [pc, #524]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0308 	and.w	r3, r3, #8
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00a      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b7c:	4b7e      	ldr	r3, [pc, #504]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b82:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b8a:	497b      	ldr	r1, [pc, #492]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0310 	and.w	r3, r3, #16
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b9e:	4b76      	ldr	r3, [pc, #472]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bac:	4972      	ldr	r1, [pc, #456]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0320 	and.w	r3, r3, #32
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00a      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bc0:	4b6d      	ldr	r3, [pc, #436]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bce:	496a      	ldr	r1, [pc, #424]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00a      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004be2:	4b65      	ldr	r3, [pc, #404]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf0:	4961      	ldr	r1, [pc, #388]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c04:	4b5c      	ldr	r3, [pc, #368]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c12:	4959      	ldr	r1, [pc, #356]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c26:	4b54      	ldr	r3, [pc, #336]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c34:	4950      	ldr	r1, [pc, #320]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00a      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c48:	4b4b      	ldr	r3, [pc, #300]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c4e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c56:	4948      	ldr	r1, [pc, #288]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c6a:	4b43      	ldr	r3, [pc, #268]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c70:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c78:	493f      	ldr	r1, [pc, #252]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d028      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c8c:	4b3a      	ldr	r3, [pc, #232]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c9a:	4937      	ldr	r1, [pc, #220]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ca6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004caa:	d106      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cac:	4b32      	ldr	r3, [pc, #200]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	4a31      	ldr	r2, [pc, #196]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cb6:	60d3      	str	r3, [r2, #12]
 8004cb8:	e011      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cbe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004cc2:	d10c      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3304      	adds	r3, #4
 8004cc8:	2101      	movs	r1, #1
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 f8d8 	bl	8004e80 <RCCEx_PLLSAI1_Config>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004cd4:	7cfb      	ldrb	r3, [r7, #19]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004cda:	7cfb      	ldrb	r3, [r7, #19]
 8004cdc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d028      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004cea:	4b23      	ldr	r3, [pc, #140]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf8:	491f      	ldr	r1, [pc, #124]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d08:	d106      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	4a1a      	ldr	r2, [pc, #104]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d14:	60d3      	str	r3, [r2, #12]
 8004d16:	e011      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d20:	d10c      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3304      	adds	r3, #4
 8004d26:	2101      	movs	r1, #1
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 f8a9 	bl	8004e80 <RCCEx_PLLSAI1_Config>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d32:	7cfb      	ldrb	r3, [r7, #19]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004d38:	7cfb      	ldrb	r3, [r7, #19]
 8004d3a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d02b      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d48:	4b0b      	ldr	r3, [pc, #44]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d56:	4908      	ldr	r1, [pc, #32]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d66:	d109      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d68:	4b03      	ldr	r3, [pc, #12]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	4a02      	ldr	r2, [pc, #8]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d72:	60d3      	str	r3, [r2, #12]
 8004d74:	e014      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004d76:	bf00      	nop
 8004d78:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d84:	d10c      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	3304      	adds	r3, #4
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 f877 	bl	8004e80 <RCCEx_PLLSAI1_Config>
 8004d92:	4603      	mov	r3, r0
 8004d94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d96:	7cfb      	ldrb	r3, [r7, #19]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004d9c:	7cfb      	ldrb	r3, [r7, #19]
 8004d9e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d02f      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dac:	4b2b      	ldr	r3, [pc, #172]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004db2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dba:	4928      	ldr	r1, [pc, #160]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dca:	d10d      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3304      	adds	r3, #4
 8004dd0:	2102      	movs	r1, #2
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 f854 	bl	8004e80 <RCCEx_PLLSAI1_Config>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ddc:	7cfb      	ldrb	r3, [r7, #19]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d014      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004de2:	7cfb      	ldrb	r3, [r7, #19]
 8004de4:	74bb      	strb	r3, [r7, #18]
 8004de6:	e011      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004df0:	d10c      	bne.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	3320      	adds	r3, #32
 8004df6:	2102      	movs	r1, #2
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 f935 	bl	8005068 <RCCEx_PLLSAI2_Config>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e02:	7cfb      	ldrb	r3, [r7, #19]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004e08:	7cfb      	ldrb	r3, [r7, #19]
 8004e0a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00a      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e18:	4b10      	ldr	r3, [pc, #64]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e1e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e26:	490d      	ldr	r1, [pc, #52]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00b      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e3a:	4b08      	ldr	r3, [pc, #32]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e40:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e4a:	4904      	ldr	r1, [pc, #16]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004e52:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	40021000 	.word	0x40021000

08004e60 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004e60:	b480      	push	{r7}
 8004e62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004e64:	4b05      	ldr	r3, [pc, #20]	@ (8004e7c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a04      	ldr	r2, [pc, #16]	@ (8004e7c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004e6a:	f043 0304 	orr.w	r3, r3, #4
 8004e6e:	6013      	str	r3, [r2, #0]
}
 8004e70:	bf00      	nop
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	40021000 	.word	0x40021000

08004e80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e8e:	4b75      	ldr	r3, [pc, #468]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d018      	beq.n	8004ecc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e9a:	4b72      	ldr	r3, [pc, #456]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	f003 0203 	and.w	r2, r3, #3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d10d      	bne.n	8004ec6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
       ||
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d009      	beq.n	8004ec6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004eb2:	4b6c      	ldr	r3, [pc, #432]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	091b      	lsrs	r3, r3, #4
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
       ||
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d047      	beq.n	8004f56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	73fb      	strb	r3, [r7, #15]
 8004eca:	e044      	b.n	8004f56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d018      	beq.n	8004f06 <RCCEx_PLLSAI1_Config+0x86>
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	d825      	bhi.n	8004f24 <RCCEx_PLLSAI1_Config+0xa4>
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d002      	beq.n	8004ee2 <RCCEx_PLLSAI1_Config+0x62>
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d009      	beq.n	8004ef4 <RCCEx_PLLSAI1_Config+0x74>
 8004ee0:	e020      	b.n	8004f24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ee2:	4b60      	ldr	r3, [pc, #384]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d11d      	bne.n	8004f2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ef2:	e01a      	b.n	8004f2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ef4:	4b5b      	ldr	r3, [pc, #364]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d116      	bne.n	8004f2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f04:	e013      	b.n	8004f2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f06:	4b57      	ldr	r3, [pc, #348]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10f      	bne.n	8004f32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f12:	4b54      	ldr	r3, [pc, #336]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d109      	bne.n	8004f32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f22:	e006      	b.n	8004f32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	73fb      	strb	r3, [r7, #15]
      break;
 8004f28:	e004      	b.n	8004f34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f2a:	bf00      	nop
 8004f2c:	e002      	b.n	8004f34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f2e:	bf00      	nop
 8004f30:	e000      	b.n	8004f34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f32:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10d      	bne.n	8004f56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f3a:	4b4a      	ldr	r3, [pc, #296]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6819      	ldr	r1, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	011b      	lsls	r3, r3, #4
 8004f4e:	430b      	orrs	r3, r1
 8004f50:	4944      	ldr	r1, [pc, #272]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f56:	7bfb      	ldrb	r3, [r7, #15]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d17d      	bne.n	8005058 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f5c:	4b41      	ldr	r3, [pc, #260]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a40      	ldr	r2, [pc, #256]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f68:	f7fc fe2c 	bl	8001bc4 <HAL_GetTick>
 8004f6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f6e:	e009      	b.n	8004f84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f70:	f7fc fe28 	bl	8001bc4 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d902      	bls.n	8004f84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	73fb      	strb	r3, [r7, #15]
        break;
 8004f82:	e005      	b.n	8004f90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f84:	4b37      	ldr	r3, [pc, #220]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1ef      	bne.n	8004f70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d160      	bne.n	8005058 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d111      	bne.n	8004fc0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f9c:	4b31      	ldr	r3, [pc, #196]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004fa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6892      	ldr	r2, [r2, #8]
 8004fac:	0211      	lsls	r1, r2, #8
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	68d2      	ldr	r2, [r2, #12]
 8004fb2:	0912      	lsrs	r2, r2, #4
 8004fb4:	0452      	lsls	r2, r2, #17
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	492a      	ldr	r1, [pc, #168]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	610b      	str	r3, [r1, #16]
 8004fbe:	e027      	b.n	8005010 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d112      	bne.n	8004fec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fc6:	4b27      	ldr	r3, [pc, #156]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004fce:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	6892      	ldr	r2, [r2, #8]
 8004fd6:	0211      	lsls	r1, r2, #8
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6912      	ldr	r2, [r2, #16]
 8004fdc:	0852      	lsrs	r2, r2, #1
 8004fde:	3a01      	subs	r2, #1
 8004fe0:	0552      	lsls	r2, r2, #21
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	491f      	ldr	r1, [pc, #124]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	610b      	str	r3, [r1, #16]
 8004fea:	e011      	b.n	8005010 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fec:	4b1d      	ldr	r3, [pc, #116]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004ff4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	6892      	ldr	r2, [r2, #8]
 8004ffc:	0211      	lsls	r1, r2, #8
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6952      	ldr	r2, [r2, #20]
 8005002:	0852      	lsrs	r2, r2, #1
 8005004:	3a01      	subs	r2, #1
 8005006:	0652      	lsls	r2, r2, #25
 8005008:	430a      	orrs	r2, r1
 800500a:	4916      	ldr	r1, [pc, #88]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1e4>)
 800500c:	4313      	orrs	r3, r2
 800500e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005010:	4b14      	ldr	r3, [pc, #80]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a13      	ldr	r2, [pc, #76]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005016:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800501a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800501c:	f7fc fdd2 	bl	8001bc4 <HAL_GetTick>
 8005020:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005022:	e009      	b.n	8005038 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005024:	f7fc fdce 	bl	8001bc4 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d902      	bls.n	8005038 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	73fb      	strb	r3, [r7, #15]
          break;
 8005036:	e005      	b.n	8005044 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005038:	4b0a      	ldr	r3, [pc, #40]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1e4>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0ef      	beq.n	8005024 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d106      	bne.n	8005058 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800504a:	4b06      	ldr	r3, [pc, #24]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1e4>)
 800504c:	691a      	ldr	r2, [r3, #16]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	4904      	ldr	r1, [pc, #16]	@ (8005064 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005054:	4313      	orrs	r3, r2
 8005056:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005058:	7bfb      	ldrb	r3, [r7, #15]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	40021000 	.word	0x40021000

08005068 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005072:	2300      	movs	r3, #0
 8005074:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005076:	4b6a      	ldr	r3, [pc, #424]	@ (8005220 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f003 0303 	and.w	r3, r3, #3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d018      	beq.n	80050b4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005082:	4b67      	ldr	r3, [pc, #412]	@ (8005220 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f003 0203 	and.w	r2, r3, #3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	429a      	cmp	r2, r3
 8005090:	d10d      	bne.n	80050ae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
       ||
 8005096:	2b00      	cmp	r3, #0
 8005098:	d009      	beq.n	80050ae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800509a:	4b61      	ldr	r3, [pc, #388]	@ (8005220 <RCCEx_PLLSAI2_Config+0x1b8>)
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	091b      	lsrs	r3, r3, #4
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
       ||
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d047      	beq.n	800513e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	73fb      	strb	r3, [r7, #15]
 80050b2:	e044      	b.n	800513e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2b03      	cmp	r3, #3
 80050ba:	d018      	beq.n	80050ee <RCCEx_PLLSAI2_Config+0x86>
 80050bc:	2b03      	cmp	r3, #3
 80050be:	d825      	bhi.n	800510c <RCCEx_PLLSAI2_Config+0xa4>
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d002      	beq.n	80050ca <RCCEx_PLLSAI2_Config+0x62>
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d009      	beq.n	80050dc <RCCEx_PLLSAI2_Config+0x74>
 80050c8:	e020      	b.n	800510c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80050ca:	4b55      	ldr	r3, [pc, #340]	@ (8005220 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d11d      	bne.n	8005112 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050da:	e01a      	b.n	8005112 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050dc:	4b50      	ldr	r3, [pc, #320]	@ (8005220 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d116      	bne.n	8005116 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050ec:	e013      	b.n	8005116 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050ee:	4b4c      	ldr	r3, [pc, #304]	@ (8005220 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10f      	bne.n	800511a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050fa:	4b49      	ldr	r3, [pc, #292]	@ (8005220 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d109      	bne.n	800511a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800510a:	e006      	b.n	800511a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	73fb      	strb	r3, [r7, #15]
      break;
 8005110:	e004      	b.n	800511c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005112:	bf00      	nop
 8005114:	e002      	b.n	800511c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005116:	bf00      	nop
 8005118:	e000      	b.n	800511c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800511a:	bf00      	nop
    }

    if(status == HAL_OK)
 800511c:	7bfb      	ldrb	r3, [r7, #15]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10d      	bne.n	800513e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005122:	4b3f      	ldr	r3, [pc, #252]	@ (8005220 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6819      	ldr	r1, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	3b01      	subs	r3, #1
 8005134:	011b      	lsls	r3, r3, #4
 8005136:	430b      	orrs	r3, r1
 8005138:	4939      	ldr	r1, [pc, #228]	@ (8005220 <RCCEx_PLLSAI2_Config+0x1b8>)
 800513a:	4313      	orrs	r3, r2
 800513c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800513e:	7bfb      	ldrb	r3, [r7, #15]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d167      	bne.n	8005214 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005144:	4b36      	ldr	r3, [pc, #216]	@ (8005220 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a35      	ldr	r2, [pc, #212]	@ (8005220 <RCCEx_PLLSAI2_Config+0x1b8>)
 800514a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800514e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005150:	f7fc fd38 	bl	8001bc4 <HAL_GetTick>
 8005154:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005156:	e009      	b.n	800516c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005158:	f7fc fd34 	bl	8001bc4 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d902      	bls.n	800516c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	73fb      	strb	r3, [r7, #15]
        break;
 800516a:	e005      	b.n	8005178 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800516c:	4b2c      	ldr	r3, [pc, #176]	@ (8005220 <RCCEx_PLLSAI2_Config+0x1b8>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1ef      	bne.n	8005158 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005178:	7bfb      	ldrb	r3, [r7, #15]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d14a      	bne.n	8005214 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d111      	bne.n	80051a8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005184:	4b26      	ldr	r3, [pc, #152]	@ (8005220 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800518c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6892      	ldr	r2, [r2, #8]
 8005194:	0211      	lsls	r1, r2, #8
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	68d2      	ldr	r2, [r2, #12]
 800519a:	0912      	lsrs	r2, r2, #4
 800519c:	0452      	lsls	r2, r2, #17
 800519e:	430a      	orrs	r2, r1
 80051a0:	491f      	ldr	r1, [pc, #124]	@ (8005220 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	614b      	str	r3, [r1, #20]
 80051a6:	e011      	b.n	80051cc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80051a8:	4b1d      	ldr	r3, [pc, #116]	@ (8005220 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80051b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	6892      	ldr	r2, [r2, #8]
 80051b8:	0211      	lsls	r1, r2, #8
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	6912      	ldr	r2, [r2, #16]
 80051be:	0852      	lsrs	r2, r2, #1
 80051c0:	3a01      	subs	r2, #1
 80051c2:	0652      	lsls	r2, r2, #25
 80051c4:	430a      	orrs	r2, r1
 80051c6:	4916      	ldr	r1, [pc, #88]	@ (8005220 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80051cc:	4b14      	ldr	r3, [pc, #80]	@ (8005220 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a13      	ldr	r2, [pc, #76]	@ (8005220 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d8:	f7fc fcf4 	bl	8001bc4 <HAL_GetTick>
 80051dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80051de:	e009      	b.n	80051f4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051e0:	f7fc fcf0 	bl	8001bc4 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d902      	bls.n	80051f4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	73fb      	strb	r3, [r7, #15]
          break;
 80051f2:	e005      	b.n	8005200 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80051f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005220 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0ef      	beq.n	80051e0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005200:	7bfb      	ldrb	r3, [r7, #15]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d106      	bne.n	8005214 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005206:	4b06      	ldr	r3, [pc, #24]	@ (8005220 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005208:	695a      	ldr	r2, [r3, #20]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	4904      	ldr	r1, [pc, #16]	@ (8005220 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005210:	4313      	orrs	r3, r2
 8005212:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005214:	7bfb      	ldrb	r3, [r7, #15]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	40021000 	.word	0x40021000

08005224 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e095      	b.n	8005362 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523a:	2b00      	cmp	r3, #0
 800523c:	d108      	bne.n	8005250 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005246:	d009      	beq.n	800525c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	61da      	str	r2, [r3, #28]
 800524e:	e005      	b.n	800525c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d106      	bne.n	800527c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7fc f9d8 	bl	800162c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005292:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800529c:	d902      	bls.n	80052a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	e002      	b.n	80052aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80052a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80052a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80052b2:	d007      	beq.n	80052c4 <HAL_SPI_Init+0xa0>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80052bc:	d002      	beq.n	80052c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80052d4:	431a      	orrs	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	431a      	orrs	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	431a      	orrs	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052f2:	431a      	orrs	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	69db      	ldr	r3, [r3, #28]
 80052f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052fc:	431a      	orrs	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005306:	ea42 0103 	orr.w	r1, r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800530e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	0c1b      	lsrs	r3, r3, #16
 8005320:	f003 0204 	and.w	r2, r3, #4
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005328:	f003 0310 	and.w	r3, r3, #16
 800532c:	431a      	orrs	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005332:	f003 0308 	and.w	r3, r3, #8
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005340:	ea42 0103 	orr.w	r1, r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b088      	sub	sp, #32
 800536e:	af00      	add	r7, sp, #0
 8005370:	60f8      	str	r0, [r7, #12]
 8005372:	60b9      	str	r1, [r7, #8]
 8005374:	603b      	str	r3, [r7, #0]
 8005376:	4613      	mov	r3, r2
 8005378:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800537a:	f7fc fc23 	bl	8001bc4 <HAL_GetTick>
 800537e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005380:	88fb      	ldrh	r3, [r7, #6]
 8005382:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b01      	cmp	r3, #1
 800538e:	d001      	beq.n	8005394 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005390:	2302      	movs	r3, #2
 8005392:	e15c      	b.n	800564e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d002      	beq.n	80053a0 <HAL_SPI_Transmit+0x36>
 800539a:	88fb      	ldrh	r3, [r7, #6]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e154      	b.n	800564e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d101      	bne.n	80053b2 <HAL_SPI_Transmit+0x48>
 80053ae:	2302      	movs	r3, #2
 80053b0:	e14d      	b.n	800564e <HAL_SPI_Transmit+0x2e4>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2203      	movs	r2, #3
 80053be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	88fa      	ldrh	r2, [r7, #6]
 80053d2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	88fa      	ldrh	r2, [r7, #6]
 80053d8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005404:	d10f      	bne.n	8005426 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005414:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005424:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005430:	2b40      	cmp	r3, #64	@ 0x40
 8005432:	d007      	beq.n	8005444 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005442:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800544c:	d952      	bls.n	80054f4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d002      	beq.n	800545c <HAL_SPI_Transmit+0xf2>
 8005456:	8b7b      	ldrh	r3, [r7, #26]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d145      	bne.n	80054e8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005460:	881a      	ldrh	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800546c:	1c9a      	adds	r2, r3, #2
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005476:	b29b      	uxth	r3, r3
 8005478:	3b01      	subs	r3, #1
 800547a:	b29a      	uxth	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005480:	e032      	b.n	80054e8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b02      	cmp	r3, #2
 800548e:	d112      	bne.n	80054b6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005494:	881a      	ldrh	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a0:	1c9a      	adds	r2, r3, #2
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	3b01      	subs	r3, #1
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80054b4:	e018      	b.n	80054e8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054b6:	f7fc fb85 	bl	8001bc4 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d803      	bhi.n	80054ce <HAL_SPI_Transmit+0x164>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054cc:	d102      	bne.n	80054d4 <HAL_SPI_Transmit+0x16a>
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d109      	bne.n	80054e8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e0b2      	b.n	800564e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1c7      	bne.n	8005482 <HAL_SPI_Transmit+0x118>
 80054f2:	e083      	b.n	80055fc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <HAL_SPI_Transmit+0x198>
 80054fc:	8b7b      	ldrh	r3, [r7, #26]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d177      	bne.n	80055f2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005506:	b29b      	uxth	r3, r3
 8005508:	2b01      	cmp	r3, #1
 800550a:	d912      	bls.n	8005532 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005510:	881a      	ldrh	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800551c:	1c9a      	adds	r2, r3, #2
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005526:	b29b      	uxth	r3, r3
 8005528:	3b02      	subs	r3, #2
 800552a:	b29a      	uxth	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005530:	e05f      	b.n	80055f2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	330c      	adds	r3, #12
 800553c:	7812      	ldrb	r2, [r2, #0]
 800553e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005544:	1c5a      	adds	r2, r3, #1
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800554e:	b29b      	uxth	r3, r3
 8005550:	3b01      	subs	r3, #1
 8005552:	b29a      	uxth	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005558:	e04b      	b.n	80055f2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b02      	cmp	r3, #2
 8005566:	d12b      	bne.n	80055c0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800556c:	b29b      	uxth	r3, r3
 800556e:	2b01      	cmp	r3, #1
 8005570:	d912      	bls.n	8005598 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005576:	881a      	ldrh	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005582:	1c9a      	adds	r2, r3, #2
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800558c:	b29b      	uxth	r3, r3
 800558e:	3b02      	subs	r3, #2
 8005590:	b29a      	uxth	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005596:	e02c      	b.n	80055f2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	330c      	adds	r3, #12
 80055a2:	7812      	ldrb	r2, [r2, #0]
 80055a4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055aa:	1c5a      	adds	r2, r3, #1
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	3b01      	subs	r3, #1
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80055be:	e018      	b.n	80055f2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055c0:	f7fc fb00 	bl	8001bc4 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d803      	bhi.n	80055d8 <HAL_SPI_Transmit+0x26e>
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d6:	d102      	bne.n	80055de <HAL_SPI_Transmit+0x274>
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d109      	bne.n	80055f2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e02d      	b.n	800564e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1ae      	bne.n	800555a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055fc:	69fa      	ldr	r2, [r7, #28]
 80055fe:	6839      	ldr	r1, [r7, #0]
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f000 f955 	bl	80058b0 <SPI_EndRxTxTransaction>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d002      	beq.n	8005612 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2220      	movs	r2, #32
 8005610:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10a      	bne.n	8005630 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800561a:	2300      	movs	r3, #0
 800561c:	617b      	str	r3, [r7, #20]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	617b      	str	r3, [r7, #20]
 800562e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e000      	b.n	800564e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800564c:	2300      	movs	r3, #0
  }
}
 800564e:	4618      	mov	r0, r3
 8005650:	3720      	adds	r7, #32
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005664:	b2db      	uxtb	r3, r3
}
 8005666:	4618      	mov	r0, r3
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
	...

08005674 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b088      	sub	sp, #32
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	603b      	str	r3, [r7, #0]
 8005680:	4613      	mov	r3, r2
 8005682:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005684:	f7fc fa9e 	bl	8001bc4 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800568c:	1a9b      	subs	r3, r3, r2
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	4413      	add	r3, r2
 8005692:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005694:	f7fc fa96 	bl	8001bc4 <HAL_GetTick>
 8005698:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800569a:	4b39      	ldr	r3, [pc, #228]	@ (8005780 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	015b      	lsls	r3, r3, #5
 80056a0:	0d1b      	lsrs	r3, r3, #20
 80056a2:	69fa      	ldr	r2, [r7, #28]
 80056a4:	fb02 f303 	mul.w	r3, r2, r3
 80056a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056aa:	e054      	b.n	8005756 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b2:	d050      	beq.n	8005756 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056b4:	f7fc fa86 	bl	8001bc4 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	69fa      	ldr	r2, [r7, #28]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d902      	bls.n	80056ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d13d      	bne.n	8005746 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80056d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056e2:	d111      	bne.n	8005708 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056ec:	d004      	beq.n	80056f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056f6:	d107      	bne.n	8005708 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005706:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800570c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005710:	d10f      	bne.n	8005732 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005730:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e017      	b.n	8005776 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800574c:	2300      	movs	r3, #0
 800574e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	3b01      	subs	r3, #1
 8005754:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	4013      	ands	r3, r2
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	429a      	cmp	r2, r3
 8005764:	bf0c      	ite	eq
 8005766:	2301      	moveq	r3, #1
 8005768:	2300      	movne	r3, #0
 800576a:	b2db      	uxtb	r3, r3
 800576c:	461a      	mov	r2, r3
 800576e:	79fb      	ldrb	r3, [r7, #7]
 8005770:	429a      	cmp	r2, r3
 8005772:	d19b      	bne.n	80056ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3720      	adds	r7, #32
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	20000000 	.word	0x20000000

08005784 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b08a      	sub	sp, #40	@ 0x28
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
 8005790:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005792:	2300      	movs	r3, #0
 8005794:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005796:	f7fc fa15 	bl	8001bc4 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579e:	1a9b      	subs	r3, r3, r2
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	4413      	add	r3, r2
 80057a4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80057a6:	f7fc fa0d 	bl	8001bc4 <HAL_GetTick>
 80057aa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	330c      	adds	r3, #12
 80057b2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80057b4:	4b3d      	ldr	r3, [pc, #244]	@ (80058ac <SPI_WaitFifoStateUntilTimeout+0x128>)
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	4613      	mov	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	00da      	lsls	r2, r3, #3
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	0d1b      	lsrs	r3, r3, #20
 80057c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057c6:	fb02 f303 	mul.w	r3, r2, r3
 80057ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80057cc:	e060      	b.n	8005890 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80057d4:	d107      	bne.n	80057e6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d104      	bne.n	80057e6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80057e4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ec:	d050      	beq.n	8005890 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057ee:	f7fc f9e9 	bl	8001bc4 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d902      	bls.n	8005804 <SPI_WaitFifoStateUntilTimeout+0x80>
 80057fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005800:	2b00      	cmp	r3, #0
 8005802:	d13d      	bne.n	8005880 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005812:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800581c:	d111      	bne.n	8005842 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005826:	d004      	beq.n	8005832 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005830:	d107      	bne.n	8005842 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005840:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005846:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800584a:	d10f      	bne.n	800586c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800585a:	601a      	str	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800586a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e010      	b.n	80058a2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005886:	2300      	movs	r3, #0
 8005888:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	3b01      	subs	r3, #1
 800588e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689a      	ldr	r2, [r3, #8]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	4013      	ands	r3, r2
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	429a      	cmp	r2, r3
 800589e:	d196      	bne.n	80057ce <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3728      	adds	r7, #40	@ 0x28
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	20000000 	.word	0x20000000

080058b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af02      	add	r7, sp, #8
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f7ff ff5b 	bl	8005784 <SPI_WaitFifoStateUntilTimeout>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d007      	beq.n	80058e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058d8:	f043 0220 	orr.w	r2, r3, #32
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e027      	b.n	8005934 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2200      	movs	r2, #0
 80058ec:	2180      	movs	r1, #128	@ 0x80
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f7ff fec0 	bl	8005674 <SPI_WaitFlagStateUntilTimeout>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d007      	beq.n	800590a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058fe:	f043 0220 	orr.w	r2, r3, #32
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e014      	b.n	8005934 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2200      	movs	r2, #0
 8005912:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f7ff ff34 	bl	8005784 <SPI_WaitFifoStateUntilTimeout>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d007      	beq.n	8005932 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005926:	f043 0220 	orr.w	r2, r3, #32
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e000      	b.n	8005934 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e040      	b.n	80059d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005952:	2b00      	cmp	r3, #0
 8005954:	d106      	bne.n	8005964 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7fc f842 	bl	80019e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2224      	movs	r2, #36	@ 0x24
 8005968:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0201 	bic.w	r2, r2, #1
 8005978:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800597e:	2b00      	cmp	r3, #0
 8005980:	d002      	beq.n	8005988 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 fb6a 	bl	800605c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f8af 	bl	8005aec <UART_SetConfig>
 800598e:	4603      	mov	r3, r0
 8005990:	2b01      	cmp	r3, #1
 8005992:	d101      	bne.n	8005998 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e01b      	b.n	80059d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0201 	orr.w	r2, r2, #1
 80059c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fbe9 	bl	80061a0 <UART_CheckIdleState>
 80059ce:	4603      	mov	r3, r0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b08a      	sub	sp, #40	@ 0x28
 80059dc:	af02      	add	r7, sp, #8
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	603b      	str	r3, [r7, #0]
 80059e4:	4613      	mov	r3, r2
 80059e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059ec:	2b20      	cmp	r3, #32
 80059ee:	d177      	bne.n	8005ae0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d002      	beq.n	80059fc <HAL_UART_Transmit+0x24>
 80059f6:	88fb      	ldrh	r3, [r7, #6]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e070      	b.n	8005ae2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2221      	movs	r2, #33	@ 0x21
 8005a0c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a0e:	f7fc f8d9 	bl	8001bc4 <HAL_GetTick>
 8005a12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	88fa      	ldrh	r2, [r7, #6]
 8005a18:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	88fa      	ldrh	r2, [r7, #6]
 8005a20:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a2c:	d108      	bne.n	8005a40 <HAL_UART_Transmit+0x68>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d104      	bne.n	8005a40 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005a36:	2300      	movs	r3, #0
 8005a38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	61bb      	str	r3, [r7, #24]
 8005a3e:	e003      	b.n	8005a48 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a44:	2300      	movs	r3, #0
 8005a46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a48:	e02f      	b.n	8005aaa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	2200      	movs	r2, #0
 8005a52:	2180      	movs	r1, #128	@ 0x80
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 fc4b 	bl	80062f0 <UART_WaitOnFlagUntilTimeout>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d004      	beq.n	8005a6a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2220      	movs	r2, #32
 8005a64:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e03b      	b.n	8005ae2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10b      	bne.n	8005a88 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	881a      	ldrh	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a7c:	b292      	uxth	r2, r2
 8005a7e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	3302      	adds	r3, #2
 8005a84:	61bb      	str	r3, [r7, #24]
 8005a86:	e007      	b.n	8005a98 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	781a      	ldrb	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	3301      	adds	r3, #1
 8005a96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1c9      	bne.n	8005a4a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2200      	movs	r2, #0
 8005abe:	2140      	movs	r1, #64	@ 0x40
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 fc15 	bl	80062f0 <UART_WaitOnFlagUntilTimeout>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d004      	beq.n	8005ad6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e005      	b.n	8005ae2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005adc:	2300      	movs	r3, #0
 8005ade:	e000      	b.n	8005ae2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005ae0:	2302      	movs	r3, #2
  }
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3720      	adds	r7, #32
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
	...

08005aec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005af0:	b08a      	sub	sp, #40	@ 0x28
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005af6:	2300      	movs	r3, #0
 8005af8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	431a      	orrs	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	69db      	ldr	r3, [r3, #28]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	4ba4      	ldr	r3, [pc, #656]	@ (8005dac <UART_SetConfig+0x2c0>)
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	6812      	ldr	r2, [r2, #0]
 8005b22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b24:	430b      	orrs	r3, r1
 8005b26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a99      	ldr	r2, [pc, #612]	@ (8005db0 <UART_SetConfig+0x2c4>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d004      	beq.n	8005b58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b54:	4313      	orrs	r3, r2
 8005b56:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a90      	ldr	r2, [pc, #576]	@ (8005db4 <UART_SetConfig+0x2c8>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d126      	bne.n	8005bc4 <UART_SetConfig+0xd8>
 8005b76:	4b90      	ldr	r3, [pc, #576]	@ (8005db8 <UART_SetConfig+0x2cc>)
 8005b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b7c:	f003 0303 	and.w	r3, r3, #3
 8005b80:	2b03      	cmp	r3, #3
 8005b82:	d81b      	bhi.n	8005bbc <UART_SetConfig+0xd0>
 8005b84:	a201      	add	r2, pc, #4	@ (adr r2, 8005b8c <UART_SetConfig+0xa0>)
 8005b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8a:	bf00      	nop
 8005b8c:	08005b9d 	.word	0x08005b9d
 8005b90:	08005bad 	.word	0x08005bad
 8005b94:	08005ba5 	.word	0x08005ba5
 8005b98:	08005bb5 	.word	0x08005bb5
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ba2:	e116      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005baa:	e112      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005bac:	2304      	movs	r3, #4
 8005bae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bb2:	e10e      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005bb4:	2308      	movs	r3, #8
 8005bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bba:	e10a      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005bbc:	2310      	movs	r3, #16
 8005bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bc2:	e106      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a7c      	ldr	r2, [pc, #496]	@ (8005dbc <UART_SetConfig+0x2d0>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d138      	bne.n	8005c40 <UART_SetConfig+0x154>
 8005bce:	4b7a      	ldr	r3, [pc, #488]	@ (8005db8 <UART_SetConfig+0x2cc>)
 8005bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bd4:	f003 030c 	and.w	r3, r3, #12
 8005bd8:	2b0c      	cmp	r3, #12
 8005bda:	d82d      	bhi.n	8005c38 <UART_SetConfig+0x14c>
 8005bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8005be4 <UART_SetConfig+0xf8>)
 8005bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be2:	bf00      	nop
 8005be4:	08005c19 	.word	0x08005c19
 8005be8:	08005c39 	.word	0x08005c39
 8005bec:	08005c39 	.word	0x08005c39
 8005bf0:	08005c39 	.word	0x08005c39
 8005bf4:	08005c29 	.word	0x08005c29
 8005bf8:	08005c39 	.word	0x08005c39
 8005bfc:	08005c39 	.word	0x08005c39
 8005c00:	08005c39 	.word	0x08005c39
 8005c04:	08005c21 	.word	0x08005c21
 8005c08:	08005c39 	.word	0x08005c39
 8005c0c:	08005c39 	.word	0x08005c39
 8005c10:	08005c39 	.word	0x08005c39
 8005c14:	08005c31 	.word	0x08005c31
 8005c18:	2300      	movs	r3, #0
 8005c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c1e:	e0d8      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005c20:	2302      	movs	r3, #2
 8005c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c26:	e0d4      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005c28:	2304      	movs	r3, #4
 8005c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c2e:	e0d0      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005c30:	2308      	movs	r3, #8
 8005c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c36:	e0cc      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005c38:	2310      	movs	r3, #16
 8005c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c3e:	e0c8      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a5e      	ldr	r2, [pc, #376]	@ (8005dc0 <UART_SetConfig+0x2d4>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d125      	bne.n	8005c96 <UART_SetConfig+0x1aa>
 8005c4a:	4b5b      	ldr	r3, [pc, #364]	@ (8005db8 <UART_SetConfig+0x2cc>)
 8005c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c50:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005c54:	2b30      	cmp	r3, #48	@ 0x30
 8005c56:	d016      	beq.n	8005c86 <UART_SetConfig+0x19a>
 8005c58:	2b30      	cmp	r3, #48	@ 0x30
 8005c5a:	d818      	bhi.n	8005c8e <UART_SetConfig+0x1a2>
 8005c5c:	2b20      	cmp	r3, #32
 8005c5e:	d00a      	beq.n	8005c76 <UART_SetConfig+0x18a>
 8005c60:	2b20      	cmp	r3, #32
 8005c62:	d814      	bhi.n	8005c8e <UART_SetConfig+0x1a2>
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d002      	beq.n	8005c6e <UART_SetConfig+0x182>
 8005c68:	2b10      	cmp	r3, #16
 8005c6a:	d008      	beq.n	8005c7e <UART_SetConfig+0x192>
 8005c6c:	e00f      	b.n	8005c8e <UART_SetConfig+0x1a2>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c74:	e0ad      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005c76:	2302      	movs	r3, #2
 8005c78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c7c:	e0a9      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005c7e:	2304      	movs	r3, #4
 8005c80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c84:	e0a5      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005c86:	2308      	movs	r3, #8
 8005c88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c8c:	e0a1      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005c8e:	2310      	movs	r3, #16
 8005c90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c94:	e09d      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a4a      	ldr	r2, [pc, #296]	@ (8005dc4 <UART_SetConfig+0x2d8>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d125      	bne.n	8005cec <UART_SetConfig+0x200>
 8005ca0:	4b45      	ldr	r3, [pc, #276]	@ (8005db8 <UART_SetConfig+0x2cc>)
 8005ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ca6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005caa:	2bc0      	cmp	r3, #192	@ 0xc0
 8005cac:	d016      	beq.n	8005cdc <UART_SetConfig+0x1f0>
 8005cae:	2bc0      	cmp	r3, #192	@ 0xc0
 8005cb0:	d818      	bhi.n	8005ce4 <UART_SetConfig+0x1f8>
 8005cb2:	2b80      	cmp	r3, #128	@ 0x80
 8005cb4:	d00a      	beq.n	8005ccc <UART_SetConfig+0x1e0>
 8005cb6:	2b80      	cmp	r3, #128	@ 0x80
 8005cb8:	d814      	bhi.n	8005ce4 <UART_SetConfig+0x1f8>
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <UART_SetConfig+0x1d8>
 8005cbe:	2b40      	cmp	r3, #64	@ 0x40
 8005cc0:	d008      	beq.n	8005cd4 <UART_SetConfig+0x1e8>
 8005cc2:	e00f      	b.n	8005ce4 <UART_SetConfig+0x1f8>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cca:	e082      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cd2:	e07e      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005cd4:	2304      	movs	r3, #4
 8005cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cda:	e07a      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005cdc:	2308      	movs	r3, #8
 8005cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ce2:	e076      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005ce4:	2310      	movs	r3, #16
 8005ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cea:	e072      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a35      	ldr	r2, [pc, #212]	@ (8005dc8 <UART_SetConfig+0x2dc>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d12a      	bne.n	8005d4c <UART_SetConfig+0x260>
 8005cf6:	4b30      	ldr	r3, [pc, #192]	@ (8005db8 <UART_SetConfig+0x2cc>)
 8005cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cfc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d04:	d01a      	beq.n	8005d3c <UART_SetConfig+0x250>
 8005d06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d0a:	d81b      	bhi.n	8005d44 <UART_SetConfig+0x258>
 8005d0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d10:	d00c      	beq.n	8005d2c <UART_SetConfig+0x240>
 8005d12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d16:	d815      	bhi.n	8005d44 <UART_SetConfig+0x258>
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d003      	beq.n	8005d24 <UART_SetConfig+0x238>
 8005d1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d20:	d008      	beq.n	8005d34 <UART_SetConfig+0x248>
 8005d22:	e00f      	b.n	8005d44 <UART_SetConfig+0x258>
 8005d24:	2300      	movs	r3, #0
 8005d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d2a:	e052      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d32:	e04e      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005d34:	2304      	movs	r3, #4
 8005d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d3a:	e04a      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005d3c:	2308      	movs	r3, #8
 8005d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d42:	e046      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005d44:	2310      	movs	r3, #16
 8005d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d4a:	e042      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a17      	ldr	r2, [pc, #92]	@ (8005db0 <UART_SetConfig+0x2c4>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d13a      	bne.n	8005dcc <UART_SetConfig+0x2e0>
 8005d56:	4b18      	ldr	r3, [pc, #96]	@ (8005db8 <UART_SetConfig+0x2cc>)
 8005d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d5c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005d60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d64:	d01a      	beq.n	8005d9c <UART_SetConfig+0x2b0>
 8005d66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d6a:	d81b      	bhi.n	8005da4 <UART_SetConfig+0x2b8>
 8005d6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d70:	d00c      	beq.n	8005d8c <UART_SetConfig+0x2a0>
 8005d72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d76:	d815      	bhi.n	8005da4 <UART_SetConfig+0x2b8>
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <UART_SetConfig+0x298>
 8005d7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d80:	d008      	beq.n	8005d94 <UART_SetConfig+0x2a8>
 8005d82:	e00f      	b.n	8005da4 <UART_SetConfig+0x2b8>
 8005d84:	2300      	movs	r3, #0
 8005d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d8a:	e022      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d92:	e01e      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005d94:	2304      	movs	r3, #4
 8005d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d9a:	e01a      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005d9c:	2308      	movs	r3, #8
 8005d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005da2:	e016      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005da4:	2310      	movs	r3, #16
 8005da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005daa:	e012      	b.n	8005dd2 <UART_SetConfig+0x2e6>
 8005dac:	efff69f3 	.word	0xefff69f3
 8005db0:	40008000 	.word	0x40008000
 8005db4:	40013800 	.word	0x40013800
 8005db8:	40021000 	.word	0x40021000
 8005dbc:	40004400 	.word	0x40004400
 8005dc0:	40004800 	.word	0x40004800
 8005dc4:	40004c00 	.word	0x40004c00
 8005dc8:	40005000 	.word	0x40005000
 8005dcc:	2310      	movs	r3, #16
 8005dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a9f      	ldr	r2, [pc, #636]	@ (8006054 <UART_SetConfig+0x568>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d17a      	bne.n	8005ed2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ddc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005de0:	2b08      	cmp	r3, #8
 8005de2:	d824      	bhi.n	8005e2e <UART_SetConfig+0x342>
 8005de4:	a201      	add	r2, pc, #4	@ (adr r2, 8005dec <UART_SetConfig+0x300>)
 8005de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dea:	bf00      	nop
 8005dec:	08005e11 	.word	0x08005e11
 8005df0:	08005e2f 	.word	0x08005e2f
 8005df4:	08005e19 	.word	0x08005e19
 8005df8:	08005e2f 	.word	0x08005e2f
 8005dfc:	08005e1f 	.word	0x08005e1f
 8005e00:	08005e2f 	.word	0x08005e2f
 8005e04:	08005e2f 	.word	0x08005e2f
 8005e08:	08005e2f 	.word	0x08005e2f
 8005e0c:	08005e27 	.word	0x08005e27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e10:	f7fe fcb0 	bl	8004774 <HAL_RCC_GetPCLK1Freq>
 8005e14:	61f8      	str	r0, [r7, #28]
        break;
 8005e16:	e010      	b.n	8005e3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e18:	4b8f      	ldr	r3, [pc, #572]	@ (8006058 <UART_SetConfig+0x56c>)
 8005e1a:	61fb      	str	r3, [r7, #28]
        break;
 8005e1c:	e00d      	b.n	8005e3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e1e:	f7fe fc11 	bl	8004644 <HAL_RCC_GetSysClockFreq>
 8005e22:	61f8      	str	r0, [r7, #28]
        break;
 8005e24:	e009      	b.n	8005e3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e2a:	61fb      	str	r3, [r7, #28]
        break;
 8005e2c:	e005      	b.n	8005e3a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005e38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 80fb 	beq.w	8006038 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	4613      	mov	r3, r2
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	4413      	add	r3, r2
 8005e4c:	69fa      	ldr	r2, [r7, #28]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d305      	bcc.n	8005e5e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e58:	69fa      	ldr	r2, [r7, #28]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d903      	bls.n	8005e66 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005e64:	e0e8      	b.n	8006038 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	461c      	mov	r4, r3
 8005e6c:	4615      	mov	r5, r2
 8005e6e:	f04f 0200 	mov.w	r2, #0
 8005e72:	f04f 0300 	mov.w	r3, #0
 8005e76:	022b      	lsls	r3, r5, #8
 8005e78:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005e7c:	0222      	lsls	r2, r4, #8
 8005e7e:	68f9      	ldr	r1, [r7, #12]
 8005e80:	6849      	ldr	r1, [r1, #4]
 8005e82:	0849      	lsrs	r1, r1, #1
 8005e84:	2000      	movs	r0, #0
 8005e86:	4688      	mov	r8, r1
 8005e88:	4681      	mov	r9, r0
 8005e8a:	eb12 0a08 	adds.w	sl, r2, r8
 8005e8e:	eb43 0b09 	adc.w	fp, r3, r9
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	603b      	str	r3, [r7, #0]
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ea0:	4650      	mov	r0, sl
 8005ea2:	4659      	mov	r1, fp
 8005ea4:	f7fa fdda 	bl	8000a5c <__aeabi_uldivmod>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4613      	mov	r3, r2
 8005eae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005eb6:	d308      	bcc.n	8005eca <UART_SetConfig+0x3de>
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ebe:	d204      	bcs.n	8005eca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	60da      	str	r2, [r3, #12]
 8005ec8:	e0b6      	b.n	8006038 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005ed0:	e0b2      	b.n	8006038 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005eda:	d15e      	bne.n	8005f9a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005edc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ee0:	2b08      	cmp	r3, #8
 8005ee2:	d828      	bhi.n	8005f36 <UART_SetConfig+0x44a>
 8005ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8005eec <UART_SetConfig+0x400>)
 8005ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eea:	bf00      	nop
 8005eec:	08005f11 	.word	0x08005f11
 8005ef0:	08005f19 	.word	0x08005f19
 8005ef4:	08005f21 	.word	0x08005f21
 8005ef8:	08005f37 	.word	0x08005f37
 8005efc:	08005f27 	.word	0x08005f27
 8005f00:	08005f37 	.word	0x08005f37
 8005f04:	08005f37 	.word	0x08005f37
 8005f08:	08005f37 	.word	0x08005f37
 8005f0c:	08005f2f 	.word	0x08005f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f10:	f7fe fc30 	bl	8004774 <HAL_RCC_GetPCLK1Freq>
 8005f14:	61f8      	str	r0, [r7, #28]
        break;
 8005f16:	e014      	b.n	8005f42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f18:	f7fe fc42 	bl	80047a0 <HAL_RCC_GetPCLK2Freq>
 8005f1c:	61f8      	str	r0, [r7, #28]
        break;
 8005f1e:	e010      	b.n	8005f42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f20:	4b4d      	ldr	r3, [pc, #308]	@ (8006058 <UART_SetConfig+0x56c>)
 8005f22:	61fb      	str	r3, [r7, #28]
        break;
 8005f24:	e00d      	b.n	8005f42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f26:	f7fe fb8d 	bl	8004644 <HAL_RCC_GetSysClockFreq>
 8005f2a:	61f8      	str	r0, [r7, #28]
        break;
 8005f2c:	e009      	b.n	8005f42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f32:	61fb      	str	r3, [r7, #28]
        break;
 8005f34:	e005      	b.n	8005f42 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005f40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d077      	beq.n	8006038 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	005a      	lsls	r2, r3, #1
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	085b      	lsrs	r3, r3, #1
 8005f52:	441a      	add	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	2b0f      	cmp	r3, #15
 8005f62:	d916      	bls.n	8005f92 <UART_SetConfig+0x4a6>
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f6a:	d212      	bcs.n	8005f92 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	f023 030f 	bic.w	r3, r3, #15
 8005f74:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	085b      	lsrs	r3, r3, #1
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	8afb      	ldrh	r3, [r7, #22]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	8afa      	ldrh	r2, [r7, #22]
 8005f8e:	60da      	str	r2, [r3, #12]
 8005f90:	e052      	b.n	8006038 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005f98:	e04e      	b.n	8006038 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f9a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005f9e:	2b08      	cmp	r3, #8
 8005fa0:	d827      	bhi.n	8005ff2 <UART_SetConfig+0x506>
 8005fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa8 <UART_SetConfig+0x4bc>)
 8005fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa8:	08005fcd 	.word	0x08005fcd
 8005fac:	08005fd5 	.word	0x08005fd5
 8005fb0:	08005fdd 	.word	0x08005fdd
 8005fb4:	08005ff3 	.word	0x08005ff3
 8005fb8:	08005fe3 	.word	0x08005fe3
 8005fbc:	08005ff3 	.word	0x08005ff3
 8005fc0:	08005ff3 	.word	0x08005ff3
 8005fc4:	08005ff3 	.word	0x08005ff3
 8005fc8:	08005feb 	.word	0x08005feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fcc:	f7fe fbd2 	bl	8004774 <HAL_RCC_GetPCLK1Freq>
 8005fd0:	61f8      	str	r0, [r7, #28]
        break;
 8005fd2:	e014      	b.n	8005ffe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fd4:	f7fe fbe4 	bl	80047a0 <HAL_RCC_GetPCLK2Freq>
 8005fd8:	61f8      	str	r0, [r7, #28]
        break;
 8005fda:	e010      	b.n	8005ffe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fdc:	4b1e      	ldr	r3, [pc, #120]	@ (8006058 <UART_SetConfig+0x56c>)
 8005fde:	61fb      	str	r3, [r7, #28]
        break;
 8005fe0:	e00d      	b.n	8005ffe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fe2:	f7fe fb2f 	bl	8004644 <HAL_RCC_GetSysClockFreq>
 8005fe6:	61f8      	str	r0, [r7, #28]
        break;
 8005fe8:	e009      	b.n	8005ffe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fee:	61fb      	str	r3, [r7, #28]
        break;
 8005ff0:	e005      	b.n	8005ffe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ffc:	bf00      	nop
    }

    if (pclk != 0U)
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d019      	beq.n	8006038 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	085a      	lsrs	r2, r3, #1
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	441a      	add	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	fbb2 f3f3 	udiv	r3, r2, r3
 8006016:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	2b0f      	cmp	r3, #15
 800601c:	d909      	bls.n	8006032 <UART_SetConfig+0x546>
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006024:	d205      	bcs.n	8006032 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	b29a      	uxth	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	60da      	str	r2, [r3, #12]
 8006030:	e002      	b.n	8006038 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006044:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006048:	4618      	mov	r0, r3
 800604a:	3728      	adds	r7, #40	@ 0x28
 800604c:	46bd      	mov	sp, r7
 800604e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006052:	bf00      	nop
 8006054:	40008000 	.word	0x40008000
 8006058:	00f42400 	.word	0x00f42400

0800605c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006068:	f003 0308 	and.w	r3, r3, #8
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00a      	beq.n	8006086 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	430a      	orrs	r2, r1
 8006084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00a      	beq.n	80060a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00a      	beq.n	80060ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ce:	f003 0304 	and.w	r3, r3, #4
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00a      	beq.n	80060ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	430a      	orrs	r2, r1
 80060ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f0:	f003 0310 	and.w	r3, r3, #16
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00a      	beq.n	800610e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	430a      	orrs	r2, r1
 800610c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006112:	f003 0320 	and.w	r3, r3, #32
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00a      	beq.n	8006130 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	430a      	orrs	r2, r1
 800612e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006138:	2b00      	cmp	r3, #0
 800613a:	d01a      	beq.n	8006172 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	430a      	orrs	r2, r1
 8006150:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006156:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800615a:	d10a      	bne.n	8006172 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00a      	beq.n	8006194 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	430a      	orrs	r2, r1
 8006192:	605a      	str	r2, [r3, #4]
  }
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b098      	sub	sp, #96	@ 0x60
 80061a4:	af02      	add	r7, sp, #8
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061b0:	f7fb fd08 	bl	8001bc4 <HAL_GetTick>
 80061b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0308 	and.w	r3, r3, #8
 80061c0:	2b08      	cmp	r3, #8
 80061c2:	d12e      	bne.n	8006222 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061cc:	2200      	movs	r2, #0
 80061ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f88c 	bl	80062f0 <UART_WaitOnFlagUntilTimeout>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d021      	beq.n	8006222 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e6:	e853 3f00 	ldrex	r3, [r3]
 80061ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	461a      	mov	r2, r3
 80061fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80061fe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006200:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006202:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006204:	e841 2300 	strex	r3, r2, [r1]
 8006208:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800620a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1e6      	bne.n	80061de <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2220      	movs	r2, #32
 8006214:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e062      	b.n	80062e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0304 	and.w	r3, r3, #4
 800622c:	2b04      	cmp	r3, #4
 800622e:	d149      	bne.n	80062c4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006230:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006238:	2200      	movs	r2, #0
 800623a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f856 	bl	80062f0 <UART_WaitOnFlagUntilTimeout>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d03c      	beq.n	80062c4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006252:	e853 3f00 	ldrex	r3, [r3]
 8006256:	623b      	str	r3, [r7, #32]
   return(result);
 8006258:	6a3b      	ldr	r3, [r7, #32]
 800625a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800625e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	461a      	mov	r2, r3
 8006266:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006268:	633b      	str	r3, [r7, #48]	@ 0x30
 800626a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800626e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006270:	e841 2300 	strex	r3, r2, [r1]
 8006274:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1e6      	bne.n	800624a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3308      	adds	r3, #8
 8006282:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	e853 3f00 	ldrex	r3, [r3]
 800628a:	60fb      	str	r3, [r7, #12]
   return(result);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f023 0301 	bic.w	r3, r3, #1
 8006292:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	3308      	adds	r3, #8
 800629a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800629c:	61fa      	str	r2, [r7, #28]
 800629e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a0:	69b9      	ldr	r1, [r7, #24]
 80062a2:	69fa      	ldr	r2, [r7, #28]
 80062a4:	e841 2300 	strex	r3, r2, [r1]
 80062a8:	617b      	str	r3, [r7, #20]
   return(result);
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1e5      	bne.n	800627c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2220      	movs	r2, #32
 80062b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e011      	b.n	80062e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2220      	movs	r2, #32
 80062c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2220      	movs	r2, #32
 80062ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3758      	adds	r7, #88	@ 0x58
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	603b      	str	r3, [r7, #0]
 80062fc:	4613      	mov	r3, r2
 80062fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006300:	e04f      	b.n	80063a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006308:	d04b      	beq.n	80063a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800630a:	f7fb fc5b 	bl	8001bc4 <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	429a      	cmp	r2, r3
 8006318:	d302      	bcc.n	8006320 <UART_WaitOnFlagUntilTimeout+0x30>
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d101      	bne.n	8006324 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e04e      	b.n	80063c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0304 	and.w	r3, r3, #4
 800632e:	2b00      	cmp	r3, #0
 8006330:	d037      	beq.n	80063a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	2b80      	cmp	r3, #128	@ 0x80
 8006336:	d034      	beq.n	80063a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2b40      	cmp	r3, #64	@ 0x40
 800633c:	d031      	beq.n	80063a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	f003 0308 	and.w	r3, r3, #8
 8006348:	2b08      	cmp	r3, #8
 800634a:	d110      	bne.n	800636e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2208      	movs	r2, #8
 8006352:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f000 f838 	bl	80063ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2208      	movs	r2, #8
 800635e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e029      	b.n	80063c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006378:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800637c:	d111      	bne.n	80063a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006386:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 f81e 	bl	80063ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2220      	movs	r2, #32
 8006392:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e00f      	b.n	80063c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	69da      	ldr	r2, [r3, #28]
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	4013      	ands	r3, r2
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	bf0c      	ite	eq
 80063b2:	2301      	moveq	r3, #1
 80063b4:	2300      	movne	r3, #0
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	461a      	mov	r2, r3
 80063ba:	79fb      	ldrb	r3, [r7, #7]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d0a0      	beq.n	8006302 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b095      	sub	sp, #84	@ 0x54
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063da:	e853 3f00 	ldrex	r3, [r3]
 80063de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	461a      	mov	r2, r3
 80063ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80063f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063f8:	e841 2300 	strex	r3, r2, [r1]
 80063fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1e6      	bne.n	80063d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3308      	adds	r3, #8
 800640a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	e853 3f00 	ldrex	r3, [r3]
 8006412:	61fb      	str	r3, [r7, #28]
   return(result);
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	f023 0301 	bic.w	r3, r3, #1
 800641a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	3308      	adds	r3, #8
 8006422:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006424:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006426:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006428:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800642a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800642c:	e841 2300 	strex	r3, r2, [r1]
 8006430:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1e5      	bne.n	8006404 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800643c:	2b01      	cmp	r3, #1
 800643e:	d118      	bne.n	8006472 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	e853 3f00 	ldrex	r3, [r3]
 800644c:	60bb      	str	r3, [r7, #8]
   return(result);
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f023 0310 	bic.w	r3, r3, #16
 8006454:	647b      	str	r3, [r7, #68]	@ 0x44
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	461a      	mov	r2, r3
 800645c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800645e:	61bb      	str	r3, [r7, #24]
 8006460:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006462:	6979      	ldr	r1, [r7, #20]
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	e841 2300 	strex	r3, r2, [r1]
 800646a:	613b      	str	r3, [r7, #16]
   return(result);
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1e6      	bne.n	8006440 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2220      	movs	r2, #32
 8006476:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006486:	bf00      	nop
 8006488:	3754      	adds	r7, #84	@ 0x54
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8006492:	b480      	push	{r7}
 8006494:	b083      	sub	sp, #12
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	7992      	ldrb	r2, [r2, #6]
 80064a4:	08d2      	lsrs	r2, r2, #3
 80064a6:	b2d2      	uxtb	r2, r2
 80064a8:	fb13 f302 	smulbb	r3, r3, r2
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	889b      	ldrh	r3, [r3, #4]
 80064b6:	461a      	mov	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	885b      	ldrh	r3, [r3, #2]
 80064bc:	fb02 f303 	mul.w	r3, r2, r3
 80064c0:	461a      	mov	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	60da      	str	r2, [r3, #12]
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 80064d8:	b490      	push	{r4, r7}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	4604      	mov	r4, r0
 80064e0:	4608      	mov	r0, r1
 80064e2:	1d39      	adds	r1, r7, #4
 80064e4:	e881 000c 	stmia.w	r1, {r2, r3}
 80064e8:	4623      	mov	r3, r4
 80064ea:	81fb      	strh	r3, [r7, #14]
 80064ec:	4603      	mov	r3, r0
 80064ee:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 80064f0:	2300      	movs	r3, #0
 80064f2:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 80064f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80064f8:	88ba      	ldrh	r2, [r7, #4]
 80064fa:	4293      	cmp	r3, r2
 80064fc:	da04      	bge.n	8006508 <code+0x30>
        code |= LEFT;
 80064fe:	2201      	movs	r2, #1
 8006500:	7dfb      	ldrb	r3, [r7, #23]
 8006502:	4313      	orrs	r3, r2
 8006504:	75fb      	strb	r3, [r7, #23]
 8006506:	e008      	b.n	800651a <code+0x42>
    } else if (x0 > window.x1) {
 8006508:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800650c:	893a      	ldrh	r2, [r7, #8]
 800650e:	4293      	cmp	r3, r2
 8006510:	dd03      	ble.n	800651a <code+0x42>
        code |= RIGHT;
 8006512:	2202      	movs	r2, #2
 8006514:	7dfb      	ldrb	r3, [r7, #23]
 8006516:	4313      	orrs	r3, r2
 8006518:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 800651a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800651e:	88fa      	ldrh	r2, [r7, #6]
 8006520:	4293      	cmp	r3, r2
 8006522:	da04      	bge.n	800652e <code+0x56>
        code |= BOTTOM;
 8006524:	2204      	movs	r2, #4
 8006526:	7dfb      	ldrb	r3, [r7, #23]
 8006528:	4313      	orrs	r3, r2
 800652a:	75fb      	strb	r3, [r7, #23]
 800652c:	e008      	b.n	8006540 <code+0x68>
    } else if (y0 > window.y1) {
 800652e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006532:	897a      	ldrh	r2, [r7, #10]
 8006534:	4293      	cmp	r3, r2
 8006536:	dd03      	ble.n	8006540 <code+0x68>
        code |= TOP;
 8006538:	2208      	movs	r2, #8
 800653a:	7dfb      	ldrb	r3, [r7, #23]
 800653c:	4313      	orrs	r3, r2
 800653e:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8006540:	7dfb      	ldrb	r3, [r7, #23]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bc90      	pop	{r4, r7}
 800654a:	4770      	bx	lr

0800654c <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b088      	sub	sp, #32
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
 8006558:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006566:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800656a:	cb0c      	ldmia	r3, {r2, r3}
 800656c:	f7ff ffb4 	bl	80064d8 <code>
 8006570:	4603      	mov	r3, r0
 8006572:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f9b3 0000 	ldrsh.w	r0, [r3]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006580:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006584:	cb0c      	ldmia	r3, {r2, r3}
 8006586:	f7ff ffa7 	bl	80064d8 <code>
 800658a:	4603      	mov	r3, r0
 800658c:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 800658e:	2300      	movs	r3, #0
 8006590:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8006592:	7ffa      	ldrb	r2, [r7, #31]
 8006594:	7fbb      	ldrb	r3, [r7, #30]
 8006596:	4313      	orrs	r3, r2
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d102      	bne.n	80065a4 <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 800659e:	2301      	movs	r3, #1
 80065a0:	777b      	strb	r3, [r7, #29]
            break;
 80065a2:	e0e9      	b.n	8006778 <clip_line+0x22c>
        } else if (code0 & code1) {
 80065a4:	7ffa      	ldrb	r2, [r7, #31]
 80065a6:	7fbb      	ldrb	r3, [r7, #30]
 80065a8:	4013      	ands	r3, r2
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f040 80e2 	bne.w	8006776 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 80065b2:	2300      	movs	r3, #0
 80065b4:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 80065b6:	2300      	movs	r3, #0
 80065b8:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 80065ba:	7ffb      	ldrb	r3, [r7, #31]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <clip_line+0x78>
 80065c0:	7ffb      	ldrb	r3, [r7, #31]
 80065c2:	e000      	b.n	80065c6 <clip_line+0x7a>
 80065c4:	7fbb      	ldrb	r3, [r7, #30]
 80065c6:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 80065c8:	2208      	movs	r2, #8
 80065ca:	7dfb      	ldrb	r3, [r7, #23]
 80065cc:	4013      	ands	r3, r2
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d024      	beq.n	800661e <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065da:	b29a      	uxth	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065e2:	4619      	mov	r1, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065ea:	1acb      	subs	r3, r1, r3
 80065ec:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 80065ee:	4608      	mov	r0, r1
 80065f0:	68b9      	ldr	r1, [r7, #8]
 80065f2:	f9b1 1000 	ldrsh.w	r1, [r1]
 80065f6:	1a41      	subs	r1, r0, r1
 80065f8:	fb03 f101 	mul.w	r1, r3, r1
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006602:	4618      	mov	r0, r3
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f9b3 3000 	ldrsh.w	r3, [r3]
 800660a:	1ac3      	subs	r3, r0, r3
 800660c:	fb91 f3f3 	sdiv	r3, r1, r3
 8006610:	b29b      	uxth	r3, r3
 8006612:	4413      	add	r3, r2
 8006614:	b29b      	uxth	r3, r3
 8006616:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8006618:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800661a:	833b      	strh	r3, [r7, #24]
 800661c:	e07f      	b.n	800671e <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 800661e:	2204      	movs	r2, #4
 8006620:	7dfb      	ldrb	r3, [r7, #23]
 8006622:	4013      	ands	r3, r2
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d024      	beq.n	8006674 <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006630:	b29a      	uxth	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006638:	4619      	mov	r1, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006640:	1acb      	subs	r3, r1, r3
 8006642:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006644:	4608      	mov	r0, r1
 8006646:	68b9      	ldr	r1, [r7, #8]
 8006648:	f9b1 1000 	ldrsh.w	r1, [r1]
 800664c:	1a41      	subs	r1, r0, r1
 800664e:	fb03 f101 	mul.w	r1, r3, r1
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006658:	4618      	mov	r0, r3
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006660:	1ac3      	subs	r3, r0, r3
 8006662:	fb91 f3f3 	sdiv	r3, r1, r3
 8006666:	b29b      	uxth	r3, r3
 8006668:	4413      	add	r3, r2
 800666a:	b29b      	uxth	r3, r3
 800666c:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 800666e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006670:	833b      	strh	r3, [r7, #24]
 8006672:	e054      	b.n	800671e <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8006674:	2202      	movs	r2, #2
 8006676:	7dfb      	ldrb	r3, [r7, #23]
 8006678:	4013      	ands	r3, r2
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b00      	cmp	r3, #0
 800667e:	d024      	beq.n	80066ca <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006686:	b29a      	uxth	r2, r3
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800668e:	4619      	mov	r1, r3
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006696:	1acb      	subs	r3, r1, r3
 8006698:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 800669a:	4608      	mov	r0, r1
 800669c:	68f9      	ldr	r1, [r7, #12]
 800669e:	f9b1 1000 	ldrsh.w	r1, [r1]
 80066a2:	1a41      	subs	r1, r0, r1
 80066a4:	fb03 f101 	mul.w	r1, r3, r1
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066ae:	4618      	mov	r0, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066b6:	1ac3      	subs	r3, r0, r3
 80066b8:	fb91 f3f3 	sdiv	r3, r1, r3
 80066bc:	b29b      	uxth	r3, r3
 80066be:	4413      	add	r3, r2
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 80066c4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80066c6:	837b      	strh	r3, [r7, #26]
 80066c8:	e029      	b.n	800671e <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 80066ca:	2201      	movs	r2, #1
 80066cc:	7dfb      	ldrb	r3, [r7, #23]
 80066ce:	4013      	ands	r3, r2
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d023      	beq.n	800671e <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066dc:	b29a      	uxth	r2, r3
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066e4:	4619      	mov	r1, r3
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066ec:	1acb      	subs	r3, r1, r3
 80066ee:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 80066f0:	4608      	mov	r0, r1
 80066f2:	68f9      	ldr	r1, [r7, #12]
 80066f4:	f9b1 1000 	ldrsh.w	r1, [r1]
 80066f8:	1a41      	subs	r1, r0, r1
 80066fa:	fb03 f101 	mul.w	r1, r3, r1
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006704:	4618      	mov	r0, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800670c:	1ac3      	subs	r3, r0, r3
 800670e:	fb91 f3f3 	sdiv	r3, r1, r3
 8006712:	b29b      	uxth	r3, r3
 8006714:	4413      	add	r3, r2
 8006716:	b29b      	uxth	r3, r3
 8006718:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 800671a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800671c:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 800671e:	7dfa      	ldrb	r2, [r7, #23]
 8006720:	7ffb      	ldrb	r3, [r7, #31]
 8006722:	429a      	cmp	r2, r3
 8006724:	d113      	bne.n	800674e <clip_line+0x202>
                *x0 = x;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	8b7a      	ldrh	r2, [r7, #26]
 800672a:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	8b3a      	ldrh	r2, [r7, #24]
 8006730:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800673e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006742:	cb0c      	ldmia	r3, {r2, r3}
 8006744:	f7ff fec8 	bl	80064d8 <code>
 8006748:	4603      	mov	r3, r0
 800674a:	77fb      	strb	r3, [r7, #31]
 800674c:	e721      	b.n	8006592 <clip_line+0x46>
            } else {
                *x1 = x;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	8b7a      	ldrh	r2, [r7, #26]
 8006752:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	8b3a      	ldrh	r2, [r7, #24]
 8006758:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006766:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800676a:	cb0c      	ldmia	r3, {r2, r3}
 800676c:	f7ff feb4 	bl	80064d8 <code>
 8006770:	4603      	mov	r3, r0
 8006772:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8006774:	e70d      	b.n	8006592 <clip_line+0x46>
            break;
 8006776:	bf00      	nop
            }
        }
    }

    return accept;
 8006778:	7f7b      	ldrb	r3, [r7, #29]
 800677a:	4618      	mov	r0, r3
 800677c:	3720      	adds	r7, #32
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8006782:	b580      	push	{r7, lr}
 8006784:	b082      	sub	sp, #8
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
 800678a:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	3306      	adds	r3, #6
 8006792:	2208      	movs	r2, #8
 8006794:	4619      	mov	r1, r3
 8006796:	f001 f8a8 	bl	80078ea <memcpy>
    meta->width = font[FONTX_WIDTH];
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	330e      	adds	r3, #14
 800679e:	781a      	ldrb	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	330f      	adds	r3, #15
 80067a8:	781a      	ldrb	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	3310      	adds	r3, #16
 80067b2:	781a      	ldrb	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	72da      	strb	r2, [r3, #11]

    return 0;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b08e      	sub	sp, #56	@ 0x38
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	60f8      	str	r0, [r7, #12]
 80067ca:	60b9      	str	r1, [r7, #8]
 80067cc:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 80067ce:	f107 0314 	add.w	r3, r7, #20
 80067d2:	6879      	ldr	r1, [r7, #4]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7ff ffd4 	bl	8006782 <fontx_meta>
 80067da:	4603      	mov	r3, r0
 80067dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (0 != status) {
 80067e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d002      	beq.n	80067ee <fontx_glyph+0x2c>
        return status;
 80067e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80067ec:	e077      	b.n	80068de <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 80067ee:	7f7a      	ldrb	r2, [r7, #29]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 80067f4:	7fba      	ldrb	r2, [r7, #30]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 80067fa:	7f7b      	ldrb	r3, [r7, #29]
 80067fc:	3307      	adds	r3, #7
 80067fe:	2b00      	cmp	r3, #0
 8006800:	da00      	bge.n	8006804 <fontx_glyph+0x42>
 8006802:	3307      	adds	r3, #7
 8006804:	10db      	asrs	r3, r3, #3
 8006806:	b2da      	uxtb	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	78da      	ldrb	r2, [r3, #3]
 8006810:	7fbb      	ldrb	r3, [r7, #30]
 8006812:	fb12 f303 	smulbb	r3, r2, r3
 8006816:	b2da      	uxtb	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 800681c:	7ffb      	ldrb	r3, [r7, #31]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10f      	bne.n	8006842 <fontx_glyph+0x80>
        if (code < 0x100) {
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	2bff      	cmp	r3, #255	@ 0xff
 8006826:	d859      	bhi.n	80068dc <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	789b      	ldrb	r3, [r3, #2]
 800682c:	461a      	mov	r2, r3
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	fb02 f303 	mul.w	r3, r2, r3
 8006834:	3311      	adds	r3, #17
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	441a      	add	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	e04d      	b.n	80068de <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	3312      	adds	r3, #18
 8006846:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nc = 0;
 8006848:	2300      	movs	r3, #0
 800684a:	637b      	str	r3, [r7, #52]	@ 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	3311      	adds	r3, #17
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	633b      	str	r3, [r7, #48]	@ 0x30
        while (bc--) {
 8006854:	e03d      	b.n	80068d2 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 8006856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	461a      	mov	r2, r3
 800685c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800685e:	3301      	adds	r3, #1
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	021b      	lsls	r3, r3, #8
 8006864:	4413      	add	r3, r2
 8006866:	627b      	str	r3, [r7, #36]	@ 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8006868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800686a:	3302      	adds	r3, #2
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	461a      	mov	r2, r3
 8006870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006872:	3303      	adds	r3, #3
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	021b      	lsls	r3, r3, #8
 8006878:	4413      	add	r3, r2
 800687a:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006880:	429a      	cmp	r2, r3
 8006882:	d31c      	bcc.n	80068be <fontx_glyph+0xfc>
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	429a      	cmp	r2, r3
 800688a:	d818      	bhi.n	80068be <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006894:	4413      	add	r3, r2
 8006896:	637b      	str	r3, [r7, #52]	@ 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3311      	adds	r3, #17
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	461a      	mov	r2, r3
                    nc * glyph->size
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	789b      	ldrb	r3, [r3, #2]
 80068a6:	4619      	mov	r1, r3
 80068a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068aa:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 80068ae:	4413      	add	r3, r2
 80068b0:	3312      	adds	r3, #18
                glyph->buffer = &font[
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	441a      	add	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	e00f      	b.n	80068de <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 80068be:	6a3a      	ldr	r2, [r7, #32]
 80068c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c2:	1ad2      	subs	r2, r2, r3
 80068c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c6:	4413      	add	r3, r2
 80068c8:	3301      	adds	r3, #1
 80068ca:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Next code block_table. */
            block_table += 4;
 80068cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ce:	3304      	adds	r3, #4
 80068d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (bc--) {
 80068d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d4:	1e5a      	subs	r2, r3, #1
 80068d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1bc      	bne.n	8006856 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 80068dc:	2301      	movs	r3, #1
 80068de:	4618      	mov	r0, r3
 80068e0:	3738      	adds	r7, #56	@ 0x38
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 80068e6:	b480      	push	{r7}
 80068e8:	b083      	sub	sp, #12
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	6039      	str	r1, [r7, #0]
    if (a > b) {
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	dd01      	ble.n	80068fc <min+0x16>
        return b;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	e000      	b.n	80068fe <min+0x18>
    };
    return a;
 80068fc:	687b      	ldr	r3, [r7, #4]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <max>:

static inline int max(int a, int b) {
 800690a:	b480      	push	{r7}
 800690c:	b083      	sub	sp, #12
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	429a      	cmp	r2, r3
 800691a:	dd01      	ble.n	8006920 <max+0x16>
        return a;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	e000      	b.n	8006922 <max+0x18>
    }
    return b;
 8006920:	683b      	ldr	r3, [r7, #0]
}
 8006922:	4618      	mov	r0, r3
 8006924:	370c      	adds	r7, #12
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
	...

08006930 <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	4603      	mov	r3, r0
 8006938:	80fb      	strh	r3, [r7, #6]
 800693a:	460b      	mov	r3, r1
 800693c:	80bb      	strh	r3, [r7, #4]
 800693e:	4613      	mov	r3, r2
 8006940:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8006942:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006946:	4a12      	ldr	r2, [pc, #72]	@ (8006990 <hagl_put_pixel+0x60>)
 8006948:	8812      	ldrh	r2, [r2, #0]
 800694a:	4293      	cmp	r3, r2
 800694c:	db1a      	blt.n	8006984 <hagl_put_pixel+0x54>
 800694e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006952:	4a0f      	ldr	r2, [pc, #60]	@ (8006990 <hagl_put_pixel+0x60>)
 8006954:	8852      	ldrh	r2, [r2, #2]
 8006956:	4293      	cmp	r3, r2
 8006958:	db14      	blt.n	8006984 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800695a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800695e:	4a0c      	ldr	r2, [pc, #48]	@ (8006990 <hagl_put_pixel+0x60>)
 8006960:	8892      	ldrh	r2, [r2, #4]
 8006962:	4293      	cmp	r3, r2
 8006964:	dc10      	bgt.n	8006988 <hagl_put_pixel+0x58>
 8006966:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800696a:	4a09      	ldr	r2, [pc, #36]	@ (8006990 <hagl_put_pixel+0x60>)
 800696c:	88d2      	ldrh	r2, [r2, #6]
 800696e:	4293      	cmp	r3, r2
 8006970:	dc0a      	bgt.n	8006988 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8006972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006976:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800697a:	887a      	ldrh	r2, [r7, #2]
 800697c:	4618      	mov	r0, r3
 800697e:	f7fa fc5f 	bl	8001240 <lcd_put_pixel>
 8006982:	e002      	b.n	800698a <hagl_put_pixel+0x5a>
        return;
 8006984:	bf00      	nop
 8006986:	e000      	b.n	800698a <hagl_put_pixel+0x5a>
        return;
 8006988:	bf00      	nop
}
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	2000000c 	.word	0x2000000c

08006994 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8006994:	b590      	push	{r4, r7, lr}
 8006996:	b085      	sub	sp, #20
 8006998:	af02      	add	r7, sp, #8
 800699a:	4604      	mov	r4, r0
 800699c:	4608      	mov	r0, r1
 800699e:	4611      	mov	r1, r2
 80069a0:	461a      	mov	r2, r3
 80069a2:	4623      	mov	r3, r4
 80069a4:	80fb      	strh	r3, [r7, #6]
 80069a6:	4603      	mov	r3, r0
 80069a8:	80bb      	strh	r3, [r7, #4]
 80069aa:	460b      	mov	r3, r1
 80069ac:	807b      	strh	r3, [r7, #2]
 80069ae:	4613      	mov	r3, r2
 80069b0:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 80069b2:	88fa      	ldrh	r2, [r7, #6]
 80069b4:	887b      	ldrh	r3, [r7, #2]
 80069b6:	4413      	add	r3, r2
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	b21a      	sxth	r2, r3
 80069bc:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80069c0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80069c4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80069c8:	883b      	ldrh	r3, [r7, #0]
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	4623      	mov	r3, r4
 80069ce:	f000 f827 	bl	8006a20 <hagl_draw_line>
#endif
}
 80069d2:	bf00      	nop
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd90      	pop	{r4, r7, pc}

080069da <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 80069da:	b590      	push	{r4, r7, lr}
 80069dc:	b085      	sub	sp, #20
 80069de:	af02      	add	r7, sp, #8
 80069e0:	4604      	mov	r4, r0
 80069e2:	4608      	mov	r0, r1
 80069e4:	4611      	mov	r1, r2
 80069e6:	461a      	mov	r2, r3
 80069e8:	4623      	mov	r3, r4
 80069ea:	80fb      	strh	r3, [r7, #6]
 80069ec:	4603      	mov	r3, r0
 80069ee:	80bb      	strh	r3, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	807b      	strh	r3, [r7, #2]
 80069f4:	4613      	mov	r3, r2
 80069f6:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 80069f8:	88ba      	ldrh	r2, [r7, #4]
 80069fa:	887b      	ldrh	r3, [r7, #2]
 80069fc:	4413      	add	r3, r2
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	b21c      	sxth	r4, r3
 8006a02:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006a06:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006a0a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006a0e:	883b      	ldrh	r3, [r7, #0]
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	4623      	mov	r3, r4
 8006a14:	f000 f804 	bl	8006a20 <hagl_draw_line>
#endif
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd90      	pop	{r4, r7, pc}

08006a20 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8006a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a22:	b089      	sub	sp, #36	@ 0x24
 8006a24:	af02      	add	r7, sp, #8
 8006a26:	4604      	mov	r4, r0
 8006a28:	4608      	mov	r0, r1
 8006a2a:	4611      	mov	r1, r2
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	4623      	mov	r3, r4
 8006a30:	80fb      	strh	r3, [r7, #6]
 8006a32:	4603      	mov	r3, r0
 8006a34:	80bb      	strh	r3, [r7, #4]
 8006a36:	460b      	mov	r3, r1
 8006a38:	807b      	strh	r3, [r7, #2]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8006a3e:	463b      	mov	r3, r7
 8006a40:	1cba      	adds	r2, r7, #2
 8006a42:	1d3d      	adds	r5, r7, #4
 8006a44:	1dbc      	adds	r4, r7, #6
 8006a46:	494a      	ldr	r1, [pc, #296]	@ (8006b70 <hagl_draw_line+0x150>)
 8006a48:	466e      	mov	r6, sp
 8006a4a:	c903      	ldmia	r1, {r0, r1}
 8006a4c:	e886 0003 	stmia.w	r6, {r0, r1}
 8006a50:	4629      	mov	r1, r5
 8006a52:	4620      	mov	r0, r4
 8006a54:	f7ff fd7a 	bl	800654c <clip_line>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	f083 0301 	eor.w	r3, r3, #1
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d17e      	bne.n	8006b62 <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8006a64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	bfb8      	it	lt
 8006a74:	425b      	neglt	r3, r3
 8006a76:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8006a78:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006a7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	da01      	bge.n	8006a88 <hagl_draw_line+0x68>
 8006a84:	2301      	movs	r3, #1
 8006a86:	e001      	b.n	8006a8c <hagl_draw_line+0x6c>
 8006a88:	f04f 33ff 	mov.w	r3, #4294967295
 8006a8c:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8006a8e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006a92:	461a      	mov	r2, r3
 8006a94:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	bfb8      	it	lt
 8006a9e:	425b      	neglt	r3, r3
 8006aa0:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 8006aa2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006aa6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	da01      	bge.n	8006ab2 <hagl_draw_line+0x92>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e001      	b.n	8006ab6 <hagl_draw_line+0x96>
 8006ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab6:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8006ab8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006abc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	dd06      	ble.n	8006ad2 <hagl_draw_line+0xb2>
 8006ac4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006ac8:	0fda      	lsrs	r2, r3, #31
 8006aca:	4413      	add	r3, r2
 8006acc:	105b      	asrs	r3, r3, #1
 8006ace:	b21b      	sxth	r3, r3
 8006ad0:	e006      	b.n	8006ae0 <hagl_draw_line+0xc0>
 8006ad2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006ad6:	0fda      	lsrs	r2, r3, #31
 8006ad8:	4413      	add	r3, r2
 8006ada:	105b      	asrs	r3, r3, #1
 8006adc:	425b      	negs	r3, r3
 8006ade:	b21b      	sxth	r3, r3
 8006ae0:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 8006ae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ae6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006aea:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7ff ff1f 	bl	8006930 <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 8006af2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006af6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d105      	bne.n	8006b0a <hagl_draw_line+0xea>
 8006afe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006b02:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d02d      	beq.n	8006b66 <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 8006b0a:	8afb      	ldrh	r3, [r7, #22]
 8006b0c:	005b      	lsls	r3, r3, #1
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 8006b12:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006b16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006b1a:	425b      	negs	r3, r3
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	dd0c      	ble.n	8006b3a <hagl_draw_line+0x11a>
            err -= dy;
 8006b20:	8afa      	ldrh	r2, [r7, #22]
 8006b22:	8a3b      	ldrh	r3, [r7, #16]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8006b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	8a7b      	ldrh	r3, [r7, #18]
 8006b32:	4413      	add	r3, r2
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	b21b      	sxth	r3, r3
 8006b38:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 8006b3a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006b3e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	dacd      	bge.n	8006ae2 <hagl_draw_line+0xc2>
            err += dx;
 8006b46:	8afa      	ldrh	r2, [r7, #22]
 8006b48:	8abb      	ldrh	r3, [r7, #20]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 8006b50:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	89fb      	ldrh	r3, [r7, #14]
 8006b58:	4413      	add	r3, r2
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	b21b      	sxth	r3, r3
 8006b5e:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 8006b60:	e7bf      	b.n	8006ae2 <hagl_draw_line+0xc2>
        return;
 8006b62:	bf00      	nop
 8006b64:	e000      	b.n	8006b68 <hagl_draw_line+0x148>
            break;
 8006b66:	bf00      	nop
        }
    }
}
 8006b68:	371c      	adds	r7, #28
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	2000000c 	.word	0x2000000c

08006b74 <hagl_draw_rectangle>:

/*
 * Draw a rectangle with given color.
 */
void hagl_draw_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8006b74:	b590      	push	{r4, r7, lr}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	4608      	mov	r0, r1
 8006b7e:	4611      	mov	r1, r2
 8006b80:	461a      	mov	r2, r3
 8006b82:	4623      	mov	r3, r4
 8006b84:	80fb      	strh	r3, [r7, #6]
 8006b86:	4603      	mov	r3, r0
 8006b88:	80bb      	strh	r3, [r7, #4]
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	807b      	strh	r3, [r7, #2]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8006b92:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006b96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	dd0e      	ble.n	8006bbc <hagl_draw_rectangle+0x48>
        x0 = x0 + x1;
 8006b9e:	88fa      	ldrh	r2, [r7, #6]
 8006ba0:	887b      	ldrh	r3, [r7, #2]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8006ba8:	88fa      	ldrh	r2, [r7, #6]
 8006baa:	887b      	ldrh	r3, [r7, #2]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8006bb2:	88fa      	ldrh	r2, [r7, #6]
 8006bb4:	887b      	ldrh	r3, [r7, #2]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8006bbc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006bc0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	dd0e      	ble.n	8006be6 <hagl_draw_rectangle+0x72>
        y0 = y0 + y1;
 8006bc8:	88ba      	ldrh	r2, [r7, #4]
 8006bca:	883b      	ldrh	r3, [r7, #0]
 8006bcc:	4413      	add	r3, r2
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8006bd2:	88ba      	ldrh	r2, [r7, #4]
 8006bd4:	883b      	ldrh	r3, [r7, #0]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8006bdc:	88ba      	ldrh	r2, [r7, #4]
 8006bde:	883b      	ldrh	r3, [r7, #0]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8006be6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006bea:	4a24      	ldr	r2, [pc, #144]	@ (8006c7c <hagl_draw_rectangle+0x108>)
 8006bec:	8812      	ldrh	r2, [r2, #0]
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	db3e      	blt.n	8006c70 <hagl_draw_rectangle+0xfc>
 8006bf2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006bf6:	4a21      	ldr	r2, [pc, #132]	@ (8006c7c <hagl_draw_rectangle+0x108>)
 8006bf8:	8852      	ldrh	r2, [r2, #2]
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	db38      	blt.n	8006c70 <hagl_draw_rectangle+0xfc>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8006bfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c02:	4a1e      	ldr	r2, [pc, #120]	@ (8006c7c <hagl_draw_rectangle+0x108>)
 8006c04:	8892      	ldrh	r2, [r2, #4]
 8006c06:	4293      	cmp	r3, r2
 8006c08:	dc34      	bgt.n	8006c74 <hagl_draw_rectangle+0x100>
 8006c0a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006c0e:	4a1b      	ldr	r2, [pc, #108]	@ (8006c7c <hagl_draw_rectangle+0x108>)
 8006c10:	88d2      	ldrh	r2, [r2, #6]
 8006c12:	4293      	cmp	r3, r2
 8006c14:	dc2e      	bgt.n	8006c74 <hagl_draw_rectangle+0x100>
        return;
    }

    uint16_t width = x1 - x0 + 1;
 8006c16:	887a      	ldrh	r2, [r7, #2]
 8006c18:	88fb      	ldrh	r3, [r7, #6]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	3301      	adds	r3, #1
 8006c20:	81fb      	strh	r3, [r7, #14]
    uint16_t height = y1 - y0 + 1;
 8006c22:	883a      	ldrh	r2, [r7, #0]
 8006c24:	88bb      	ldrh	r3, [r7, #4]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	81bb      	strh	r3, [r7, #12]

    hagl_draw_hline(x0, y0, width, color);
 8006c2e:	8c3b      	ldrh	r3, [r7, #32]
 8006c30:	89fa      	ldrh	r2, [r7, #14]
 8006c32:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006c36:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006c3a:	f7ff feab 	bl	8006994 <hagl_draw_hline>
    hagl_draw_hline(x0, y1, width, color);
 8006c3e:	8c3b      	ldrh	r3, [r7, #32]
 8006c40:	89fa      	ldrh	r2, [r7, #14]
 8006c42:	f9b7 1000 	ldrsh.w	r1, [r7]
 8006c46:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006c4a:	f7ff fea3 	bl	8006994 <hagl_draw_hline>
    hagl_draw_vline(x0, y0, height, color);
 8006c4e:	8c3b      	ldrh	r3, [r7, #32]
 8006c50:	89ba      	ldrh	r2, [r7, #12]
 8006c52:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006c56:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006c5a:	f7ff febe 	bl	80069da <hagl_draw_vline>
    hagl_draw_vline(x1, y0, height, color);
 8006c5e:	8c3b      	ldrh	r3, [r7, #32]
 8006c60:	89ba      	ldrh	r2, [r7, #12]
 8006c62:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006c66:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8006c6a:	f7ff feb6 	bl	80069da <hagl_draw_vline>
 8006c6e:	e002      	b.n	8006c76 <hagl_draw_rectangle+0x102>
        return;
 8006c70:	bf00      	nop
 8006c72:	e000      	b.n	8006c76 <hagl_draw_rectangle+0x102>
        return;
 8006c74:	bf00      	nop
}
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd90      	pop	{r4, r7, pc}
 8006c7c:	2000000c 	.word	0x2000000c

08006c80 <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8006c80:	b590      	push	{r4, r7, lr}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	4604      	mov	r4, r0
 8006c88:	4608      	mov	r0, r1
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	4623      	mov	r3, r4
 8006c90:	80fb      	strh	r3, [r7, #6]
 8006c92:	4603      	mov	r3, r0
 8006c94:	80bb      	strh	r3, [r7, #4]
 8006c96:	460b      	mov	r3, r1
 8006c98:	807b      	strh	r3, [r7, #2]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8006c9e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006ca2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	dd0e      	ble.n	8006cc8 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 8006caa:	88fa      	ldrh	r2, [r7, #6]
 8006cac:	887b      	ldrh	r3, [r7, #2]
 8006cae:	4413      	add	r3, r2
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8006cb4:	88fa      	ldrh	r2, [r7, #6]
 8006cb6:	887b      	ldrh	r3, [r7, #2]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8006cbe:	88fa      	ldrh	r2, [r7, #6]
 8006cc0:	887b      	ldrh	r3, [r7, #2]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8006cc8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006ccc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	dd0e      	ble.n	8006cf2 <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 8006cd4:	88ba      	ldrh	r2, [r7, #4]
 8006cd6:	883b      	ldrh	r3, [r7, #0]
 8006cd8:	4413      	add	r3, r2
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8006cde:	88ba      	ldrh	r2, [r7, #4]
 8006ce0:	883b      	ldrh	r3, [r7, #0]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8006ce8:	88ba      	ldrh	r2, [r7, #4]
 8006cea:	883b      	ldrh	r3, [r7, #0]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8006cf2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006cf6:	4a33      	ldr	r2, [pc, #204]	@ (8006dc4 <hagl_fill_rectangle+0x144>)
 8006cf8:	8812      	ldrh	r2, [r2, #0]
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	db5b      	blt.n	8006db6 <hagl_fill_rectangle+0x136>
 8006cfe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006d02:	4a30      	ldr	r2, [pc, #192]	@ (8006dc4 <hagl_fill_rectangle+0x144>)
 8006d04:	8852      	ldrh	r2, [r2, #2]
 8006d06:	4293      	cmp	r3, r2
 8006d08:	db55      	blt.n	8006db6 <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8006d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d0e:	4a2d      	ldr	r2, [pc, #180]	@ (8006dc4 <hagl_fill_rectangle+0x144>)
 8006d10:	8892      	ldrh	r2, [r2, #4]
 8006d12:	4293      	cmp	r3, r2
 8006d14:	dc51      	bgt.n	8006dba <hagl_fill_rectangle+0x13a>
 8006d16:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006d1a:	4a2a      	ldr	r2, [pc, #168]	@ (8006dc4 <hagl_fill_rectangle+0x144>)
 8006d1c:	88d2      	ldrh	r2, [r2, #6]
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	dc4b      	bgt.n	8006dba <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 8006d22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d26:	4a27      	ldr	r2, [pc, #156]	@ (8006dc4 <hagl_fill_rectangle+0x144>)
 8006d28:	8812      	ldrh	r2, [r2, #0]
 8006d2a:	4611      	mov	r1, r2
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7ff fdec 	bl	800690a <max>
 8006d32:	4603      	mov	r3, r0
 8006d34:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 8006d36:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006d3a:	4a22      	ldr	r2, [pc, #136]	@ (8006dc4 <hagl_fill_rectangle+0x144>)
 8006d3c:	8852      	ldrh	r2, [r2, #2]
 8006d3e:	4611      	mov	r1, r2
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7ff fde2 	bl	800690a <max>
 8006d46:	4603      	mov	r3, r0
 8006d48:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 8006d4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006d4e:	4a1d      	ldr	r2, [pc, #116]	@ (8006dc4 <hagl_fill_rectangle+0x144>)
 8006d50:	8892      	ldrh	r2, [r2, #4]
 8006d52:	4611      	mov	r1, r2
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7ff fdc6 	bl	80068e6 <min>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 8006d5e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006d62:	4a18      	ldr	r2, [pc, #96]	@ (8006dc4 <hagl_fill_rectangle+0x144>)
 8006d64:	88d2      	ldrh	r2, [r2, #6]
 8006d66:	4611      	mov	r1, r2
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7ff fdbc 	bl	80068e6 <min>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 8006d72:	887a      	ldrh	r2, [r7, #2]
 8006d74:	88fb      	ldrh	r3, [r7, #6]
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 8006d7e:	883a      	ldrh	r2, [r7, #0]
 8006d80:	88bb      	ldrh	r3, [r7, #4]
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	3301      	adds	r3, #1
 8006d88:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	81fb      	strh	r3, [r7, #14]
 8006d8e:	e00d      	b.n	8006dac <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 8006d90:	88ba      	ldrh	r2, [r7, #4]
 8006d92:	89fb      	ldrh	r3, [r7, #14]
 8006d94:	4413      	add	r3, r2
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	b219      	sxth	r1, r3
 8006d9a:	8c3b      	ldrh	r3, [r7, #32]
 8006d9c:	89ba      	ldrh	r2, [r7, #12]
 8006d9e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006da2:	f7ff fdf7 	bl	8006994 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 8006da6:	89fb      	ldrh	r3, [r7, #14]
 8006da8:	3301      	adds	r3, #1
 8006daa:	81fb      	strh	r3, [r7, #14]
 8006dac:	89fa      	ldrh	r2, [r7, #14]
 8006dae:	897b      	ldrh	r3, [r7, #10]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d3ed      	bcc.n	8006d90 <hagl_fill_rectangle+0x110>
 8006db4:	e002      	b.n	8006dbc <hagl_fill_rectangle+0x13c>
        return;
 8006db6:	bf00      	nop
 8006db8:	e000      	b.n	8006dbc <hagl_fill_rectangle+0x13c>
        return;
 8006dba:	bf00      	nop
#endif
    }
}
 8006dbc:	3714      	adds	r7, #20
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd90      	pop	{r4, r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	2000000c 	.word	0x2000000c

08006dc8 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8006dc8:	b590      	push	{r4, r7, lr}
 8006dca:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8006dd6:	f844 0c24 	str.w	r0, [r4, #-36]
 8006dda:	460c      	mov	r4, r1
 8006ddc:	4610      	mov	r0, r2
 8006dde:	4619      	mov	r1, r3
 8006de0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006de4:	4622      	mov	r2, r4
 8006de6:	f823 2c26 	strh.w	r2, [r3, #-38]
 8006dea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006dee:	4602      	mov	r2, r0
 8006df0:	f823 2c28 	strh.w	r2, [r3, #-40]
 8006df4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006df8:	460a      	mov	r2, r1
 8006dfa:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 8006dfe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006e02:	4619      	mov	r1, r3
 8006e04:	f107 0310 	add.w	r3, r7, #16
 8006e08:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006e0c:	6812      	ldr	r2, [r2, #0]
 8006e0e:	f851 1c24 	ldr.w	r1, [r1, #-36]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7ff fcd5 	bl	80067c2 <fontx_glyph>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006e1e:	f102 0209 	add.w	r2, r2, #9
 8006e22:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 8006e24:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006e28:	f103 0309 	add.w	r3, r3, #9
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <hagl_put_char+0x6e>
        return 0;
 8006e32:	2300      	movs	r3, #0
 8006e34:	e0c0      	b.n	8006fb8 <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 8006e36:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006e3a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8006e3e:	461a      	mov	r2, r3
 8006e40:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006e44:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 8006e48:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006e4c:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8006e50:	461a      	mov	r2, r3
 8006e52:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006e56:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 8006e5a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006e5e:	2210      	movs	r2, #16
 8006e60:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 8006e64:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006e68:	3a08      	subs	r2, #8
 8006e6a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006e6e:	3b18      	subs	r3, #24
 8006e70:	4611      	mov	r1, r2
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7ff fb0d 	bl	8006492 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 8006e78:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006e7c:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8006e80:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006e84:	f102 020c 	add.w	r2, r2, #12
 8006e88:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006e90:	f102 020b 	add.w	r2, r2, #11
 8006e94:	7013      	strb	r3, [r2, #0]
 8006e96:	e071      	b.n	8006f7c <hagl_put_char+0x1b4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8006e98:	2300      	movs	r3, #0
 8006e9a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006e9e:	f102 020a 	add.w	r2, r2, #10
 8006ea2:	7013      	strb	r3, [r2, #0]
 8006ea4:	e047      	b.n	8006f36 <hagl_put_char+0x16e>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 8006ea6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006eaa:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	b25a      	sxtb	r2, r3
 8006eb2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006eb6:	f103 030a 	add.w	r3, r3, #10
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	f003 0307 	and.w	r3, r3, #7
 8006ec0:	2180      	movs	r1, #128	@ 0x80
 8006ec2:	fa41 f303 	asr.w	r3, r1, r3
 8006ec6:	b25b      	sxtb	r3, r3
 8006ec8:	4013      	ands	r3, r2
 8006eca:	b25b      	sxtb	r3, r3
 8006ecc:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006ed0:	f102 0208 	add.w	r2, r2, #8
 8006ed4:	7013      	strb	r3, [r2, #0]
            if (set) {
 8006ed6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006eda:	f103 0308 	add.w	r3, r3, #8
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d010      	beq.n	8006f06 <hagl_put_char+0x13e>
                *(ptr++) = color;
 8006ee4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006ee8:	f103 030c 	add.w	r3, r3, #12
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	1c9a      	adds	r2, r3, #2
 8006ef0:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 8006ef4:	f101 010c 	add.w	r1, r1, #12
 8006ef8:	600a      	str	r2, [r1, #0]
 8006efa:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006efe:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 8006f02:	801a      	strh	r2, [r3, #0]
 8006f04:	e00c      	b.n	8006f20 <hagl_put_char+0x158>
            } else {
                *(ptr++) = 0x0000;
 8006f06:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006f0a:	f103 030c 	add.w	r3, r3, #12
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	1c9a      	adds	r2, r3, #2
 8006f12:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 8006f16:	f101 010c 	add.w	r1, r1, #12
 8006f1a:	600a      	str	r2, [r1, #0]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 8006f20:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006f24:	f103 030a 	add.w	r3, r3, #10
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006f30:	f102 020a 	add.w	r2, r2, #10
 8006f34:	7013      	strb	r3, [r2, #0]
 8006f36:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006f3a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8006f3e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006f42:	f102 020a 	add.w	r2, r2, #10
 8006f46:	7812      	ldrb	r2, [r2, #0]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d3ac      	bcc.n	8006ea6 <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 8006f4c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006f50:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006f54:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006f58:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006f62:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8006f66:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006f6a:	f103 030b 	add.w	r3, r3, #11
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	3301      	adds	r3, #1
 8006f72:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006f76:	f102 020b 	add.w	r2, r2, #11
 8006f7a:	7013      	strb	r3, [r2, #0]
 8006f7c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006f80:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8006f84:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006f88:	f102 020b 	add.w	r2, r2, #11
 8006f8c:	7812      	ldrb	r2, [r2, #0]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d382      	bcc.n	8006e98 <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 8006f92:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006f96:	3b18      	subs	r3, #24
 8006f98:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006f9c:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 8006fa0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006fa4:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 8006fa8:	461a      	mov	r2, r3
 8006faa:	f000 f85a 	bl	8007062 <hagl_blit>

    return bitmap.width;
 8006fae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006fb2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006fb6:	b2db      	uxtb	r3, r3
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd90      	pop	{r4, r7, pc}

08006fc4 <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b08c      	sub	sp, #48	@ 0x30
 8006fc8:	af02      	add	r7, sp, #8
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	4608      	mov	r0, r1
 8006fce:	4611      	mov	r1, r2
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	817b      	strh	r3, [r7, #10]
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	813b      	strh	r3, [r7, #8]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 8006fde:	897b      	ldrh	r3, [r7, #10]
 8006fe0:	84fb      	strh	r3, [r7, #38]	@ 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8006fe2:	f107 0314 	add.w	r3, r7, #20
 8006fe6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7ff fbca 	bl	8006782 <fontx_meta>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (0 != status) {
 8006ff4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d001      	beq.n	8007000 <hagl_put_text+0x3c>
        return 0;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	e02c      	b.n	800705a <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	1d1a      	adds	r2, r3, #4
 8007004:	60fa      	str	r2, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	2b0d      	cmp	r3, #13
 800700e:	d002      	beq.n	8007016 <hagl_put_text+0x52>
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	2b0a      	cmp	r3, #10
 8007014:	d108      	bne.n	8007028 <hagl_put_text+0x64>
            x0 = 0;
 8007016:	2300      	movs	r3, #0
 8007018:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 800701a:	7fbb      	ldrb	r3, [r7, #30]
 800701c:	461a      	mov	r2, r3
 800701e:	893b      	ldrh	r3, [r7, #8]
 8007020:	4413      	add	r3, r2
 8007022:	b29b      	uxth	r3, r3
 8007024:	813b      	strh	r3, [r7, #8]
 8007026:	e010      	b.n	800704a <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 8007028:	88f8      	ldrh	r0, [r7, #6]
 800702a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800702e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8007032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	4603      	mov	r3, r0
 8007038:	6a38      	ldr	r0, [r7, #32]
 800703a:	f7ff fec5 	bl	8006dc8 <hagl_put_char>
 800703e:	4603      	mov	r3, r0
 8007040:	461a      	mov	r2, r3
 8007042:	897b      	ldrh	r3, [r7, #10]
 8007044:	4413      	add	r3, r2
 8007046:	b29b      	uxth	r3, r3
 8007048:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1d6      	bne.n	8007000 <hagl_put_text+0x3c>

    return x0 - original;
 8007052:	897a      	ldrh	r2, [r7, #10]
 8007054:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	b29b      	uxth	r3, r3
}
 800705a:	4618      	mov	r0, r3
 800705c:	3728      	adds	r7, #40	@ 0x28
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 8007062:	b580      	push	{r7, lr}
 8007064:	b086      	sub	sp, #24
 8007066:	af00      	add	r7, sp, #0
 8007068:	4603      	mov	r3, r0
 800706a:	603a      	str	r2, [r7, #0]
 800706c:	80fb      	strh	r3, [r7, #6]
 800706e:	460b      	mov	r3, r1
 8007070:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 8007078:	2300      	movs	r3, #0
 800707a:	827b      	strh	r3, [r7, #18]
 800707c:	e020      	b.n	80070c0 <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 800707e:	2300      	movs	r3, #0
 8007080:	823b      	strh	r3, [r7, #16]
 8007082:	e015      	b.n	80070b0 <hagl_blit+0x4e>
            color = *(ptr++);
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	1c9a      	adds	r2, r3, #2
 8007088:	617a      	str	r2, [r7, #20]
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 800708e:	88fa      	ldrh	r2, [r7, #6]
 8007090:	8a3b      	ldrh	r3, [r7, #16]
 8007092:	4413      	add	r3, r2
 8007094:	b29b      	uxth	r3, r3
 8007096:	b218      	sxth	r0, r3
 8007098:	88ba      	ldrh	r2, [r7, #4]
 800709a:	8a7b      	ldrh	r3, [r7, #18]
 800709c:	4413      	add	r3, r2
 800709e:	b29b      	uxth	r3, r3
 80070a0:	b21b      	sxth	r3, r3
 80070a2:	89fa      	ldrh	r2, [r7, #14]
 80070a4:	4619      	mov	r1, r3
 80070a6:	f7ff fc43 	bl	8006930 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 80070aa:	8a3b      	ldrh	r3, [r7, #16]
 80070ac:	3301      	adds	r3, #1
 80070ae:	823b      	strh	r3, [r7, #16]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	8a3a      	ldrh	r2, [r7, #16]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d3e4      	bcc.n	8007084 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 80070ba:	8a7b      	ldrh	r3, [r7, #18]
 80070bc:	3301      	adds	r3, #1
 80070be:	827b      	strh	r3, [r7, #18]
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	885b      	ldrh	r3, [r3, #2]
 80070c4:	8a7a      	ldrh	r2, [r7, #18]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d3d9      	bcc.n	800707e <hagl_blit+0x1c>
        }
    }
#endif
};
 80070ca:	bf00      	nop
 80070cc:	bf00      	nop
 80070ce:	3718      	adds	r7, #24
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <hagl_draw_rounded_rectangle>:
void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
    hagl_fill_polygon(3, vertices, color);
}

void hagl_draw_rounded_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t r, color_t color) {
 80070d4:	b590      	push	{r4, r7, lr}
 80070d6:	b087      	sub	sp, #28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	4604      	mov	r4, r0
 80070dc:	4608      	mov	r0, r1
 80070de:	4611      	mov	r1, r2
 80070e0:	461a      	mov	r2, r3
 80070e2:	4623      	mov	r3, r4
 80070e4:	80fb      	strh	r3, [r7, #6]
 80070e6:	4603      	mov	r3, r0
 80070e8:	80bb      	strh	r3, [r7, #4]
 80070ea:	460b      	mov	r3, r1
 80070ec:	807b      	strh	r3, [r7, #2]
 80070ee:	4613      	mov	r3, r2
 80070f0:	803b      	strh	r3, [r7, #0]

    uint16_t width, height;
    int16_t x, y, d;

    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 80070f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80070f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	dd0e      	ble.n	800711c <hagl_draw_rounded_rectangle+0x48>
        x0 = x0 + x1;
 80070fe:	88fa      	ldrh	r2, [r7, #6]
 8007100:	887b      	ldrh	r3, [r7, #2]
 8007102:	4413      	add	r3, r2
 8007104:	b29b      	uxth	r3, r3
 8007106:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8007108:	88fa      	ldrh	r2, [r7, #6]
 800710a:	887b      	ldrh	r3, [r7, #2]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	b29b      	uxth	r3, r3
 8007110:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8007112:	88fa      	ldrh	r2, [r7, #6]
 8007114:	887b      	ldrh	r3, [r7, #2]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	b29b      	uxth	r3, r3
 800711a:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 800711c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007120:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007124:	429a      	cmp	r2, r3
 8007126:	dd0e      	ble.n	8007146 <hagl_draw_rounded_rectangle+0x72>
        y0 = y0 + y1;
 8007128:	88ba      	ldrh	r2, [r7, #4]
 800712a:	883b      	ldrh	r3, [r7, #0]
 800712c:	4413      	add	r3, r2
 800712e:	b29b      	uxth	r3, r3
 8007130:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8007132:	88ba      	ldrh	r2, [r7, #4]
 8007134:	883b      	ldrh	r3, [r7, #0]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	b29b      	uxth	r3, r3
 800713a:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 800713c:	88ba      	ldrh	r2, [r7, #4]
 800713e:	883b      	ldrh	r3, [r7, #0]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	b29b      	uxth	r3, r3
 8007144:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8007146:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800714a:	4a52      	ldr	r2, [pc, #328]	@ (8007294 <hagl_draw_rounded_rectangle+0x1c0>)
 800714c:	8812      	ldrh	r2, [r2, #0]
 800714e:	4293      	cmp	r3, r2
 8007150:	f2c0 8153 	blt.w	80073fa <hagl_draw_rounded_rectangle+0x326>
 8007154:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007158:	4a4e      	ldr	r2, [pc, #312]	@ (8007294 <hagl_draw_rounded_rectangle+0x1c0>)
 800715a:	8852      	ldrh	r2, [r2, #2]
 800715c:	4293      	cmp	r3, r2
 800715e:	f2c0 814c 	blt.w	80073fa <hagl_draw_rounded_rectangle+0x326>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8007162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007166:	4a4b      	ldr	r2, [pc, #300]	@ (8007294 <hagl_draw_rounded_rectangle+0x1c0>)
 8007168:	8892      	ldrh	r2, [r2, #4]
 800716a:	4293      	cmp	r3, r2
 800716c:	f300 8147 	bgt.w	80073fe <hagl_draw_rounded_rectangle+0x32a>
 8007170:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007174:	4a47      	ldr	r2, [pc, #284]	@ (8007294 <hagl_draw_rounded_rectangle+0x1c0>)
 8007176:	88d2      	ldrh	r2, [r2, #6]
 8007178:	4293      	cmp	r3, r2
 800717a:	f300 8140 	bgt.w	80073fe <hagl_draw_rounded_rectangle+0x32a>
        return;
    }

    /* Max radius is half of shortest edge. */
    width = x1 - x0 + 1;
 800717e:	887a      	ldrh	r2, [r7, #2]
 8007180:	88fb      	ldrh	r3, [r7, #6]
 8007182:	1ad3      	subs	r3, r2, r3
 8007184:	b29b      	uxth	r3, r3
 8007186:	3301      	adds	r3, #1
 8007188:	823b      	strh	r3, [r7, #16]
    height = y1 - y0 + 1;
 800718a:	883a      	ldrh	r2, [r7, #0]
 800718c:	88bb      	ldrh	r3, [r7, #4]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	b29b      	uxth	r3, r3
 8007192:	3301      	adds	r3, #1
 8007194:	81fb      	strh	r3, [r7, #14]
    r = min(r, min(width / 2, height / 2));
 8007196:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	@ 0x28
 800719a:	8a3b      	ldrh	r3, [r7, #16]
 800719c:	085b      	lsrs	r3, r3, #1
 800719e:	b29b      	uxth	r3, r3
 80071a0:	461a      	mov	r2, r3
 80071a2:	89fb      	ldrh	r3, [r7, #14]
 80071a4:	085b      	lsrs	r3, r3, #1
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	4619      	mov	r1, r3
 80071aa:	4610      	mov	r0, r2
 80071ac:	f7ff fb9b 	bl	80068e6 <min>
 80071b0:	4603      	mov	r3, r0
 80071b2:	4619      	mov	r1, r3
 80071b4:	4620      	mov	r0, r4
 80071b6:	f7ff fb96 	bl	80068e6 <min>
 80071ba:	4603      	mov	r3, r0
 80071bc:	853b      	strh	r3, [r7, #40]	@ 0x28

    hagl_draw_hline(x0 + r, y0, width - 2 * r, color);
 80071be:	88fa      	ldrh	r2, [r7, #6]
 80071c0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80071c2:	4413      	add	r3, r2
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	b218      	sxth	r0, r3
 80071c8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80071ca:	005b      	lsls	r3, r3, #1
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	8a3a      	ldrh	r2, [r7, #16]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80071d6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80071da:	f7ff fbdb 	bl	8006994 <hagl_draw_hline>
    hagl_draw_hline(x0 + r, y1, width - 2 * r, color);
 80071de:	88fa      	ldrh	r2, [r7, #6]
 80071e0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80071e2:	4413      	add	r3, r2
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	b218      	sxth	r0, r3
 80071e8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80071ea:	005b      	lsls	r3, r3, #1
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	8a3a      	ldrh	r2, [r7, #16]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80071f6:	f9b7 1000 	ldrsh.w	r1, [r7]
 80071fa:	f7ff fbcb 	bl	8006994 <hagl_draw_hline>
    hagl_draw_vline(x0, y0 + r, height - 2 * r, color);
 80071fe:	88ba      	ldrh	r2, [r7, #4]
 8007200:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007202:	4413      	add	r3, r2
 8007204:	b29b      	uxth	r3, r3
 8007206:	b219      	sxth	r1, r3
 8007208:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800720a:	005b      	lsls	r3, r3, #1
 800720c:	b29b      	uxth	r3, r3
 800720e:	89fa      	ldrh	r2, [r7, #14]
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	b29a      	uxth	r2, r3
 8007214:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007216:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800721a:	f7ff fbde 	bl	80069da <hagl_draw_vline>
    hagl_draw_vline(x1, y0 + r, height - 2 * r, color);
 800721e:	88ba      	ldrh	r2, [r7, #4]
 8007220:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007222:	4413      	add	r3, r2
 8007224:	b29b      	uxth	r3, r3
 8007226:	b219      	sxth	r1, r3
 8007228:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800722a:	005b      	lsls	r3, r3, #1
 800722c:	b29b      	uxth	r3, r3
 800722e:	89fa      	ldrh	r2, [r7, #14]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	b29a      	uxth	r2, r3
 8007234:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007236:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800723a:	f7ff fbce 	bl	80069da <hagl_draw_vline>

    x = 0;
 800723e:	2300      	movs	r3, #0
 8007240:	82fb      	strh	r3, [r7, #22]
    y = r;
 8007242:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007244:	82bb      	strh	r3, [r7, #20]
    d = 3 - 2 * r;
 8007246:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007248:	005b      	lsls	r3, r3, #1
 800724a:	b29b      	uxth	r3, r3
 800724c:	f1c3 0303 	rsb	r3, r3, #3
 8007250:	b29b      	uxth	r3, r3
 8007252:	827b      	strh	r3, [r7, #18]

    while (y >= x) {
 8007254:	e0c9      	b.n	80073ea <hagl_draw_rounded_rectangle+0x316>
        x++;
 8007256:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800725a:	b29b      	uxth	r3, r3
 800725c:	3301      	adds	r3, #1
 800725e:	b29b      	uxth	r3, r3
 8007260:	82fb      	strh	r3, [r7, #22]

        if (d > 0) {
 8007262:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007266:	2b00      	cmp	r3, #0
 8007268:	dd16      	ble.n	8007298 <hagl_draw_rounded_rectangle+0x1c4>
            y--;
 800726a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800726e:	b29b      	uxth	r3, r3
 8007270:	3b01      	subs	r3, #1
 8007272:	b29b      	uxth	r3, r3
 8007274:	82bb      	strh	r3, [r7, #20]
            d = d + 4 * (x - y) + 10;
 8007276:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800727a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	b29b      	uxth	r3, r3
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	b29a      	uxth	r2, r3
 8007286:	8a7b      	ldrh	r3, [r7, #18]
 8007288:	4413      	add	r3, r2
 800728a:	b29b      	uxth	r3, r3
 800728c:	330a      	adds	r3, #10
 800728e:	b29b      	uxth	r3, r3
 8007290:	827b      	strh	r3, [r7, #18]
 8007292:	e00a      	b.n	80072aa <hagl_draw_rounded_rectangle+0x1d6>
 8007294:	2000000c 	.word	0x2000000c
        } else {
            d = d + 4 * x + 6;
 8007298:	8afb      	ldrh	r3, [r7, #22]
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	b29a      	uxth	r2, r3
 800729e:	8a7b      	ldrh	r3, [r7, #18]
 80072a0:	4413      	add	r3, r2
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	3306      	adds	r3, #6
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	827b      	strh	r3, [r7, #18]
        }

        /* Top right */
        hagl_put_pixel(x1 - r + x, y0 + r - y, color);
 80072aa:	887a      	ldrh	r2, [r7, #2]
 80072ac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	8afb      	ldrh	r3, [r7, #22]
 80072b4:	4413      	add	r3, r2
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	b218      	sxth	r0, r3
 80072ba:	88ba      	ldrh	r2, [r7, #4]
 80072bc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80072be:	4413      	add	r3, r2
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	8abb      	ldrh	r3, [r7, #20]
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	b21b      	sxth	r3, r3
 80072ca:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80072cc:	4619      	mov	r1, r3
 80072ce:	f7ff fb2f 	bl	8006930 <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y0 + r - x, color);
 80072d2:	887a      	ldrh	r2, [r7, #2]
 80072d4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	b29a      	uxth	r2, r3
 80072da:	8abb      	ldrh	r3, [r7, #20]
 80072dc:	4413      	add	r3, r2
 80072de:	b29b      	uxth	r3, r3
 80072e0:	b218      	sxth	r0, r3
 80072e2:	88ba      	ldrh	r2, [r7, #4]
 80072e4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80072e6:	4413      	add	r3, r2
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	8afb      	ldrh	r3, [r7, #22]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	b21b      	sxth	r3, r3
 80072f2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80072f4:	4619      	mov	r1, r3
 80072f6:	f7ff fb1b 	bl	8006930 <hagl_put_pixel>

        /* Top left */
        hagl_put_pixel(x0 + r - x, y0 + r - y, color);
 80072fa:	88fa      	ldrh	r2, [r7, #6]
 80072fc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80072fe:	4413      	add	r3, r2
 8007300:	b29a      	uxth	r2, r3
 8007302:	8afb      	ldrh	r3, [r7, #22]
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	b29b      	uxth	r3, r3
 8007308:	b218      	sxth	r0, r3
 800730a:	88ba      	ldrh	r2, [r7, #4]
 800730c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800730e:	4413      	add	r3, r2
 8007310:	b29a      	uxth	r2, r3
 8007312:	8abb      	ldrh	r3, [r7, #20]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	b29b      	uxth	r3, r3
 8007318:	b21b      	sxth	r3, r3
 800731a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800731c:	4619      	mov	r1, r3
 800731e:	f7ff fb07 	bl	8006930 <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y0 + r - x, color);
 8007322:	88fa      	ldrh	r2, [r7, #6]
 8007324:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007326:	4413      	add	r3, r2
 8007328:	b29a      	uxth	r2, r3
 800732a:	8abb      	ldrh	r3, [r7, #20]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	b29b      	uxth	r3, r3
 8007330:	b218      	sxth	r0, r3
 8007332:	88ba      	ldrh	r2, [r7, #4]
 8007334:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007336:	4413      	add	r3, r2
 8007338:	b29a      	uxth	r2, r3
 800733a:	8afb      	ldrh	r3, [r7, #22]
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	b29b      	uxth	r3, r3
 8007340:	b21b      	sxth	r3, r3
 8007342:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007344:	4619      	mov	r1, r3
 8007346:	f7ff faf3 	bl	8006930 <hagl_put_pixel>

        /* Bottom right */
        hagl_put_pixel(x1 - r + x, y1 - r + y, color);
 800734a:	887a      	ldrh	r2, [r7, #2]
 800734c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	b29a      	uxth	r2, r3
 8007352:	8afb      	ldrh	r3, [r7, #22]
 8007354:	4413      	add	r3, r2
 8007356:	b29b      	uxth	r3, r3
 8007358:	b218      	sxth	r0, r3
 800735a:	883a      	ldrh	r2, [r7, #0]
 800735c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	b29a      	uxth	r2, r3
 8007362:	8abb      	ldrh	r3, [r7, #20]
 8007364:	4413      	add	r3, r2
 8007366:	b29b      	uxth	r3, r3
 8007368:	b21b      	sxth	r3, r3
 800736a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800736c:	4619      	mov	r1, r3
 800736e:	f7ff fadf 	bl	8006930 <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y1 - r + x, color);
 8007372:	887a      	ldrh	r2, [r7, #2]
 8007374:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	b29a      	uxth	r2, r3
 800737a:	8abb      	ldrh	r3, [r7, #20]
 800737c:	4413      	add	r3, r2
 800737e:	b29b      	uxth	r3, r3
 8007380:	b218      	sxth	r0, r3
 8007382:	883a      	ldrh	r2, [r7, #0]
 8007384:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	b29a      	uxth	r2, r3
 800738a:	8afb      	ldrh	r3, [r7, #22]
 800738c:	4413      	add	r3, r2
 800738e:	b29b      	uxth	r3, r3
 8007390:	b21b      	sxth	r3, r3
 8007392:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007394:	4619      	mov	r1, r3
 8007396:	f7ff facb 	bl	8006930 <hagl_put_pixel>

        /* Bottom left */
        hagl_put_pixel(x0 + r - x, y1 - r + y, color);
 800739a:	88fa      	ldrh	r2, [r7, #6]
 800739c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800739e:	4413      	add	r3, r2
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	8afb      	ldrh	r3, [r7, #22]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	b218      	sxth	r0, r3
 80073aa:	883a      	ldrh	r2, [r7, #0]
 80073ac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	8abb      	ldrh	r3, [r7, #20]
 80073b4:	4413      	add	r3, r2
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	b21b      	sxth	r3, r3
 80073ba:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80073bc:	4619      	mov	r1, r3
 80073be:	f7ff fab7 	bl	8006930 <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y1 - r + x, color);
 80073c2:	88fa      	ldrh	r2, [r7, #6]
 80073c4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80073c6:	4413      	add	r3, r2
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	8abb      	ldrh	r3, [r7, #20]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	b218      	sxth	r0, r3
 80073d2:	883a      	ldrh	r2, [r7, #0]
 80073d4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	b29a      	uxth	r2, r3
 80073da:	8afb      	ldrh	r3, [r7, #22]
 80073dc:	4413      	add	r3, r2
 80073de:	b29b      	uxth	r3, r3
 80073e0:	b21b      	sxth	r3, r3
 80073e2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80073e4:	4619      	mov	r1, r3
 80073e6:	f7ff faa3 	bl	8006930 <hagl_put_pixel>
    while (y >= x) {
 80073ea:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80073ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	f6bf af2f 	bge.w	8007256 <hagl_draw_rounded_rectangle+0x182>
 80073f8:	e002      	b.n	8007400 <hagl_draw_rounded_rectangle+0x32c>
        return;
 80073fa:	bf00      	nop
 80073fc:	e000      	b.n	8007400 <hagl_draw_rounded_rectangle+0x32c>
        return;
 80073fe:	bf00      	nop
    }
};
 8007400:	371c      	adds	r7, #28
 8007402:	46bd      	mov	sp, r7
 8007404:	bd90      	pop	{r4, r7, pc}
 8007406:	bf00      	nop

08007408 <rgb565>:
#include <stdint.h>

#include "rgb565.h"

uint16_t rgb565(uint8_t r, uint8_t g, uint8_t b)
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	4603      	mov	r3, r0
 8007410:	71fb      	strb	r3, [r7, #7]
 8007412:	460b      	mov	r3, r1
 8007414:	71bb      	strb	r3, [r7, #6]
 8007416:	4613      	mov	r3, r2
 8007418:	717b      	strb	r3, [r7, #5]
    uint16_t rgb;

    rgb = ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
 800741a:	79fb      	ldrb	r3, [r7, #7]
 800741c:	021b      	lsls	r3, r3, #8
 800741e:	b21b      	sxth	r3, r3
 8007420:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007424:	f023 0307 	bic.w	r3, r3, #7
 8007428:	b21a      	sxth	r2, r3
 800742a:	79bb      	ldrb	r3, [r7, #6]
 800742c:	00db      	lsls	r3, r3, #3
 800742e:	b21b      	sxth	r3, r3
 8007430:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8007434:	b21b      	sxth	r3, r3
 8007436:	4313      	orrs	r3, r2
 8007438:	b21a      	sxth	r2, r3
 800743a:	797b      	ldrb	r3, [r7, #5]
 800743c:	08db      	lsrs	r3, r3, #3
 800743e:	b2db      	uxtb	r3, r3
 8007440:	b21b      	sxth	r3, r3
 8007442:	4313      	orrs	r3, r2
 8007444:	b21b      	sxth	r3, r3
 8007446:	81fb      	strh	r3, [r7, #14]
    rgb = (((rgb) << 8) & 0xFF00) | (((rgb) >> 8) & 0xFF);
 8007448:	89fb      	ldrh	r3, [r7, #14]
 800744a:	021b      	lsls	r3, r3, #8
 800744c:	b21a      	sxth	r2, r3
 800744e:	89fb      	ldrh	r3, [r7, #14]
 8007450:	0a1b      	lsrs	r3, r3, #8
 8007452:	b29b      	uxth	r3, r3
 8007454:	b21b      	sxth	r3, r3
 8007456:	4313      	orrs	r3, r2
 8007458:	b21b      	sxth	r3, r3
 800745a:	81fb      	strh	r3, [r7, #14]

    return rgb;
 800745c:	89fb      	ldrh	r3, [r7, #14]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
	...

0800746c <__sflush_r>:
 800746c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007474:	0716      	lsls	r6, r2, #28
 8007476:	4605      	mov	r5, r0
 8007478:	460c      	mov	r4, r1
 800747a:	d454      	bmi.n	8007526 <__sflush_r+0xba>
 800747c:	684b      	ldr	r3, [r1, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	dc02      	bgt.n	8007488 <__sflush_r+0x1c>
 8007482:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007484:	2b00      	cmp	r3, #0
 8007486:	dd48      	ble.n	800751a <__sflush_r+0xae>
 8007488:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800748a:	2e00      	cmp	r6, #0
 800748c:	d045      	beq.n	800751a <__sflush_r+0xae>
 800748e:	2300      	movs	r3, #0
 8007490:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007494:	682f      	ldr	r7, [r5, #0]
 8007496:	6a21      	ldr	r1, [r4, #32]
 8007498:	602b      	str	r3, [r5, #0]
 800749a:	d030      	beq.n	80074fe <__sflush_r+0x92>
 800749c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800749e:	89a3      	ldrh	r3, [r4, #12]
 80074a0:	0759      	lsls	r1, r3, #29
 80074a2:	d505      	bpl.n	80074b0 <__sflush_r+0x44>
 80074a4:	6863      	ldr	r3, [r4, #4]
 80074a6:	1ad2      	subs	r2, r2, r3
 80074a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80074aa:	b10b      	cbz	r3, 80074b0 <__sflush_r+0x44>
 80074ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80074ae:	1ad2      	subs	r2, r2, r3
 80074b0:	2300      	movs	r3, #0
 80074b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074b4:	6a21      	ldr	r1, [r4, #32]
 80074b6:	4628      	mov	r0, r5
 80074b8:	47b0      	blx	r6
 80074ba:	1c43      	adds	r3, r0, #1
 80074bc:	89a3      	ldrh	r3, [r4, #12]
 80074be:	d106      	bne.n	80074ce <__sflush_r+0x62>
 80074c0:	6829      	ldr	r1, [r5, #0]
 80074c2:	291d      	cmp	r1, #29
 80074c4:	d82b      	bhi.n	800751e <__sflush_r+0xb2>
 80074c6:	4a2a      	ldr	r2, [pc, #168]	@ (8007570 <__sflush_r+0x104>)
 80074c8:	410a      	asrs	r2, r1
 80074ca:	07d6      	lsls	r6, r2, #31
 80074cc:	d427      	bmi.n	800751e <__sflush_r+0xb2>
 80074ce:	2200      	movs	r2, #0
 80074d0:	6062      	str	r2, [r4, #4]
 80074d2:	04d9      	lsls	r1, r3, #19
 80074d4:	6922      	ldr	r2, [r4, #16]
 80074d6:	6022      	str	r2, [r4, #0]
 80074d8:	d504      	bpl.n	80074e4 <__sflush_r+0x78>
 80074da:	1c42      	adds	r2, r0, #1
 80074dc:	d101      	bne.n	80074e2 <__sflush_r+0x76>
 80074de:	682b      	ldr	r3, [r5, #0]
 80074e0:	b903      	cbnz	r3, 80074e4 <__sflush_r+0x78>
 80074e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80074e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074e6:	602f      	str	r7, [r5, #0]
 80074e8:	b1b9      	cbz	r1, 800751a <__sflush_r+0xae>
 80074ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074ee:	4299      	cmp	r1, r3
 80074f0:	d002      	beq.n	80074f8 <__sflush_r+0x8c>
 80074f2:	4628      	mov	r0, r5
 80074f4:	f000 fa08 	bl	8007908 <_free_r>
 80074f8:	2300      	movs	r3, #0
 80074fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80074fc:	e00d      	b.n	800751a <__sflush_r+0xae>
 80074fe:	2301      	movs	r3, #1
 8007500:	4628      	mov	r0, r5
 8007502:	47b0      	blx	r6
 8007504:	4602      	mov	r2, r0
 8007506:	1c50      	adds	r0, r2, #1
 8007508:	d1c9      	bne.n	800749e <__sflush_r+0x32>
 800750a:	682b      	ldr	r3, [r5, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d0c6      	beq.n	800749e <__sflush_r+0x32>
 8007510:	2b1d      	cmp	r3, #29
 8007512:	d001      	beq.n	8007518 <__sflush_r+0xac>
 8007514:	2b16      	cmp	r3, #22
 8007516:	d11e      	bne.n	8007556 <__sflush_r+0xea>
 8007518:	602f      	str	r7, [r5, #0]
 800751a:	2000      	movs	r0, #0
 800751c:	e022      	b.n	8007564 <__sflush_r+0xf8>
 800751e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007522:	b21b      	sxth	r3, r3
 8007524:	e01b      	b.n	800755e <__sflush_r+0xf2>
 8007526:	690f      	ldr	r7, [r1, #16]
 8007528:	2f00      	cmp	r7, #0
 800752a:	d0f6      	beq.n	800751a <__sflush_r+0xae>
 800752c:	0793      	lsls	r3, r2, #30
 800752e:	680e      	ldr	r6, [r1, #0]
 8007530:	bf08      	it	eq
 8007532:	694b      	ldreq	r3, [r1, #20]
 8007534:	600f      	str	r7, [r1, #0]
 8007536:	bf18      	it	ne
 8007538:	2300      	movne	r3, #0
 800753a:	eba6 0807 	sub.w	r8, r6, r7
 800753e:	608b      	str	r3, [r1, #8]
 8007540:	f1b8 0f00 	cmp.w	r8, #0
 8007544:	dde9      	ble.n	800751a <__sflush_r+0xae>
 8007546:	6a21      	ldr	r1, [r4, #32]
 8007548:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800754a:	4643      	mov	r3, r8
 800754c:	463a      	mov	r2, r7
 800754e:	4628      	mov	r0, r5
 8007550:	47b0      	blx	r6
 8007552:	2800      	cmp	r0, #0
 8007554:	dc08      	bgt.n	8007568 <__sflush_r+0xfc>
 8007556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800755a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800755e:	81a3      	strh	r3, [r4, #12]
 8007560:	f04f 30ff 	mov.w	r0, #4294967295
 8007564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007568:	4407      	add	r7, r0
 800756a:	eba8 0800 	sub.w	r8, r8, r0
 800756e:	e7e7      	b.n	8007540 <__sflush_r+0xd4>
 8007570:	dfbffffe 	.word	0xdfbffffe

08007574 <_fflush_r>:
 8007574:	b538      	push	{r3, r4, r5, lr}
 8007576:	690b      	ldr	r3, [r1, #16]
 8007578:	4605      	mov	r5, r0
 800757a:	460c      	mov	r4, r1
 800757c:	b913      	cbnz	r3, 8007584 <_fflush_r+0x10>
 800757e:	2500      	movs	r5, #0
 8007580:	4628      	mov	r0, r5
 8007582:	bd38      	pop	{r3, r4, r5, pc}
 8007584:	b118      	cbz	r0, 800758e <_fflush_r+0x1a>
 8007586:	6a03      	ldr	r3, [r0, #32]
 8007588:	b90b      	cbnz	r3, 800758e <_fflush_r+0x1a>
 800758a:	f000 f8a7 	bl	80076dc <__sinit>
 800758e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d0f3      	beq.n	800757e <_fflush_r+0xa>
 8007596:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007598:	07d0      	lsls	r0, r2, #31
 800759a:	d404      	bmi.n	80075a6 <_fflush_r+0x32>
 800759c:	0599      	lsls	r1, r3, #22
 800759e:	d402      	bmi.n	80075a6 <_fflush_r+0x32>
 80075a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075a2:	f000 f9a0 	bl	80078e6 <__retarget_lock_acquire_recursive>
 80075a6:	4628      	mov	r0, r5
 80075a8:	4621      	mov	r1, r4
 80075aa:	f7ff ff5f 	bl	800746c <__sflush_r>
 80075ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075b0:	07da      	lsls	r2, r3, #31
 80075b2:	4605      	mov	r5, r0
 80075b4:	d4e4      	bmi.n	8007580 <_fflush_r+0xc>
 80075b6:	89a3      	ldrh	r3, [r4, #12]
 80075b8:	059b      	lsls	r3, r3, #22
 80075ba:	d4e1      	bmi.n	8007580 <_fflush_r+0xc>
 80075bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075be:	f000 f993 	bl	80078e8 <__retarget_lock_release_recursive>
 80075c2:	e7dd      	b.n	8007580 <_fflush_r+0xc>

080075c4 <std>:
 80075c4:	2300      	movs	r3, #0
 80075c6:	b510      	push	{r4, lr}
 80075c8:	4604      	mov	r4, r0
 80075ca:	e9c0 3300 	strd	r3, r3, [r0]
 80075ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075d2:	6083      	str	r3, [r0, #8]
 80075d4:	8181      	strh	r1, [r0, #12]
 80075d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80075d8:	81c2      	strh	r2, [r0, #14]
 80075da:	6183      	str	r3, [r0, #24]
 80075dc:	4619      	mov	r1, r3
 80075de:	2208      	movs	r2, #8
 80075e0:	305c      	adds	r0, #92	@ 0x5c
 80075e2:	f000 f906 	bl	80077f2 <memset>
 80075e6:	4b0d      	ldr	r3, [pc, #52]	@ (800761c <std+0x58>)
 80075e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80075ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007620 <std+0x5c>)
 80075ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80075ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007624 <std+0x60>)
 80075f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80075f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007628 <std+0x64>)
 80075f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80075f6:	4b0d      	ldr	r3, [pc, #52]	@ (800762c <std+0x68>)
 80075f8:	6224      	str	r4, [r4, #32]
 80075fa:	429c      	cmp	r4, r3
 80075fc:	d006      	beq.n	800760c <std+0x48>
 80075fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007602:	4294      	cmp	r4, r2
 8007604:	d002      	beq.n	800760c <std+0x48>
 8007606:	33d0      	adds	r3, #208	@ 0xd0
 8007608:	429c      	cmp	r4, r3
 800760a:	d105      	bne.n	8007618 <std+0x54>
 800760c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007614:	f000 b966 	b.w	80078e4 <__retarget_lock_init_recursive>
 8007618:	bd10      	pop	{r4, pc}
 800761a:	bf00      	nop
 800761c:	0800776d 	.word	0x0800776d
 8007620:	0800778f 	.word	0x0800778f
 8007624:	080077c7 	.word	0x080077c7
 8007628:	080077eb 	.word	0x080077eb
 800762c:	2000a27c 	.word	0x2000a27c

08007630 <stdio_exit_handler>:
 8007630:	4a02      	ldr	r2, [pc, #8]	@ (800763c <stdio_exit_handler+0xc>)
 8007632:	4903      	ldr	r1, [pc, #12]	@ (8007640 <stdio_exit_handler+0x10>)
 8007634:	4803      	ldr	r0, [pc, #12]	@ (8007644 <stdio_exit_handler+0x14>)
 8007636:	f000 b869 	b.w	800770c <_fwalk_sglue>
 800763a:	bf00      	nop
 800763c:	20000014 	.word	0x20000014
 8007640:	08007575 	.word	0x08007575
 8007644:	20000024 	.word	0x20000024

08007648 <cleanup_stdio>:
 8007648:	6841      	ldr	r1, [r0, #4]
 800764a:	4b0c      	ldr	r3, [pc, #48]	@ (800767c <cleanup_stdio+0x34>)
 800764c:	4299      	cmp	r1, r3
 800764e:	b510      	push	{r4, lr}
 8007650:	4604      	mov	r4, r0
 8007652:	d001      	beq.n	8007658 <cleanup_stdio+0x10>
 8007654:	f7ff ff8e 	bl	8007574 <_fflush_r>
 8007658:	68a1      	ldr	r1, [r4, #8]
 800765a:	4b09      	ldr	r3, [pc, #36]	@ (8007680 <cleanup_stdio+0x38>)
 800765c:	4299      	cmp	r1, r3
 800765e:	d002      	beq.n	8007666 <cleanup_stdio+0x1e>
 8007660:	4620      	mov	r0, r4
 8007662:	f7ff ff87 	bl	8007574 <_fflush_r>
 8007666:	68e1      	ldr	r1, [r4, #12]
 8007668:	4b06      	ldr	r3, [pc, #24]	@ (8007684 <cleanup_stdio+0x3c>)
 800766a:	4299      	cmp	r1, r3
 800766c:	d004      	beq.n	8007678 <cleanup_stdio+0x30>
 800766e:	4620      	mov	r0, r4
 8007670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007674:	f7ff bf7e 	b.w	8007574 <_fflush_r>
 8007678:	bd10      	pop	{r4, pc}
 800767a:	bf00      	nop
 800767c:	2000a27c 	.word	0x2000a27c
 8007680:	2000a2e4 	.word	0x2000a2e4
 8007684:	2000a34c 	.word	0x2000a34c

08007688 <global_stdio_init.part.0>:
 8007688:	b510      	push	{r4, lr}
 800768a:	4b0b      	ldr	r3, [pc, #44]	@ (80076b8 <global_stdio_init.part.0+0x30>)
 800768c:	4c0b      	ldr	r4, [pc, #44]	@ (80076bc <global_stdio_init.part.0+0x34>)
 800768e:	4a0c      	ldr	r2, [pc, #48]	@ (80076c0 <global_stdio_init.part.0+0x38>)
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	4620      	mov	r0, r4
 8007694:	2200      	movs	r2, #0
 8007696:	2104      	movs	r1, #4
 8007698:	f7ff ff94 	bl	80075c4 <std>
 800769c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80076a0:	2201      	movs	r2, #1
 80076a2:	2109      	movs	r1, #9
 80076a4:	f7ff ff8e 	bl	80075c4 <std>
 80076a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80076ac:	2202      	movs	r2, #2
 80076ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076b2:	2112      	movs	r1, #18
 80076b4:	f7ff bf86 	b.w	80075c4 <std>
 80076b8:	2000a3b4 	.word	0x2000a3b4
 80076bc:	2000a27c 	.word	0x2000a27c
 80076c0:	08007631 	.word	0x08007631

080076c4 <__sfp_lock_acquire>:
 80076c4:	4801      	ldr	r0, [pc, #4]	@ (80076cc <__sfp_lock_acquire+0x8>)
 80076c6:	f000 b90e 	b.w	80078e6 <__retarget_lock_acquire_recursive>
 80076ca:	bf00      	nop
 80076cc:	2000a3bd 	.word	0x2000a3bd

080076d0 <__sfp_lock_release>:
 80076d0:	4801      	ldr	r0, [pc, #4]	@ (80076d8 <__sfp_lock_release+0x8>)
 80076d2:	f000 b909 	b.w	80078e8 <__retarget_lock_release_recursive>
 80076d6:	bf00      	nop
 80076d8:	2000a3bd 	.word	0x2000a3bd

080076dc <__sinit>:
 80076dc:	b510      	push	{r4, lr}
 80076de:	4604      	mov	r4, r0
 80076e0:	f7ff fff0 	bl	80076c4 <__sfp_lock_acquire>
 80076e4:	6a23      	ldr	r3, [r4, #32]
 80076e6:	b11b      	cbz	r3, 80076f0 <__sinit+0x14>
 80076e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076ec:	f7ff bff0 	b.w	80076d0 <__sfp_lock_release>
 80076f0:	4b04      	ldr	r3, [pc, #16]	@ (8007704 <__sinit+0x28>)
 80076f2:	6223      	str	r3, [r4, #32]
 80076f4:	4b04      	ldr	r3, [pc, #16]	@ (8007708 <__sinit+0x2c>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d1f5      	bne.n	80076e8 <__sinit+0xc>
 80076fc:	f7ff ffc4 	bl	8007688 <global_stdio_init.part.0>
 8007700:	e7f2      	b.n	80076e8 <__sinit+0xc>
 8007702:	bf00      	nop
 8007704:	08007649 	.word	0x08007649
 8007708:	2000a3b4 	.word	0x2000a3b4

0800770c <_fwalk_sglue>:
 800770c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007710:	4607      	mov	r7, r0
 8007712:	4688      	mov	r8, r1
 8007714:	4614      	mov	r4, r2
 8007716:	2600      	movs	r6, #0
 8007718:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800771c:	f1b9 0901 	subs.w	r9, r9, #1
 8007720:	d505      	bpl.n	800772e <_fwalk_sglue+0x22>
 8007722:	6824      	ldr	r4, [r4, #0]
 8007724:	2c00      	cmp	r4, #0
 8007726:	d1f7      	bne.n	8007718 <_fwalk_sglue+0xc>
 8007728:	4630      	mov	r0, r6
 800772a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800772e:	89ab      	ldrh	r3, [r5, #12]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d907      	bls.n	8007744 <_fwalk_sglue+0x38>
 8007734:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007738:	3301      	adds	r3, #1
 800773a:	d003      	beq.n	8007744 <_fwalk_sglue+0x38>
 800773c:	4629      	mov	r1, r5
 800773e:	4638      	mov	r0, r7
 8007740:	47c0      	blx	r8
 8007742:	4306      	orrs	r6, r0
 8007744:	3568      	adds	r5, #104	@ 0x68
 8007746:	e7e9      	b.n	800771c <_fwalk_sglue+0x10>

08007748 <iprintf>:
 8007748:	b40f      	push	{r0, r1, r2, r3}
 800774a:	b507      	push	{r0, r1, r2, lr}
 800774c:	4906      	ldr	r1, [pc, #24]	@ (8007768 <iprintf+0x20>)
 800774e:	ab04      	add	r3, sp, #16
 8007750:	6808      	ldr	r0, [r1, #0]
 8007752:	f853 2b04 	ldr.w	r2, [r3], #4
 8007756:	6881      	ldr	r1, [r0, #8]
 8007758:	9301      	str	r3, [sp, #4]
 800775a:	f000 f9f7 	bl	8007b4c <_vfiprintf_r>
 800775e:	b003      	add	sp, #12
 8007760:	f85d eb04 	ldr.w	lr, [sp], #4
 8007764:	b004      	add	sp, #16
 8007766:	4770      	bx	lr
 8007768:	20000020 	.word	0x20000020

0800776c <__sread>:
 800776c:	b510      	push	{r4, lr}
 800776e:	460c      	mov	r4, r1
 8007770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007774:	f000 f868 	bl	8007848 <_read_r>
 8007778:	2800      	cmp	r0, #0
 800777a:	bfab      	itete	ge
 800777c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800777e:	89a3      	ldrhlt	r3, [r4, #12]
 8007780:	181b      	addge	r3, r3, r0
 8007782:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007786:	bfac      	ite	ge
 8007788:	6563      	strge	r3, [r4, #84]	@ 0x54
 800778a:	81a3      	strhlt	r3, [r4, #12]
 800778c:	bd10      	pop	{r4, pc}

0800778e <__swrite>:
 800778e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007792:	461f      	mov	r7, r3
 8007794:	898b      	ldrh	r3, [r1, #12]
 8007796:	05db      	lsls	r3, r3, #23
 8007798:	4605      	mov	r5, r0
 800779a:	460c      	mov	r4, r1
 800779c:	4616      	mov	r6, r2
 800779e:	d505      	bpl.n	80077ac <__swrite+0x1e>
 80077a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a4:	2302      	movs	r3, #2
 80077a6:	2200      	movs	r2, #0
 80077a8:	f000 f83c 	bl	8007824 <_lseek_r>
 80077ac:	89a3      	ldrh	r3, [r4, #12]
 80077ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80077b6:	81a3      	strh	r3, [r4, #12]
 80077b8:	4632      	mov	r2, r6
 80077ba:	463b      	mov	r3, r7
 80077bc:	4628      	mov	r0, r5
 80077be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077c2:	f000 b853 	b.w	800786c <_write_r>

080077c6 <__sseek>:
 80077c6:	b510      	push	{r4, lr}
 80077c8:	460c      	mov	r4, r1
 80077ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ce:	f000 f829 	bl	8007824 <_lseek_r>
 80077d2:	1c43      	adds	r3, r0, #1
 80077d4:	89a3      	ldrh	r3, [r4, #12]
 80077d6:	bf15      	itete	ne
 80077d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80077da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80077de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80077e2:	81a3      	strheq	r3, [r4, #12]
 80077e4:	bf18      	it	ne
 80077e6:	81a3      	strhne	r3, [r4, #12]
 80077e8:	bd10      	pop	{r4, pc}

080077ea <__sclose>:
 80077ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ee:	f000 b809 	b.w	8007804 <_close_r>

080077f2 <memset>:
 80077f2:	4402      	add	r2, r0
 80077f4:	4603      	mov	r3, r0
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d100      	bne.n	80077fc <memset+0xa>
 80077fa:	4770      	bx	lr
 80077fc:	f803 1b01 	strb.w	r1, [r3], #1
 8007800:	e7f9      	b.n	80077f6 <memset+0x4>
	...

08007804 <_close_r>:
 8007804:	b538      	push	{r3, r4, r5, lr}
 8007806:	4d06      	ldr	r5, [pc, #24]	@ (8007820 <_close_r+0x1c>)
 8007808:	2300      	movs	r3, #0
 800780a:	4604      	mov	r4, r0
 800780c:	4608      	mov	r0, r1
 800780e:	602b      	str	r3, [r5, #0]
 8007810:	f7fa f83d 	bl	800188e <_close>
 8007814:	1c43      	adds	r3, r0, #1
 8007816:	d102      	bne.n	800781e <_close_r+0x1a>
 8007818:	682b      	ldr	r3, [r5, #0]
 800781a:	b103      	cbz	r3, 800781e <_close_r+0x1a>
 800781c:	6023      	str	r3, [r4, #0]
 800781e:	bd38      	pop	{r3, r4, r5, pc}
 8007820:	2000a3b8 	.word	0x2000a3b8

08007824 <_lseek_r>:
 8007824:	b538      	push	{r3, r4, r5, lr}
 8007826:	4d07      	ldr	r5, [pc, #28]	@ (8007844 <_lseek_r+0x20>)
 8007828:	4604      	mov	r4, r0
 800782a:	4608      	mov	r0, r1
 800782c:	4611      	mov	r1, r2
 800782e:	2200      	movs	r2, #0
 8007830:	602a      	str	r2, [r5, #0]
 8007832:	461a      	mov	r2, r3
 8007834:	f7fa f852 	bl	80018dc <_lseek>
 8007838:	1c43      	adds	r3, r0, #1
 800783a:	d102      	bne.n	8007842 <_lseek_r+0x1e>
 800783c:	682b      	ldr	r3, [r5, #0]
 800783e:	b103      	cbz	r3, 8007842 <_lseek_r+0x1e>
 8007840:	6023      	str	r3, [r4, #0]
 8007842:	bd38      	pop	{r3, r4, r5, pc}
 8007844:	2000a3b8 	.word	0x2000a3b8

08007848 <_read_r>:
 8007848:	b538      	push	{r3, r4, r5, lr}
 800784a:	4d07      	ldr	r5, [pc, #28]	@ (8007868 <_read_r+0x20>)
 800784c:	4604      	mov	r4, r0
 800784e:	4608      	mov	r0, r1
 8007850:	4611      	mov	r1, r2
 8007852:	2200      	movs	r2, #0
 8007854:	602a      	str	r2, [r5, #0]
 8007856:	461a      	mov	r2, r3
 8007858:	f7f9 ffe0 	bl	800181c <_read>
 800785c:	1c43      	adds	r3, r0, #1
 800785e:	d102      	bne.n	8007866 <_read_r+0x1e>
 8007860:	682b      	ldr	r3, [r5, #0]
 8007862:	b103      	cbz	r3, 8007866 <_read_r+0x1e>
 8007864:	6023      	str	r3, [r4, #0]
 8007866:	bd38      	pop	{r3, r4, r5, pc}
 8007868:	2000a3b8 	.word	0x2000a3b8

0800786c <_write_r>:
 800786c:	b538      	push	{r3, r4, r5, lr}
 800786e:	4d07      	ldr	r5, [pc, #28]	@ (800788c <_write_r+0x20>)
 8007870:	4604      	mov	r4, r0
 8007872:	4608      	mov	r0, r1
 8007874:	4611      	mov	r1, r2
 8007876:	2200      	movs	r2, #0
 8007878:	602a      	str	r2, [r5, #0]
 800787a:	461a      	mov	r2, r3
 800787c:	f7f9 ffeb 	bl	8001856 <_write>
 8007880:	1c43      	adds	r3, r0, #1
 8007882:	d102      	bne.n	800788a <_write_r+0x1e>
 8007884:	682b      	ldr	r3, [r5, #0]
 8007886:	b103      	cbz	r3, 800788a <_write_r+0x1e>
 8007888:	6023      	str	r3, [r4, #0]
 800788a:	bd38      	pop	{r3, r4, r5, pc}
 800788c:	2000a3b8 	.word	0x2000a3b8

08007890 <__errno>:
 8007890:	4b01      	ldr	r3, [pc, #4]	@ (8007898 <__errno+0x8>)
 8007892:	6818      	ldr	r0, [r3, #0]
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	20000020 	.word	0x20000020

0800789c <__libc_init_array>:
 800789c:	b570      	push	{r4, r5, r6, lr}
 800789e:	4d0d      	ldr	r5, [pc, #52]	@ (80078d4 <__libc_init_array+0x38>)
 80078a0:	4c0d      	ldr	r4, [pc, #52]	@ (80078d8 <__libc_init_array+0x3c>)
 80078a2:	1b64      	subs	r4, r4, r5
 80078a4:	10a4      	asrs	r4, r4, #2
 80078a6:	2600      	movs	r6, #0
 80078a8:	42a6      	cmp	r6, r4
 80078aa:	d109      	bne.n	80078c0 <__libc_init_array+0x24>
 80078ac:	4d0b      	ldr	r5, [pc, #44]	@ (80078dc <__libc_init_array+0x40>)
 80078ae:	4c0c      	ldr	r4, [pc, #48]	@ (80078e0 <__libc_init_array+0x44>)
 80078b0:	f000 fd1a 	bl	80082e8 <_init>
 80078b4:	1b64      	subs	r4, r4, r5
 80078b6:	10a4      	asrs	r4, r4, #2
 80078b8:	2600      	movs	r6, #0
 80078ba:	42a6      	cmp	r6, r4
 80078bc:	d105      	bne.n	80078ca <__libc_init_array+0x2e>
 80078be:	bd70      	pop	{r4, r5, r6, pc}
 80078c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80078c4:	4798      	blx	r3
 80078c6:	3601      	adds	r6, #1
 80078c8:	e7ee      	b.n	80078a8 <__libc_init_array+0xc>
 80078ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80078ce:	4798      	blx	r3
 80078d0:	3601      	adds	r6, #1
 80078d2:	e7f2      	b.n	80078ba <__libc_init_array+0x1e>
 80078d4:	0800b438 	.word	0x0800b438
 80078d8:	0800b438 	.word	0x0800b438
 80078dc:	0800b438 	.word	0x0800b438
 80078e0:	0800b43c 	.word	0x0800b43c

080078e4 <__retarget_lock_init_recursive>:
 80078e4:	4770      	bx	lr

080078e6 <__retarget_lock_acquire_recursive>:
 80078e6:	4770      	bx	lr

080078e8 <__retarget_lock_release_recursive>:
 80078e8:	4770      	bx	lr

080078ea <memcpy>:
 80078ea:	440a      	add	r2, r1
 80078ec:	4291      	cmp	r1, r2
 80078ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80078f2:	d100      	bne.n	80078f6 <memcpy+0xc>
 80078f4:	4770      	bx	lr
 80078f6:	b510      	push	{r4, lr}
 80078f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007900:	4291      	cmp	r1, r2
 8007902:	d1f9      	bne.n	80078f8 <memcpy+0xe>
 8007904:	bd10      	pop	{r4, pc}
	...

08007908 <_free_r>:
 8007908:	b538      	push	{r3, r4, r5, lr}
 800790a:	4605      	mov	r5, r0
 800790c:	2900      	cmp	r1, #0
 800790e:	d041      	beq.n	8007994 <_free_r+0x8c>
 8007910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007914:	1f0c      	subs	r4, r1, #4
 8007916:	2b00      	cmp	r3, #0
 8007918:	bfb8      	it	lt
 800791a:	18e4      	addlt	r4, r4, r3
 800791c:	f000 f8e0 	bl	8007ae0 <__malloc_lock>
 8007920:	4a1d      	ldr	r2, [pc, #116]	@ (8007998 <_free_r+0x90>)
 8007922:	6813      	ldr	r3, [r2, #0]
 8007924:	b933      	cbnz	r3, 8007934 <_free_r+0x2c>
 8007926:	6063      	str	r3, [r4, #4]
 8007928:	6014      	str	r4, [r2, #0]
 800792a:	4628      	mov	r0, r5
 800792c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007930:	f000 b8dc 	b.w	8007aec <__malloc_unlock>
 8007934:	42a3      	cmp	r3, r4
 8007936:	d908      	bls.n	800794a <_free_r+0x42>
 8007938:	6820      	ldr	r0, [r4, #0]
 800793a:	1821      	adds	r1, r4, r0
 800793c:	428b      	cmp	r3, r1
 800793e:	bf01      	itttt	eq
 8007940:	6819      	ldreq	r1, [r3, #0]
 8007942:	685b      	ldreq	r3, [r3, #4]
 8007944:	1809      	addeq	r1, r1, r0
 8007946:	6021      	streq	r1, [r4, #0]
 8007948:	e7ed      	b.n	8007926 <_free_r+0x1e>
 800794a:	461a      	mov	r2, r3
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	b10b      	cbz	r3, 8007954 <_free_r+0x4c>
 8007950:	42a3      	cmp	r3, r4
 8007952:	d9fa      	bls.n	800794a <_free_r+0x42>
 8007954:	6811      	ldr	r1, [r2, #0]
 8007956:	1850      	adds	r0, r2, r1
 8007958:	42a0      	cmp	r0, r4
 800795a:	d10b      	bne.n	8007974 <_free_r+0x6c>
 800795c:	6820      	ldr	r0, [r4, #0]
 800795e:	4401      	add	r1, r0
 8007960:	1850      	adds	r0, r2, r1
 8007962:	4283      	cmp	r3, r0
 8007964:	6011      	str	r1, [r2, #0]
 8007966:	d1e0      	bne.n	800792a <_free_r+0x22>
 8007968:	6818      	ldr	r0, [r3, #0]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	6053      	str	r3, [r2, #4]
 800796e:	4408      	add	r0, r1
 8007970:	6010      	str	r0, [r2, #0]
 8007972:	e7da      	b.n	800792a <_free_r+0x22>
 8007974:	d902      	bls.n	800797c <_free_r+0x74>
 8007976:	230c      	movs	r3, #12
 8007978:	602b      	str	r3, [r5, #0]
 800797a:	e7d6      	b.n	800792a <_free_r+0x22>
 800797c:	6820      	ldr	r0, [r4, #0]
 800797e:	1821      	adds	r1, r4, r0
 8007980:	428b      	cmp	r3, r1
 8007982:	bf04      	itt	eq
 8007984:	6819      	ldreq	r1, [r3, #0]
 8007986:	685b      	ldreq	r3, [r3, #4]
 8007988:	6063      	str	r3, [r4, #4]
 800798a:	bf04      	itt	eq
 800798c:	1809      	addeq	r1, r1, r0
 800798e:	6021      	streq	r1, [r4, #0]
 8007990:	6054      	str	r4, [r2, #4]
 8007992:	e7ca      	b.n	800792a <_free_r+0x22>
 8007994:	bd38      	pop	{r3, r4, r5, pc}
 8007996:	bf00      	nop
 8007998:	2000a3c4 	.word	0x2000a3c4

0800799c <sbrk_aligned>:
 800799c:	b570      	push	{r4, r5, r6, lr}
 800799e:	4e0f      	ldr	r6, [pc, #60]	@ (80079dc <sbrk_aligned+0x40>)
 80079a0:	460c      	mov	r4, r1
 80079a2:	6831      	ldr	r1, [r6, #0]
 80079a4:	4605      	mov	r5, r0
 80079a6:	b911      	cbnz	r1, 80079ae <sbrk_aligned+0x12>
 80079a8:	f000 fc8e 	bl	80082c8 <_sbrk_r>
 80079ac:	6030      	str	r0, [r6, #0]
 80079ae:	4621      	mov	r1, r4
 80079b0:	4628      	mov	r0, r5
 80079b2:	f000 fc89 	bl	80082c8 <_sbrk_r>
 80079b6:	1c43      	adds	r3, r0, #1
 80079b8:	d103      	bne.n	80079c2 <sbrk_aligned+0x26>
 80079ba:	f04f 34ff 	mov.w	r4, #4294967295
 80079be:	4620      	mov	r0, r4
 80079c0:	bd70      	pop	{r4, r5, r6, pc}
 80079c2:	1cc4      	adds	r4, r0, #3
 80079c4:	f024 0403 	bic.w	r4, r4, #3
 80079c8:	42a0      	cmp	r0, r4
 80079ca:	d0f8      	beq.n	80079be <sbrk_aligned+0x22>
 80079cc:	1a21      	subs	r1, r4, r0
 80079ce:	4628      	mov	r0, r5
 80079d0:	f000 fc7a 	bl	80082c8 <_sbrk_r>
 80079d4:	3001      	adds	r0, #1
 80079d6:	d1f2      	bne.n	80079be <sbrk_aligned+0x22>
 80079d8:	e7ef      	b.n	80079ba <sbrk_aligned+0x1e>
 80079da:	bf00      	nop
 80079dc:	2000a3c0 	.word	0x2000a3c0

080079e0 <_malloc_r>:
 80079e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079e4:	1ccd      	adds	r5, r1, #3
 80079e6:	f025 0503 	bic.w	r5, r5, #3
 80079ea:	3508      	adds	r5, #8
 80079ec:	2d0c      	cmp	r5, #12
 80079ee:	bf38      	it	cc
 80079f0:	250c      	movcc	r5, #12
 80079f2:	2d00      	cmp	r5, #0
 80079f4:	4606      	mov	r6, r0
 80079f6:	db01      	blt.n	80079fc <_malloc_r+0x1c>
 80079f8:	42a9      	cmp	r1, r5
 80079fa:	d904      	bls.n	8007a06 <_malloc_r+0x26>
 80079fc:	230c      	movs	r3, #12
 80079fe:	6033      	str	r3, [r6, #0]
 8007a00:	2000      	movs	r0, #0
 8007a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007adc <_malloc_r+0xfc>
 8007a0a:	f000 f869 	bl	8007ae0 <__malloc_lock>
 8007a0e:	f8d8 3000 	ldr.w	r3, [r8]
 8007a12:	461c      	mov	r4, r3
 8007a14:	bb44      	cbnz	r4, 8007a68 <_malloc_r+0x88>
 8007a16:	4629      	mov	r1, r5
 8007a18:	4630      	mov	r0, r6
 8007a1a:	f7ff ffbf 	bl	800799c <sbrk_aligned>
 8007a1e:	1c43      	adds	r3, r0, #1
 8007a20:	4604      	mov	r4, r0
 8007a22:	d158      	bne.n	8007ad6 <_malloc_r+0xf6>
 8007a24:	f8d8 4000 	ldr.w	r4, [r8]
 8007a28:	4627      	mov	r7, r4
 8007a2a:	2f00      	cmp	r7, #0
 8007a2c:	d143      	bne.n	8007ab6 <_malloc_r+0xd6>
 8007a2e:	2c00      	cmp	r4, #0
 8007a30:	d04b      	beq.n	8007aca <_malloc_r+0xea>
 8007a32:	6823      	ldr	r3, [r4, #0]
 8007a34:	4639      	mov	r1, r7
 8007a36:	4630      	mov	r0, r6
 8007a38:	eb04 0903 	add.w	r9, r4, r3
 8007a3c:	f000 fc44 	bl	80082c8 <_sbrk_r>
 8007a40:	4581      	cmp	r9, r0
 8007a42:	d142      	bne.n	8007aca <_malloc_r+0xea>
 8007a44:	6821      	ldr	r1, [r4, #0]
 8007a46:	1a6d      	subs	r5, r5, r1
 8007a48:	4629      	mov	r1, r5
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	f7ff ffa6 	bl	800799c <sbrk_aligned>
 8007a50:	3001      	adds	r0, #1
 8007a52:	d03a      	beq.n	8007aca <_malloc_r+0xea>
 8007a54:	6823      	ldr	r3, [r4, #0]
 8007a56:	442b      	add	r3, r5
 8007a58:	6023      	str	r3, [r4, #0]
 8007a5a:	f8d8 3000 	ldr.w	r3, [r8]
 8007a5e:	685a      	ldr	r2, [r3, #4]
 8007a60:	bb62      	cbnz	r2, 8007abc <_malloc_r+0xdc>
 8007a62:	f8c8 7000 	str.w	r7, [r8]
 8007a66:	e00f      	b.n	8007a88 <_malloc_r+0xa8>
 8007a68:	6822      	ldr	r2, [r4, #0]
 8007a6a:	1b52      	subs	r2, r2, r5
 8007a6c:	d420      	bmi.n	8007ab0 <_malloc_r+0xd0>
 8007a6e:	2a0b      	cmp	r2, #11
 8007a70:	d917      	bls.n	8007aa2 <_malloc_r+0xc2>
 8007a72:	1961      	adds	r1, r4, r5
 8007a74:	42a3      	cmp	r3, r4
 8007a76:	6025      	str	r5, [r4, #0]
 8007a78:	bf18      	it	ne
 8007a7a:	6059      	strne	r1, [r3, #4]
 8007a7c:	6863      	ldr	r3, [r4, #4]
 8007a7e:	bf08      	it	eq
 8007a80:	f8c8 1000 	streq.w	r1, [r8]
 8007a84:	5162      	str	r2, [r4, r5]
 8007a86:	604b      	str	r3, [r1, #4]
 8007a88:	4630      	mov	r0, r6
 8007a8a:	f000 f82f 	bl	8007aec <__malloc_unlock>
 8007a8e:	f104 000b 	add.w	r0, r4, #11
 8007a92:	1d23      	adds	r3, r4, #4
 8007a94:	f020 0007 	bic.w	r0, r0, #7
 8007a98:	1ac2      	subs	r2, r0, r3
 8007a9a:	bf1c      	itt	ne
 8007a9c:	1a1b      	subne	r3, r3, r0
 8007a9e:	50a3      	strne	r3, [r4, r2]
 8007aa0:	e7af      	b.n	8007a02 <_malloc_r+0x22>
 8007aa2:	6862      	ldr	r2, [r4, #4]
 8007aa4:	42a3      	cmp	r3, r4
 8007aa6:	bf0c      	ite	eq
 8007aa8:	f8c8 2000 	streq.w	r2, [r8]
 8007aac:	605a      	strne	r2, [r3, #4]
 8007aae:	e7eb      	b.n	8007a88 <_malloc_r+0xa8>
 8007ab0:	4623      	mov	r3, r4
 8007ab2:	6864      	ldr	r4, [r4, #4]
 8007ab4:	e7ae      	b.n	8007a14 <_malloc_r+0x34>
 8007ab6:	463c      	mov	r4, r7
 8007ab8:	687f      	ldr	r7, [r7, #4]
 8007aba:	e7b6      	b.n	8007a2a <_malloc_r+0x4a>
 8007abc:	461a      	mov	r2, r3
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	42a3      	cmp	r3, r4
 8007ac2:	d1fb      	bne.n	8007abc <_malloc_r+0xdc>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	6053      	str	r3, [r2, #4]
 8007ac8:	e7de      	b.n	8007a88 <_malloc_r+0xa8>
 8007aca:	230c      	movs	r3, #12
 8007acc:	6033      	str	r3, [r6, #0]
 8007ace:	4630      	mov	r0, r6
 8007ad0:	f000 f80c 	bl	8007aec <__malloc_unlock>
 8007ad4:	e794      	b.n	8007a00 <_malloc_r+0x20>
 8007ad6:	6005      	str	r5, [r0, #0]
 8007ad8:	e7d6      	b.n	8007a88 <_malloc_r+0xa8>
 8007ada:	bf00      	nop
 8007adc:	2000a3c4 	.word	0x2000a3c4

08007ae0 <__malloc_lock>:
 8007ae0:	4801      	ldr	r0, [pc, #4]	@ (8007ae8 <__malloc_lock+0x8>)
 8007ae2:	f7ff bf00 	b.w	80078e6 <__retarget_lock_acquire_recursive>
 8007ae6:	bf00      	nop
 8007ae8:	2000a3bc 	.word	0x2000a3bc

08007aec <__malloc_unlock>:
 8007aec:	4801      	ldr	r0, [pc, #4]	@ (8007af4 <__malloc_unlock+0x8>)
 8007aee:	f7ff befb 	b.w	80078e8 <__retarget_lock_release_recursive>
 8007af2:	bf00      	nop
 8007af4:	2000a3bc 	.word	0x2000a3bc

08007af8 <__sfputc_r>:
 8007af8:	6893      	ldr	r3, [r2, #8]
 8007afa:	3b01      	subs	r3, #1
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	b410      	push	{r4}
 8007b00:	6093      	str	r3, [r2, #8]
 8007b02:	da08      	bge.n	8007b16 <__sfputc_r+0x1e>
 8007b04:	6994      	ldr	r4, [r2, #24]
 8007b06:	42a3      	cmp	r3, r4
 8007b08:	db01      	blt.n	8007b0e <__sfputc_r+0x16>
 8007b0a:	290a      	cmp	r1, #10
 8007b0c:	d103      	bne.n	8007b16 <__sfputc_r+0x1e>
 8007b0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b12:	f000 bb23 	b.w	800815c <__swbuf_r>
 8007b16:	6813      	ldr	r3, [r2, #0]
 8007b18:	1c58      	adds	r0, r3, #1
 8007b1a:	6010      	str	r0, [r2, #0]
 8007b1c:	7019      	strb	r1, [r3, #0]
 8007b1e:	4608      	mov	r0, r1
 8007b20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b24:	4770      	bx	lr

08007b26 <__sfputs_r>:
 8007b26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b28:	4606      	mov	r6, r0
 8007b2a:	460f      	mov	r7, r1
 8007b2c:	4614      	mov	r4, r2
 8007b2e:	18d5      	adds	r5, r2, r3
 8007b30:	42ac      	cmp	r4, r5
 8007b32:	d101      	bne.n	8007b38 <__sfputs_r+0x12>
 8007b34:	2000      	movs	r0, #0
 8007b36:	e007      	b.n	8007b48 <__sfputs_r+0x22>
 8007b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b3c:	463a      	mov	r2, r7
 8007b3e:	4630      	mov	r0, r6
 8007b40:	f7ff ffda 	bl	8007af8 <__sfputc_r>
 8007b44:	1c43      	adds	r3, r0, #1
 8007b46:	d1f3      	bne.n	8007b30 <__sfputs_r+0xa>
 8007b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b4c <_vfiprintf_r>:
 8007b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b50:	460d      	mov	r5, r1
 8007b52:	b09d      	sub	sp, #116	@ 0x74
 8007b54:	4614      	mov	r4, r2
 8007b56:	4698      	mov	r8, r3
 8007b58:	4606      	mov	r6, r0
 8007b5a:	b118      	cbz	r0, 8007b64 <_vfiprintf_r+0x18>
 8007b5c:	6a03      	ldr	r3, [r0, #32]
 8007b5e:	b90b      	cbnz	r3, 8007b64 <_vfiprintf_r+0x18>
 8007b60:	f7ff fdbc 	bl	80076dc <__sinit>
 8007b64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b66:	07d9      	lsls	r1, r3, #31
 8007b68:	d405      	bmi.n	8007b76 <_vfiprintf_r+0x2a>
 8007b6a:	89ab      	ldrh	r3, [r5, #12]
 8007b6c:	059a      	lsls	r2, r3, #22
 8007b6e:	d402      	bmi.n	8007b76 <_vfiprintf_r+0x2a>
 8007b70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b72:	f7ff feb8 	bl	80078e6 <__retarget_lock_acquire_recursive>
 8007b76:	89ab      	ldrh	r3, [r5, #12]
 8007b78:	071b      	lsls	r3, r3, #28
 8007b7a:	d501      	bpl.n	8007b80 <_vfiprintf_r+0x34>
 8007b7c:	692b      	ldr	r3, [r5, #16]
 8007b7e:	b99b      	cbnz	r3, 8007ba8 <_vfiprintf_r+0x5c>
 8007b80:	4629      	mov	r1, r5
 8007b82:	4630      	mov	r0, r6
 8007b84:	f000 fb28 	bl	80081d8 <__swsetup_r>
 8007b88:	b170      	cbz	r0, 8007ba8 <_vfiprintf_r+0x5c>
 8007b8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b8c:	07dc      	lsls	r4, r3, #31
 8007b8e:	d504      	bpl.n	8007b9a <_vfiprintf_r+0x4e>
 8007b90:	f04f 30ff 	mov.w	r0, #4294967295
 8007b94:	b01d      	add	sp, #116	@ 0x74
 8007b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b9a:	89ab      	ldrh	r3, [r5, #12]
 8007b9c:	0598      	lsls	r0, r3, #22
 8007b9e:	d4f7      	bmi.n	8007b90 <_vfiprintf_r+0x44>
 8007ba0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ba2:	f7ff fea1 	bl	80078e8 <__retarget_lock_release_recursive>
 8007ba6:	e7f3      	b.n	8007b90 <_vfiprintf_r+0x44>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bac:	2320      	movs	r3, #32
 8007bae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007bb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bb6:	2330      	movs	r3, #48	@ 0x30
 8007bb8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007d68 <_vfiprintf_r+0x21c>
 8007bbc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007bc0:	f04f 0901 	mov.w	r9, #1
 8007bc4:	4623      	mov	r3, r4
 8007bc6:	469a      	mov	sl, r3
 8007bc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bcc:	b10a      	cbz	r2, 8007bd2 <_vfiprintf_r+0x86>
 8007bce:	2a25      	cmp	r2, #37	@ 0x25
 8007bd0:	d1f9      	bne.n	8007bc6 <_vfiprintf_r+0x7a>
 8007bd2:	ebba 0b04 	subs.w	fp, sl, r4
 8007bd6:	d00b      	beq.n	8007bf0 <_vfiprintf_r+0xa4>
 8007bd8:	465b      	mov	r3, fp
 8007bda:	4622      	mov	r2, r4
 8007bdc:	4629      	mov	r1, r5
 8007bde:	4630      	mov	r0, r6
 8007be0:	f7ff ffa1 	bl	8007b26 <__sfputs_r>
 8007be4:	3001      	adds	r0, #1
 8007be6:	f000 80a7 	beq.w	8007d38 <_vfiprintf_r+0x1ec>
 8007bea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bec:	445a      	add	r2, fp
 8007bee:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bf0:	f89a 3000 	ldrb.w	r3, [sl]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f000 809f 	beq.w	8007d38 <_vfiprintf_r+0x1ec>
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8007c00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c04:	f10a 0a01 	add.w	sl, sl, #1
 8007c08:	9304      	str	r3, [sp, #16]
 8007c0a:	9307      	str	r3, [sp, #28]
 8007c0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c10:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c12:	4654      	mov	r4, sl
 8007c14:	2205      	movs	r2, #5
 8007c16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c1a:	4853      	ldr	r0, [pc, #332]	@ (8007d68 <_vfiprintf_r+0x21c>)
 8007c1c:	f7f8 fad8 	bl	80001d0 <memchr>
 8007c20:	9a04      	ldr	r2, [sp, #16]
 8007c22:	b9d8      	cbnz	r0, 8007c5c <_vfiprintf_r+0x110>
 8007c24:	06d1      	lsls	r1, r2, #27
 8007c26:	bf44      	itt	mi
 8007c28:	2320      	movmi	r3, #32
 8007c2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c2e:	0713      	lsls	r3, r2, #28
 8007c30:	bf44      	itt	mi
 8007c32:	232b      	movmi	r3, #43	@ 0x2b
 8007c34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c38:	f89a 3000 	ldrb.w	r3, [sl]
 8007c3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c3e:	d015      	beq.n	8007c6c <_vfiprintf_r+0x120>
 8007c40:	9a07      	ldr	r2, [sp, #28]
 8007c42:	4654      	mov	r4, sl
 8007c44:	2000      	movs	r0, #0
 8007c46:	f04f 0c0a 	mov.w	ip, #10
 8007c4a:	4621      	mov	r1, r4
 8007c4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c50:	3b30      	subs	r3, #48	@ 0x30
 8007c52:	2b09      	cmp	r3, #9
 8007c54:	d94b      	bls.n	8007cee <_vfiprintf_r+0x1a2>
 8007c56:	b1b0      	cbz	r0, 8007c86 <_vfiprintf_r+0x13a>
 8007c58:	9207      	str	r2, [sp, #28]
 8007c5a:	e014      	b.n	8007c86 <_vfiprintf_r+0x13a>
 8007c5c:	eba0 0308 	sub.w	r3, r0, r8
 8007c60:	fa09 f303 	lsl.w	r3, r9, r3
 8007c64:	4313      	orrs	r3, r2
 8007c66:	9304      	str	r3, [sp, #16]
 8007c68:	46a2      	mov	sl, r4
 8007c6a:	e7d2      	b.n	8007c12 <_vfiprintf_r+0xc6>
 8007c6c:	9b03      	ldr	r3, [sp, #12]
 8007c6e:	1d19      	adds	r1, r3, #4
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	9103      	str	r1, [sp, #12]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	bfbb      	ittet	lt
 8007c78:	425b      	neglt	r3, r3
 8007c7a:	f042 0202 	orrlt.w	r2, r2, #2
 8007c7e:	9307      	strge	r3, [sp, #28]
 8007c80:	9307      	strlt	r3, [sp, #28]
 8007c82:	bfb8      	it	lt
 8007c84:	9204      	strlt	r2, [sp, #16]
 8007c86:	7823      	ldrb	r3, [r4, #0]
 8007c88:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c8a:	d10a      	bne.n	8007ca2 <_vfiprintf_r+0x156>
 8007c8c:	7863      	ldrb	r3, [r4, #1]
 8007c8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c90:	d132      	bne.n	8007cf8 <_vfiprintf_r+0x1ac>
 8007c92:	9b03      	ldr	r3, [sp, #12]
 8007c94:	1d1a      	adds	r2, r3, #4
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	9203      	str	r2, [sp, #12]
 8007c9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c9e:	3402      	adds	r4, #2
 8007ca0:	9305      	str	r3, [sp, #20]
 8007ca2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007d78 <_vfiprintf_r+0x22c>
 8007ca6:	7821      	ldrb	r1, [r4, #0]
 8007ca8:	2203      	movs	r2, #3
 8007caa:	4650      	mov	r0, sl
 8007cac:	f7f8 fa90 	bl	80001d0 <memchr>
 8007cb0:	b138      	cbz	r0, 8007cc2 <_vfiprintf_r+0x176>
 8007cb2:	9b04      	ldr	r3, [sp, #16]
 8007cb4:	eba0 000a 	sub.w	r0, r0, sl
 8007cb8:	2240      	movs	r2, #64	@ 0x40
 8007cba:	4082      	lsls	r2, r0
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	3401      	adds	r4, #1
 8007cc0:	9304      	str	r3, [sp, #16]
 8007cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cc6:	4829      	ldr	r0, [pc, #164]	@ (8007d6c <_vfiprintf_r+0x220>)
 8007cc8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ccc:	2206      	movs	r2, #6
 8007cce:	f7f8 fa7f 	bl	80001d0 <memchr>
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	d03f      	beq.n	8007d56 <_vfiprintf_r+0x20a>
 8007cd6:	4b26      	ldr	r3, [pc, #152]	@ (8007d70 <_vfiprintf_r+0x224>)
 8007cd8:	bb1b      	cbnz	r3, 8007d22 <_vfiprintf_r+0x1d6>
 8007cda:	9b03      	ldr	r3, [sp, #12]
 8007cdc:	3307      	adds	r3, #7
 8007cde:	f023 0307 	bic.w	r3, r3, #7
 8007ce2:	3308      	adds	r3, #8
 8007ce4:	9303      	str	r3, [sp, #12]
 8007ce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ce8:	443b      	add	r3, r7
 8007cea:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cec:	e76a      	b.n	8007bc4 <_vfiprintf_r+0x78>
 8007cee:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	2001      	movs	r0, #1
 8007cf6:	e7a8      	b.n	8007c4a <_vfiprintf_r+0xfe>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	3401      	adds	r4, #1
 8007cfc:	9305      	str	r3, [sp, #20]
 8007cfe:	4619      	mov	r1, r3
 8007d00:	f04f 0c0a 	mov.w	ip, #10
 8007d04:	4620      	mov	r0, r4
 8007d06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d0a:	3a30      	subs	r2, #48	@ 0x30
 8007d0c:	2a09      	cmp	r2, #9
 8007d0e:	d903      	bls.n	8007d18 <_vfiprintf_r+0x1cc>
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d0c6      	beq.n	8007ca2 <_vfiprintf_r+0x156>
 8007d14:	9105      	str	r1, [sp, #20]
 8007d16:	e7c4      	b.n	8007ca2 <_vfiprintf_r+0x156>
 8007d18:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d1c:	4604      	mov	r4, r0
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e7f0      	b.n	8007d04 <_vfiprintf_r+0x1b8>
 8007d22:	ab03      	add	r3, sp, #12
 8007d24:	9300      	str	r3, [sp, #0]
 8007d26:	462a      	mov	r2, r5
 8007d28:	4b12      	ldr	r3, [pc, #72]	@ (8007d74 <_vfiprintf_r+0x228>)
 8007d2a:	a904      	add	r1, sp, #16
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	f3af 8000 	nop.w
 8007d32:	4607      	mov	r7, r0
 8007d34:	1c78      	adds	r0, r7, #1
 8007d36:	d1d6      	bne.n	8007ce6 <_vfiprintf_r+0x19a>
 8007d38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d3a:	07d9      	lsls	r1, r3, #31
 8007d3c:	d405      	bmi.n	8007d4a <_vfiprintf_r+0x1fe>
 8007d3e:	89ab      	ldrh	r3, [r5, #12]
 8007d40:	059a      	lsls	r2, r3, #22
 8007d42:	d402      	bmi.n	8007d4a <_vfiprintf_r+0x1fe>
 8007d44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d46:	f7ff fdcf 	bl	80078e8 <__retarget_lock_release_recursive>
 8007d4a:	89ab      	ldrh	r3, [r5, #12]
 8007d4c:	065b      	lsls	r3, r3, #25
 8007d4e:	f53f af1f 	bmi.w	8007b90 <_vfiprintf_r+0x44>
 8007d52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d54:	e71e      	b.n	8007b94 <_vfiprintf_r+0x48>
 8007d56:	ab03      	add	r3, sp, #12
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	462a      	mov	r2, r5
 8007d5c:	4b05      	ldr	r3, [pc, #20]	@ (8007d74 <_vfiprintf_r+0x228>)
 8007d5e:	a904      	add	r1, sp, #16
 8007d60:	4630      	mov	r0, r6
 8007d62:	f000 f879 	bl	8007e58 <_printf_i>
 8007d66:	e7e4      	b.n	8007d32 <_vfiprintf_r+0x1e6>
 8007d68:	0800b3fc 	.word	0x0800b3fc
 8007d6c:	0800b406 	.word	0x0800b406
 8007d70:	00000000 	.word	0x00000000
 8007d74:	08007b27 	.word	0x08007b27
 8007d78:	0800b402 	.word	0x0800b402

08007d7c <_printf_common>:
 8007d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d80:	4616      	mov	r6, r2
 8007d82:	4698      	mov	r8, r3
 8007d84:	688a      	ldr	r2, [r1, #8]
 8007d86:	690b      	ldr	r3, [r1, #16]
 8007d88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	bfb8      	it	lt
 8007d90:	4613      	movlt	r3, r2
 8007d92:	6033      	str	r3, [r6, #0]
 8007d94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007d98:	4607      	mov	r7, r0
 8007d9a:	460c      	mov	r4, r1
 8007d9c:	b10a      	cbz	r2, 8007da2 <_printf_common+0x26>
 8007d9e:	3301      	adds	r3, #1
 8007da0:	6033      	str	r3, [r6, #0]
 8007da2:	6823      	ldr	r3, [r4, #0]
 8007da4:	0699      	lsls	r1, r3, #26
 8007da6:	bf42      	ittt	mi
 8007da8:	6833      	ldrmi	r3, [r6, #0]
 8007daa:	3302      	addmi	r3, #2
 8007dac:	6033      	strmi	r3, [r6, #0]
 8007dae:	6825      	ldr	r5, [r4, #0]
 8007db0:	f015 0506 	ands.w	r5, r5, #6
 8007db4:	d106      	bne.n	8007dc4 <_printf_common+0x48>
 8007db6:	f104 0a19 	add.w	sl, r4, #25
 8007dba:	68e3      	ldr	r3, [r4, #12]
 8007dbc:	6832      	ldr	r2, [r6, #0]
 8007dbe:	1a9b      	subs	r3, r3, r2
 8007dc0:	42ab      	cmp	r3, r5
 8007dc2:	dc26      	bgt.n	8007e12 <_printf_common+0x96>
 8007dc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007dc8:	6822      	ldr	r2, [r4, #0]
 8007dca:	3b00      	subs	r3, #0
 8007dcc:	bf18      	it	ne
 8007dce:	2301      	movne	r3, #1
 8007dd0:	0692      	lsls	r2, r2, #26
 8007dd2:	d42b      	bmi.n	8007e2c <_printf_common+0xb0>
 8007dd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007dd8:	4641      	mov	r1, r8
 8007dda:	4638      	mov	r0, r7
 8007ddc:	47c8      	blx	r9
 8007dde:	3001      	adds	r0, #1
 8007de0:	d01e      	beq.n	8007e20 <_printf_common+0xa4>
 8007de2:	6823      	ldr	r3, [r4, #0]
 8007de4:	6922      	ldr	r2, [r4, #16]
 8007de6:	f003 0306 	and.w	r3, r3, #6
 8007dea:	2b04      	cmp	r3, #4
 8007dec:	bf02      	ittt	eq
 8007dee:	68e5      	ldreq	r5, [r4, #12]
 8007df0:	6833      	ldreq	r3, [r6, #0]
 8007df2:	1aed      	subeq	r5, r5, r3
 8007df4:	68a3      	ldr	r3, [r4, #8]
 8007df6:	bf0c      	ite	eq
 8007df8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dfc:	2500      	movne	r5, #0
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	bfc4      	itt	gt
 8007e02:	1a9b      	subgt	r3, r3, r2
 8007e04:	18ed      	addgt	r5, r5, r3
 8007e06:	2600      	movs	r6, #0
 8007e08:	341a      	adds	r4, #26
 8007e0a:	42b5      	cmp	r5, r6
 8007e0c:	d11a      	bne.n	8007e44 <_printf_common+0xc8>
 8007e0e:	2000      	movs	r0, #0
 8007e10:	e008      	b.n	8007e24 <_printf_common+0xa8>
 8007e12:	2301      	movs	r3, #1
 8007e14:	4652      	mov	r2, sl
 8007e16:	4641      	mov	r1, r8
 8007e18:	4638      	mov	r0, r7
 8007e1a:	47c8      	blx	r9
 8007e1c:	3001      	adds	r0, #1
 8007e1e:	d103      	bne.n	8007e28 <_printf_common+0xac>
 8007e20:	f04f 30ff 	mov.w	r0, #4294967295
 8007e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e28:	3501      	adds	r5, #1
 8007e2a:	e7c6      	b.n	8007dba <_printf_common+0x3e>
 8007e2c:	18e1      	adds	r1, r4, r3
 8007e2e:	1c5a      	adds	r2, r3, #1
 8007e30:	2030      	movs	r0, #48	@ 0x30
 8007e32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e36:	4422      	add	r2, r4
 8007e38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e40:	3302      	adds	r3, #2
 8007e42:	e7c7      	b.n	8007dd4 <_printf_common+0x58>
 8007e44:	2301      	movs	r3, #1
 8007e46:	4622      	mov	r2, r4
 8007e48:	4641      	mov	r1, r8
 8007e4a:	4638      	mov	r0, r7
 8007e4c:	47c8      	blx	r9
 8007e4e:	3001      	adds	r0, #1
 8007e50:	d0e6      	beq.n	8007e20 <_printf_common+0xa4>
 8007e52:	3601      	adds	r6, #1
 8007e54:	e7d9      	b.n	8007e0a <_printf_common+0x8e>
	...

08007e58 <_printf_i>:
 8007e58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e5c:	7e0f      	ldrb	r7, [r1, #24]
 8007e5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e60:	2f78      	cmp	r7, #120	@ 0x78
 8007e62:	4691      	mov	r9, r2
 8007e64:	4680      	mov	r8, r0
 8007e66:	460c      	mov	r4, r1
 8007e68:	469a      	mov	sl, r3
 8007e6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e6e:	d807      	bhi.n	8007e80 <_printf_i+0x28>
 8007e70:	2f62      	cmp	r7, #98	@ 0x62
 8007e72:	d80a      	bhi.n	8007e8a <_printf_i+0x32>
 8007e74:	2f00      	cmp	r7, #0
 8007e76:	f000 80d2 	beq.w	800801e <_printf_i+0x1c6>
 8007e7a:	2f58      	cmp	r7, #88	@ 0x58
 8007e7c:	f000 80b9 	beq.w	8007ff2 <_printf_i+0x19a>
 8007e80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e88:	e03a      	b.n	8007f00 <_printf_i+0xa8>
 8007e8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007e8e:	2b15      	cmp	r3, #21
 8007e90:	d8f6      	bhi.n	8007e80 <_printf_i+0x28>
 8007e92:	a101      	add	r1, pc, #4	@ (adr r1, 8007e98 <_printf_i+0x40>)
 8007e94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e98:	08007ef1 	.word	0x08007ef1
 8007e9c:	08007f05 	.word	0x08007f05
 8007ea0:	08007e81 	.word	0x08007e81
 8007ea4:	08007e81 	.word	0x08007e81
 8007ea8:	08007e81 	.word	0x08007e81
 8007eac:	08007e81 	.word	0x08007e81
 8007eb0:	08007f05 	.word	0x08007f05
 8007eb4:	08007e81 	.word	0x08007e81
 8007eb8:	08007e81 	.word	0x08007e81
 8007ebc:	08007e81 	.word	0x08007e81
 8007ec0:	08007e81 	.word	0x08007e81
 8007ec4:	08008005 	.word	0x08008005
 8007ec8:	08007f2f 	.word	0x08007f2f
 8007ecc:	08007fbf 	.word	0x08007fbf
 8007ed0:	08007e81 	.word	0x08007e81
 8007ed4:	08007e81 	.word	0x08007e81
 8007ed8:	08008027 	.word	0x08008027
 8007edc:	08007e81 	.word	0x08007e81
 8007ee0:	08007f2f 	.word	0x08007f2f
 8007ee4:	08007e81 	.word	0x08007e81
 8007ee8:	08007e81 	.word	0x08007e81
 8007eec:	08007fc7 	.word	0x08007fc7
 8007ef0:	6833      	ldr	r3, [r6, #0]
 8007ef2:	1d1a      	adds	r2, r3, #4
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	6032      	str	r2, [r6, #0]
 8007ef8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007efc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f00:	2301      	movs	r3, #1
 8007f02:	e09d      	b.n	8008040 <_printf_i+0x1e8>
 8007f04:	6833      	ldr	r3, [r6, #0]
 8007f06:	6820      	ldr	r0, [r4, #0]
 8007f08:	1d19      	adds	r1, r3, #4
 8007f0a:	6031      	str	r1, [r6, #0]
 8007f0c:	0606      	lsls	r6, r0, #24
 8007f0e:	d501      	bpl.n	8007f14 <_printf_i+0xbc>
 8007f10:	681d      	ldr	r5, [r3, #0]
 8007f12:	e003      	b.n	8007f1c <_printf_i+0xc4>
 8007f14:	0645      	lsls	r5, r0, #25
 8007f16:	d5fb      	bpl.n	8007f10 <_printf_i+0xb8>
 8007f18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f1c:	2d00      	cmp	r5, #0
 8007f1e:	da03      	bge.n	8007f28 <_printf_i+0xd0>
 8007f20:	232d      	movs	r3, #45	@ 0x2d
 8007f22:	426d      	negs	r5, r5
 8007f24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f28:	4859      	ldr	r0, [pc, #356]	@ (8008090 <_printf_i+0x238>)
 8007f2a:	230a      	movs	r3, #10
 8007f2c:	e011      	b.n	8007f52 <_printf_i+0xfa>
 8007f2e:	6821      	ldr	r1, [r4, #0]
 8007f30:	6833      	ldr	r3, [r6, #0]
 8007f32:	0608      	lsls	r0, r1, #24
 8007f34:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f38:	d402      	bmi.n	8007f40 <_printf_i+0xe8>
 8007f3a:	0649      	lsls	r1, r1, #25
 8007f3c:	bf48      	it	mi
 8007f3e:	b2ad      	uxthmi	r5, r5
 8007f40:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f42:	4853      	ldr	r0, [pc, #332]	@ (8008090 <_printf_i+0x238>)
 8007f44:	6033      	str	r3, [r6, #0]
 8007f46:	bf14      	ite	ne
 8007f48:	230a      	movne	r3, #10
 8007f4a:	2308      	moveq	r3, #8
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f52:	6866      	ldr	r6, [r4, #4]
 8007f54:	60a6      	str	r6, [r4, #8]
 8007f56:	2e00      	cmp	r6, #0
 8007f58:	bfa2      	ittt	ge
 8007f5a:	6821      	ldrge	r1, [r4, #0]
 8007f5c:	f021 0104 	bicge.w	r1, r1, #4
 8007f60:	6021      	strge	r1, [r4, #0]
 8007f62:	b90d      	cbnz	r5, 8007f68 <_printf_i+0x110>
 8007f64:	2e00      	cmp	r6, #0
 8007f66:	d04b      	beq.n	8008000 <_printf_i+0x1a8>
 8007f68:	4616      	mov	r6, r2
 8007f6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f6e:	fb03 5711 	mls	r7, r3, r1, r5
 8007f72:	5dc7      	ldrb	r7, [r0, r7]
 8007f74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f78:	462f      	mov	r7, r5
 8007f7a:	42bb      	cmp	r3, r7
 8007f7c:	460d      	mov	r5, r1
 8007f7e:	d9f4      	bls.n	8007f6a <_printf_i+0x112>
 8007f80:	2b08      	cmp	r3, #8
 8007f82:	d10b      	bne.n	8007f9c <_printf_i+0x144>
 8007f84:	6823      	ldr	r3, [r4, #0]
 8007f86:	07df      	lsls	r7, r3, #31
 8007f88:	d508      	bpl.n	8007f9c <_printf_i+0x144>
 8007f8a:	6923      	ldr	r3, [r4, #16]
 8007f8c:	6861      	ldr	r1, [r4, #4]
 8007f8e:	4299      	cmp	r1, r3
 8007f90:	bfde      	ittt	le
 8007f92:	2330      	movle	r3, #48	@ 0x30
 8007f94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f9c:	1b92      	subs	r2, r2, r6
 8007f9e:	6122      	str	r2, [r4, #16]
 8007fa0:	f8cd a000 	str.w	sl, [sp]
 8007fa4:	464b      	mov	r3, r9
 8007fa6:	aa03      	add	r2, sp, #12
 8007fa8:	4621      	mov	r1, r4
 8007faa:	4640      	mov	r0, r8
 8007fac:	f7ff fee6 	bl	8007d7c <_printf_common>
 8007fb0:	3001      	adds	r0, #1
 8007fb2:	d14a      	bne.n	800804a <_printf_i+0x1f2>
 8007fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb8:	b004      	add	sp, #16
 8007fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fbe:	6823      	ldr	r3, [r4, #0]
 8007fc0:	f043 0320 	orr.w	r3, r3, #32
 8007fc4:	6023      	str	r3, [r4, #0]
 8007fc6:	4833      	ldr	r0, [pc, #204]	@ (8008094 <_printf_i+0x23c>)
 8007fc8:	2778      	movs	r7, #120	@ 0x78
 8007fca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007fce:	6823      	ldr	r3, [r4, #0]
 8007fd0:	6831      	ldr	r1, [r6, #0]
 8007fd2:	061f      	lsls	r7, r3, #24
 8007fd4:	f851 5b04 	ldr.w	r5, [r1], #4
 8007fd8:	d402      	bmi.n	8007fe0 <_printf_i+0x188>
 8007fda:	065f      	lsls	r7, r3, #25
 8007fdc:	bf48      	it	mi
 8007fde:	b2ad      	uxthmi	r5, r5
 8007fe0:	6031      	str	r1, [r6, #0]
 8007fe2:	07d9      	lsls	r1, r3, #31
 8007fe4:	bf44      	itt	mi
 8007fe6:	f043 0320 	orrmi.w	r3, r3, #32
 8007fea:	6023      	strmi	r3, [r4, #0]
 8007fec:	b11d      	cbz	r5, 8007ff6 <_printf_i+0x19e>
 8007fee:	2310      	movs	r3, #16
 8007ff0:	e7ac      	b.n	8007f4c <_printf_i+0xf4>
 8007ff2:	4827      	ldr	r0, [pc, #156]	@ (8008090 <_printf_i+0x238>)
 8007ff4:	e7e9      	b.n	8007fca <_printf_i+0x172>
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	f023 0320 	bic.w	r3, r3, #32
 8007ffc:	6023      	str	r3, [r4, #0]
 8007ffe:	e7f6      	b.n	8007fee <_printf_i+0x196>
 8008000:	4616      	mov	r6, r2
 8008002:	e7bd      	b.n	8007f80 <_printf_i+0x128>
 8008004:	6833      	ldr	r3, [r6, #0]
 8008006:	6825      	ldr	r5, [r4, #0]
 8008008:	6961      	ldr	r1, [r4, #20]
 800800a:	1d18      	adds	r0, r3, #4
 800800c:	6030      	str	r0, [r6, #0]
 800800e:	062e      	lsls	r6, r5, #24
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	d501      	bpl.n	8008018 <_printf_i+0x1c0>
 8008014:	6019      	str	r1, [r3, #0]
 8008016:	e002      	b.n	800801e <_printf_i+0x1c6>
 8008018:	0668      	lsls	r0, r5, #25
 800801a:	d5fb      	bpl.n	8008014 <_printf_i+0x1bc>
 800801c:	8019      	strh	r1, [r3, #0]
 800801e:	2300      	movs	r3, #0
 8008020:	6123      	str	r3, [r4, #16]
 8008022:	4616      	mov	r6, r2
 8008024:	e7bc      	b.n	8007fa0 <_printf_i+0x148>
 8008026:	6833      	ldr	r3, [r6, #0]
 8008028:	1d1a      	adds	r2, r3, #4
 800802a:	6032      	str	r2, [r6, #0]
 800802c:	681e      	ldr	r6, [r3, #0]
 800802e:	6862      	ldr	r2, [r4, #4]
 8008030:	2100      	movs	r1, #0
 8008032:	4630      	mov	r0, r6
 8008034:	f7f8 f8cc 	bl	80001d0 <memchr>
 8008038:	b108      	cbz	r0, 800803e <_printf_i+0x1e6>
 800803a:	1b80      	subs	r0, r0, r6
 800803c:	6060      	str	r0, [r4, #4]
 800803e:	6863      	ldr	r3, [r4, #4]
 8008040:	6123      	str	r3, [r4, #16]
 8008042:	2300      	movs	r3, #0
 8008044:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008048:	e7aa      	b.n	8007fa0 <_printf_i+0x148>
 800804a:	6923      	ldr	r3, [r4, #16]
 800804c:	4632      	mov	r2, r6
 800804e:	4649      	mov	r1, r9
 8008050:	4640      	mov	r0, r8
 8008052:	47d0      	blx	sl
 8008054:	3001      	adds	r0, #1
 8008056:	d0ad      	beq.n	8007fb4 <_printf_i+0x15c>
 8008058:	6823      	ldr	r3, [r4, #0]
 800805a:	079b      	lsls	r3, r3, #30
 800805c:	d413      	bmi.n	8008086 <_printf_i+0x22e>
 800805e:	68e0      	ldr	r0, [r4, #12]
 8008060:	9b03      	ldr	r3, [sp, #12]
 8008062:	4298      	cmp	r0, r3
 8008064:	bfb8      	it	lt
 8008066:	4618      	movlt	r0, r3
 8008068:	e7a6      	b.n	8007fb8 <_printf_i+0x160>
 800806a:	2301      	movs	r3, #1
 800806c:	4632      	mov	r2, r6
 800806e:	4649      	mov	r1, r9
 8008070:	4640      	mov	r0, r8
 8008072:	47d0      	blx	sl
 8008074:	3001      	adds	r0, #1
 8008076:	d09d      	beq.n	8007fb4 <_printf_i+0x15c>
 8008078:	3501      	adds	r5, #1
 800807a:	68e3      	ldr	r3, [r4, #12]
 800807c:	9903      	ldr	r1, [sp, #12]
 800807e:	1a5b      	subs	r3, r3, r1
 8008080:	42ab      	cmp	r3, r5
 8008082:	dcf2      	bgt.n	800806a <_printf_i+0x212>
 8008084:	e7eb      	b.n	800805e <_printf_i+0x206>
 8008086:	2500      	movs	r5, #0
 8008088:	f104 0619 	add.w	r6, r4, #25
 800808c:	e7f5      	b.n	800807a <_printf_i+0x222>
 800808e:	bf00      	nop
 8008090:	0800b40d 	.word	0x0800b40d
 8008094:	0800b41e 	.word	0x0800b41e

08008098 <__swhatbuf_r>:
 8008098:	b570      	push	{r4, r5, r6, lr}
 800809a:	460c      	mov	r4, r1
 800809c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080a0:	2900      	cmp	r1, #0
 80080a2:	b096      	sub	sp, #88	@ 0x58
 80080a4:	4615      	mov	r5, r2
 80080a6:	461e      	mov	r6, r3
 80080a8:	da0d      	bge.n	80080c6 <__swhatbuf_r+0x2e>
 80080aa:	89a3      	ldrh	r3, [r4, #12]
 80080ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80080b0:	f04f 0100 	mov.w	r1, #0
 80080b4:	bf14      	ite	ne
 80080b6:	2340      	movne	r3, #64	@ 0x40
 80080b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80080bc:	2000      	movs	r0, #0
 80080be:	6031      	str	r1, [r6, #0]
 80080c0:	602b      	str	r3, [r5, #0]
 80080c2:	b016      	add	sp, #88	@ 0x58
 80080c4:	bd70      	pop	{r4, r5, r6, pc}
 80080c6:	466a      	mov	r2, sp
 80080c8:	f000 f8dc 	bl	8008284 <_fstat_r>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	dbec      	blt.n	80080aa <__swhatbuf_r+0x12>
 80080d0:	9901      	ldr	r1, [sp, #4]
 80080d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80080d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80080da:	4259      	negs	r1, r3
 80080dc:	4159      	adcs	r1, r3
 80080de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80080e2:	e7eb      	b.n	80080bc <__swhatbuf_r+0x24>

080080e4 <__smakebuf_r>:
 80080e4:	898b      	ldrh	r3, [r1, #12]
 80080e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080e8:	079d      	lsls	r5, r3, #30
 80080ea:	4606      	mov	r6, r0
 80080ec:	460c      	mov	r4, r1
 80080ee:	d507      	bpl.n	8008100 <__smakebuf_r+0x1c>
 80080f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80080f4:	6023      	str	r3, [r4, #0]
 80080f6:	6123      	str	r3, [r4, #16]
 80080f8:	2301      	movs	r3, #1
 80080fa:	6163      	str	r3, [r4, #20]
 80080fc:	b003      	add	sp, #12
 80080fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008100:	ab01      	add	r3, sp, #4
 8008102:	466a      	mov	r2, sp
 8008104:	f7ff ffc8 	bl	8008098 <__swhatbuf_r>
 8008108:	9f00      	ldr	r7, [sp, #0]
 800810a:	4605      	mov	r5, r0
 800810c:	4639      	mov	r1, r7
 800810e:	4630      	mov	r0, r6
 8008110:	f7ff fc66 	bl	80079e0 <_malloc_r>
 8008114:	b948      	cbnz	r0, 800812a <__smakebuf_r+0x46>
 8008116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800811a:	059a      	lsls	r2, r3, #22
 800811c:	d4ee      	bmi.n	80080fc <__smakebuf_r+0x18>
 800811e:	f023 0303 	bic.w	r3, r3, #3
 8008122:	f043 0302 	orr.w	r3, r3, #2
 8008126:	81a3      	strh	r3, [r4, #12]
 8008128:	e7e2      	b.n	80080f0 <__smakebuf_r+0xc>
 800812a:	89a3      	ldrh	r3, [r4, #12]
 800812c:	6020      	str	r0, [r4, #0]
 800812e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008132:	81a3      	strh	r3, [r4, #12]
 8008134:	9b01      	ldr	r3, [sp, #4]
 8008136:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800813a:	b15b      	cbz	r3, 8008154 <__smakebuf_r+0x70>
 800813c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008140:	4630      	mov	r0, r6
 8008142:	f000 f8b1 	bl	80082a8 <_isatty_r>
 8008146:	b128      	cbz	r0, 8008154 <__smakebuf_r+0x70>
 8008148:	89a3      	ldrh	r3, [r4, #12]
 800814a:	f023 0303 	bic.w	r3, r3, #3
 800814e:	f043 0301 	orr.w	r3, r3, #1
 8008152:	81a3      	strh	r3, [r4, #12]
 8008154:	89a3      	ldrh	r3, [r4, #12]
 8008156:	431d      	orrs	r5, r3
 8008158:	81a5      	strh	r5, [r4, #12]
 800815a:	e7cf      	b.n	80080fc <__smakebuf_r+0x18>

0800815c <__swbuf_r>:
 800815c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815e:	460e      	mov	r6, r1
 8008160:	4614      	mov	r4, r2
 8008162:	4605      	mov	r5, r0
 8008164:	b118      	cbz	r0, 800816e <__swbuf_r+0x12>
 8008166:	6a03      	ldr	r3, [r0, #32]
 8008168:	b90b      	cbnz	r3, 800816e <__swbuf_r+0x12>
 800816a:	f7ff fab7 	bl	80076dc <__sinit>
 800816e:	69a3      	ldr	r3, [r4, #24]
 8008170:	60a3      	str	r3, [r4, #8]
 8008172:	89a3      	ldrh	r3, [r4, #12]
 8008174:	071a      	lsls	r2, r3, #28
 8008176:	d501      	bpl.n	800817c <__swbuf_r+0x20>
 8008178:	6923      	ldr	r3, [r4, #16]
 800817a:	b943      	cbnz	r3, 800818e <__swbuf_r+0x32>
 800817c:	4621      	mov	r1, r4
 800817e:	4628      	mov	r0, r5
 8008180:	f000 f82a 	bl	80081d8 <__swsetup_r>
 8008184:	b118      	cbz	r0, 800818e <__swbuf_r+0x32>
 8008186:	f04f 37ff 	mov.w	r7, #4294967295
 800818a:	4638      	mov	r0, r7
 800818c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800818e:	6823      	ldr	r3, [r4, #0]
 8008190:	6922      	ldr	r2, [r4, #16]
 8008192:	1a98      	subs	r0, r3, r2
 8008194:	6963      	ldr	r3, [r4, #20]
 8008196:	b2f6      	uxtb	r6, r6
 8008198:	4283      	cmp	r3, r0
 800819a:	4637      	mov	r7, r6
 800819c:	dc05      	bgt.n	80081aa <__swbuf_r+0x4e>
 800819e:	4621      	mov	r1, r4
 80081a0:	4628      	mov	r0, r5
 80081a2:	f7ff f9e7 	bl	8007574 <_fflush_r>
 80081a6:	2800      	cmp	r0, #0
 80081a8:	d1ed      	bne.n	8008186 <__swbuf_r+0x2a>
 80081aa:	68a3      	ldr	r3, [r4, #8]
 80081ac:	3b01      	subs	r3, #1
 80081ae:	60a3      	str	r3, [r4, #8]
 80081b0:	6823      	ldr	r3, [r4, #0]
 80081b2:	1c5a      	adds	r2, r3, #1
 80081b4:	6022      	str	r2, [r4, #0]
 80081b6:	701e      	strb	r6, [r3, #0]
 80081b8:	6962      	ldr	r2, [r4, #20]
 80081ba:	1c43      	adds	r3, r0, #1
 80081bc:	429a      	cmp	r2, r3
 80081be:	d004      	beq.n	80081ca <__swbuf_r+0x6e>
 80081c0:	89a3      	ldrh	r3, [r4, #12]
 80081c2:	07db      	lsls	r3, r3, #31
 80081c4:	d5e1      	bpl.n	800818a <__swbuf_r+0x2e>
 80081c6:	2e0a      	cmp	r6, #10
 80081c8:	d1df      	bne.n	800818a <__swbuf_r+0x2e>
 80081ca:	4621      	mov	r1, r4
 80081cc:	4628      	mov	r0, r5
 80081ce:	f7ff f9d1 	bl	8007574 <_fflush_r>
 80081d2:	2800      	cmp	r0, #0
 80081d4:	d0d9      	beq.n	800818a <__swbuf_r+0x2e>
 80081d6:	e7d6      	b.n	8008186 <__swbuf_r+0x2a>

080081d8 <__swsetup_r>:
 80081d8:	b538      	push	{r3, r4, r5, lr}
 80081da:	4b29      	ldr	r3, [pc, #164]	@ (8008280 <__swsetup_r+0xa8>)
 80081dc:	4605      	mov	r5, r0
 80081de:	6818      	ldr	r0, [r3, #0]
 80081e0:	460c      	mov	r4, r1
 80081e2:	b118      	cbz	r0, 80081ec <__swsetup_r+0x14>
 80081e4:	6a03      	ldr	r3, [r0, #32]
 80081e6:	b90b      	cbnz	r3, 80081ec <__swsetup_r+0x14>
 80081e8:	f7ff fa78 	bl	80076dc <__sinit>
 80081ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081f0:	0719      	lsls	r1, r3, #28
 80081f2:	d422      	bmi.n	800823a <__swsetup_r+0x62>
 80081f4:	06da      	lsls	r2, r3, #27
 80081f6:	d407      	bmi.n	8008208 <__swsetup_r+0x30>
 80081f8:	2209      	movs	r2, #9
 80081fa:	602a      	str	r2, [r5, #0]
 80081fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008200:	81a3      	strh	r3, [r4, #12]
 8008202:	f04f 30ff 	mov.w	r0, #4294967295
 8008206:	e033      	b.n	8008270 <__swsetup_r+0x98>
 8008208:	0758      	lsls	r0, r3, #29
 800820a:	d512      	bpl.n	8008232 <__swsetup_r+0x5a>
 800820c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800820e:	b141      	cbz	r1, 8008222 <__swsetup_r+0x4a>
 8008210:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008214:	4299      	cmp	r1, r3
 8008216:	d002      	beq.n	800821e <__swsetup_r+0x46>
 8008218:	4628      	mov	r0, r5
 800821a:	f7ff fb75 	bl	8007908 <_free_r>
 800821e:	2300      	movs	r3, #0
 8008220:	6363      	str	r3, [r4, #52]	@ 0x34
 8008222:	89a3      	ldrh	r3, [r4, #12]
 8008224:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008228:	81a3      	strh	r3, [r4, #12]
 800822a:	2300      	movs	r3, #0
 800822c:	6063      	str	r3, [r4, #4]
 800822e:	6923      	ldr	r3, [r4, #16]
 8008230:	6023      	str	r3, [r4, #0]
 8008232:	89a3      	ldrh	r3, [r4, #12]
 8008234:	f043 0308 	orr.w	r3, r3, #8
 8008238:	81a3      	strh	r3, [r4, #12]
 800823a:	6923      	ldr	r3, [r4, #16]
 800823c:	b94b      	cbnz	r3, 8008252 <__swsetup_r+0x7a>
 800823e:	89a3      	ldrh	r3, [r4, #12]
 8008240:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008248:	d003      	beq.n	8008252 <__swsetup_r+0x7a>
 800824a:	4621      	mov	r1, r4
 800824c:	4628      	mov	r0, r5
 800824e:	f7ff ff49 	bl	80080e4 <__smakebuf_r>
 8008252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008256:	f013 0201 	ands.w	r2, r3, #1
 800825a:	d00a      	beq.n	8008272 <__swsetup_r+0x9a>
 800825c:	2200      	movs	r2, #0
 800825e:	60a2      	str	r2, [r4, #8]
 8008260:	6962      	ldr	r2, [r4, #20]
 8008262:	4252      	negs	r2, r2
 8008264:	61a2      	str	r2, [r4, #24]
 8008266:	6922      	ldr	r2, [r4, #16]
 8008268:	b942      	cbnz	r2, 800827c <__swsetup_r+0xa4>
 800826a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800826e:	d1c5      	bne.n	80081fc <__swsetup_r+0x24>
 8008270:	bd38      	pop	{r3, r4, r5, pc}
 8008272:	0799      	lsls	r1, r3, #30
 8008274:	bf58      	it	pl
 8008276:	6962      	ldrpl	r2, [r4, #20]
 8008278:	60a2      	str	r2, [r4, #8]
 800827a:	e7f4      	b.n	8008266 <__swsetup_r+0x8e>
 800827c:	2000      	movs	r0, #0
 800827e:	e7f7      	b.n	8008270 <__swsetup_r+0x98>
 8008280:	20000020 	.word	0x20000020

08008284 <_fstat_r>:
 8008284:	b538      	push	{r3, r4, r5, lr}
 8008286:	4d07      	ldr	r5, [pc, #28]	@ (80082a4 <_fstat_r+0x20>)
 8008288:	2300      	movs	r3, #0
 800828a:	4604      	mov	r4, r0
 800828c:	4608      	mov	r0, r1
 800828e:	4611      	mov	r1, r2
 8008290:	602b      	str	r3, [r5, #0]
 8008292:	f7f9 fb08 	bl	80018a6 <_fstat>
 8008296:	1c43      	adds	r3, r0, #1
 8008298:	d102      	bne.n	80082a0 <_fstat_r+0x1c>
 800829a:	682b      	ldr	r3, [r5, #0]
 800829c:	b103      	cbz	r3, 80082a0 <_fstat_r+0x1c>
 800829e:	6023      	str	r3, [r4, #0]
 80082a0:	bd38      	pop	{r3, r4, r5, pc}
 80082a2:	bf00      	nop
 80082a4:	2000a3b8 	.word	0x2000a3b8

080082a8 <_isatty_r>:
 80082a8:	b538      	push	{r3, r4, r5, lr}
 80082aa:	4d06      	ldr	r5, [pc, #24]	@ (80082c4 <_isatty_r+0x1c>)
 80082ac:	2300      	movs	r3, #0
 80082ae:	4604      	mov	r4, r0
 80082b0:	4608      	mov	r0, r1
 80082b2:	602b      	str	r3, [r5, #0]
 80082b4:	f7f9 fb07 	bl	80018c6 <_isatty>
 80082b8:	1c43      	adds	r3, r0, #1
 80082ba:	d102      	bne.n	80082c2 <_isatty_r+0x1a>
 80082bc:	682b      	ldr	r3, [r5, #0]
 80082be:	b103      	cbz	r3, 80082c2 <_isatty_r+0x1a>
 80082c0:	6023      	str	r3, [r4, #0]
 80082c2:	bd38      	pop	{r3, r4, r5, pc}
 80082c4:	2000a3b8 	.word	0x2000a3b8

080082c8 <_sbrk_r>:
 80082c8:	b538      	push	{r3, r4, r5, lr}
 80082ca:	4d06      	ldr	r5, [pc, #24]	@ (80082e4 <_sbrk_r+0x1c>)
 80082cc:	2300      	movs	r3, #0
 80082ce:	4604      	mov	r4, r0
 80082d0:	4608      	mov	r0, r1
 80082d2:	602b      	str	r3, [r5, #0]
 80082d4:	f7f9 fb10 	bl	80018f8 <_sbrk>
 80082d8:	1c43      	adds	r3, r0, #1
 80082da:	d102      	bne.n	80082e2 <_sbrk_r+0x1a>
 80082dc:	682b      	ldr	r3, [r5, #0]
 80082de:	b103      	cbz	r3, 80082e2 <_sbrk_r+0x1a>
 80082e0:	6023      	str	r3, [r4, #0]
 80082e2:	bd38      	pop	{r3, r4, r5, pc}
 80082e4:	2000a3b8 	.word	0x2000a3b8

080082e8 <_init>:
 80082e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ea:	bf00      	nop
 80082ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ee:	bc08      	pop	{r3}
 80082f0:	469e      	mov	lr, r3
 80082f2:	4770      	bx	lr

080082f4 <_fini>:
 80082f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f6:	bf00      	nop
 80082f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082fa:	bc08      	pop	{r3}
 80082fc:	469e      	mov	lr, r3
 80082fe:	4770      	bx	lr
